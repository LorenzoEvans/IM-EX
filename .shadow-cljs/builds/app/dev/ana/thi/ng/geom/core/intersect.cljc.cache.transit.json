["^ ","~:output",["^ ","~:js","goog.provide('thi.ng.geom.core.intersect');\ngoog.require('cljs.core');\ngoog.require('thi.ng.geom.core');\ngoog.require('thi.ng.geom.core.utils');\ngoog.require('thi.ng.geom.core.vector');\ngoog.require('thi.ng.math.core');\nthi.ng.geom.core.intersect.sq = (function thi$ng$geom$core$intersect$sq(x){\nreturn (x * x);\n});\nthi.ng.geom.core.intersect.intersect_circle_circle_QMARK_ = (function thi$ng$geom$core$intersect$intersect_circle_circle_QMARK_(var_args){\nvar G__43953 = arguments.length;\nswitch (G__43953) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__43957,p__43958){\nvar map__43960 = p__43957;\nvar map__43960__$1 = (((((!((map__43960 == null))))?(((((map__43960.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43960.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43960):map__43960);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43960__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43960__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar map__43962 = p__43958;\nvar map__43962__$1 = (((((!((map__43962 == null))))?(((((map__43962.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43962.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43962):map__43962);\nvar q = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43962__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43962__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4(p,r1,q,r2);\n});\n\nthi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p,r1,q,r2){\nvar delta = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(q,p);\nvar d = thi.ng.geom.core.mag(delta);\nif((((d <= (r1 + r2))) && ((d >= (function (){var G__43975 = (r1 - r2);\nreturn (thi.ng.math.core.abs.cljs$core$IFn$_invoke$arity$1 ? thi.ng.math.core.abs.cljs$core$IFn$_invoke$arity$1(G__43975) : thi.ng.math.core.abs.call(null,G__43975));\n})())))){\nvar a = ((((r1 * r1) - (r2 * r2)) + (d * d)) / (2.0 * d));\nvar invd = (1.0 / d);\nvar p__$1 = thi.ng.geom.core.madd(delta,(a * invd),p);\nvar h = (function (){var G__43980 = ((r1 * r1) - (a * a));\nreturn Math.sqrt(G__43980);\n})();\nvar perp = thi.ng.geom.core._STAR_.cljs$core$IFn$_invoke$arity$2(thi.ng.geom.core.normal.cljs$core$IFn$_invoke$arity$1(delta),(h * invd));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p__$1,perp),thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p__$1,perp)], null);\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_rect_rect_QMARK_ = (function thi$ng$geom$core$intersect$intersect_rect_rect_QMARK_(var_args){\nvar G__43993 = arguments.length;\nswitch (G__43993) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__43994,p__43995){\nvar map__43996 = p__43994;\nvar map__43996__$1 = (((((!((map__43996 == null))))?(((((map__43996.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43996.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43996):map__43996);\nvar vec__43997 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43996__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43997,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43997,(1),null);\nvar vec__44000 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43996__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44000,(0),null);\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44000,(1),null);\nvar map__44003 = p__43995;\nvar map__44003__$1 = (((((!((map__44003 == null))))?(((((map__44003.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44003.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44003):map__44003);\nvar vec__44004 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44003__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44004,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44004,(1),null);\nvar vec__44008 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44003__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar qw = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44008,(0),null);\nvar qh = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44008,(1),null);\nreturn (!((((px > (qx + qw))) || ((qx > (px + w))) || ((py > (qy + qh))) || ((qy > (py + h))))));\n});\n\nthi.ng.geom.core.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__44027,p__44028,p__44029,p__44030){\nvar vec__44031 = p__44027;\nvar px1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44031,(0),null);\nvar py1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44031,(1),null);\nvar vec__44034 = p__44028;\nvar qx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44034,(0),null);\nvar qy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44034,(1),null);\nvar vec__44037 = p__44029;\nvar px2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44037,(0),null);\nvar py2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44037,(1),null);\nvar vec__44040 = p__44030;\nvar qx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44040,(0),null);\nvar qy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44040,(1),null);\nreturn (!((((px1 > qx2)) || ((px2 > qx1)) || ((py1 > qy2)) || ((py2 > qy1)))));\n});\n\nthi.ng.geom.core.intersect.intersect_rect_rect_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_rect_circle_QMARK_ = (function thi$ng$geom$core$intersect$intersect_rect_circle_QMARK_(var_args){\nvar G__44049 = arguments.length;\nswitch (G__44049) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__44052,p__44053){\nvar map__44054 = p__44052;\nvar map__44054__$1 = (((((!((map__44054 == null))))?(((((map__44054.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44054.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44054):map__44054);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44054__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sz = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44054__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__44055 = p__44053;\nvar map__44055__$1 = (((((!((map__44055 == null))))?(((((map__44055.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44055.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44055):map__44055);\nvar s = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44055__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44055__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4(p,thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,sz),s,r);\n});\n\nthi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__44058,p__44059,p__44060,r){\nvar vec__44061 = p__44058;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44061,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44061,(1),null);\nvar vec__44064 = p__44059;\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44064,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44064,(1),null);\nvar vec__44067 = p__44060;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44067,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44067,(1),null);\nvar ds = (((cx < px))?thi.ng.geom.core.intersect.sq((cx - px)):(((cx > qx))?thi.ng.geom.core.intersect.sq((cx - qx)):0.0));\nvar ds__$1 = (ds + (((cy < py))?thi.ng.geom.core.intersect.sq((cy - py)):(((cy > qy))?thi.ng.geom.core.intersect.sq((cy - qy)):0.0)));\nreturn (ds__$1 <= (r * r));\n});\n\nthi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_ = (function thi$ng$geom$core$intersect$intersect_aabb_aabb_QMARK_(var_args){\nvar G__44073 = arguments.length;\nswitch (G__44073) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__44077,p__44080){\nvar map__44085 = p__44077;\nvar map__44085__$1 = (((((!((map__44085 == null))))?(((((map__44085.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44085.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44085):map__44085);\nvar pa = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44085__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sa = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44085__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__44086 = p__44080;\nvar map__44086__$1 = (((((!((map__44086 == null))))?(((((map__44086.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44086.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44086):map__44086);\nvar pb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44086__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44086__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nreturn thi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4(pa,pb,thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(pa,sa),thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(pb,sb));\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (pa,pb,qa,qb){\nif(((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((0)) : pa.call(null,(0))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((0)) : qb.call(null,(0))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((0)) : pb.call(null,(0))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((0)) : qa.call(null,(0))))))){\nif(((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((1)) : pa.call(null,(1))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((1)) : qb.call(null,(1))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((1)) : pb.call(null,(1))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((1)) : qa.call(null,(1))))))){\nreturn ((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((2)) : pa.call(null,(2))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((2)) : qb.call(null,(2))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((2)) : pb.call(null,(2))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((2)) : qa.call(null,(2))))));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_ = (function thi$ng$geom$core$intersect$intersect_aabb_sphere_QMARK_(var_args){\nvar G__44090 = arguments.length;\nswitch (G__44090) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__44091,p__44092){\nvar map__44093 = p__44091;\nvar map__44093__$1 = (((((!((map__44093 == null))))?(((((map__44093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44093):map__44093);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44093__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sz = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44093__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__44094 = p__44092;\nvar map__44094__$1 = (((((!((map__44094 == null))))?(((((map__44094.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44094.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44094):map__44094);\nvar s = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44094__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44094__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(p,thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,sz),s,r);\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__44097,p__44098,p__44099,r){\nvar vec__44100 = p__44097;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44100,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44100,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44100,(2),null);\nvar vec__44103 = p__44098;\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44103,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44103,(1),null);\nvar qz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44103,(2),null);\nvar vec__44106 = p__44099;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44106,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44106,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44106,(2),null);\nvar ds = (((cx < px))?thi.ng.geom.core.intersect.sq((cx - px)):(((cx > qx))?thi.ng.geom.core.intersect.sq((cx - qx)):0.0));\nvar ds__$1 = (ds + (((cy < py))?thi.ng.geom.core.intersect.sq((cy - py)):(((cy > qy))?thi.ng.geom.core.intersect.sq((cy - qy)):0.0)));\nvar ds__$2 = (ds__$1 + (((cz < pz))?thi.ng.geom.core.intersect.sq((cz - pz)):(((cz > qz))?thi.ng.geom.core.intersect.sq((cz - qz)):0.0)));\nreturn (ds__$2 <= (r * r));\n});\n\nthi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\n/**\n * Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n *   parameters (each element [normal w]). The plane normals must be\n *   pointing *inwards*. Returns :inside, :intersect or :outside\n */\nthi.ng.geom.core.intersect.intersect_aabb_frustum_QMARK_ = (function thi$ng$geom$core$intersect$intersect_aabb_frustum_QMARK_(p__44110,size,planes){\nvar vec__44111 = p__44110;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44111,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44111,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44111,(2),null);\nvar p = vec__44111;\nvar vec__44114 = thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,size);\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44114,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44114,(1),null);\nvar qz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44114,(2),null);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__44114,qx,qy,qz,vec__44111,px,py,pz,p){\nreturn (function (res,p__44117){\nvar vec__44118 = p__44117;\nvar vec__44121 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44118,(0),null);\nvar nx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44121,(0),null);\nvar ny = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44121,(1),null);\nvar nz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44121,(2),null);\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44118,(1),null);\nvar vx = (((nx > (0)))?px:qx);\nvar vy = (((ny > (0)))?py:qy);\nvar vz = (((nz > (0)))?pz:qz);\nif((((((nx * vx) + (ny * vy)) + (nz * vz)) + w) > (0))){\nreturn cljs.core.reduced(new cljs.core.Keyword(null,\"outside\",\"outside\",-13164995));\n} else {\nvar vx__$1 = (((nx > (0)))?qx:px);\nvar vy__$1 = (((ny > (0)))?qy:py);\nvar vz__$1 = (((nz > (0)))?qz:pz);\nif((((((nx * vx__$1) + (ny * vy__$1)) + (nz * vz__$1)) + w) > (0))){\nreturn new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392);\n} else {\nreturn res;\n}\n}\n});})(vec__44114,qx,qy,qz,vec__44111,px,py,pz,p))\n,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),planes);\n});\nthi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_ = (function thi$ng$geom$core$intersect$intersect_sphere_sphere_QMARK_(var_args){\nvar G__44128 = arguments.length;\nswitch (G__44128) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__44129,p__44130){\nvar map__44131 = p__44129;\nvar map__44131__$1 = (((((!((map__44131 == null))))?(((((map__44131.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44131.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44131):map__44131);\nvar p1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44131__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44131__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar map__44132 = p__44130;\nvar map__44132__$1 = (((((!((map__44132 == null))))?(((((map__44132.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44132.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44132):map__44132);\nvar p2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44132__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44132__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(p1,r1,p2,r2);\n});\n\nthi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p1,r1,p2,r2){\nreturn (thi.ng.geom.core.dist_squared(p1,p2) <= ((r1 + r2) * (r1 + r2)));\n});\n\nthi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_ = (function thi$ng$geom$core$intersect$intersect_ray_sphere_QMARK_(var_args){\nvar G__44149 = arguments.length;\nswitch (G__44149) {\ncase 2:\nreturn thi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__44150,p__44151){\nvar map__44153 = p__44150;\nvar map__44153__$1 = (((((!((map__44153 == null))))?(((((map__44153.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44153.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44153):map__44153);\nvar rp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44153__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44153__$1,new cljs.core.Keyword(null,\"dir\",\"dir\",1734754661));\nvar map__44154 = p__44151;\nvar map__44154__$1 = (((((!((map__44154 == null))))?(((((map__44154.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44154.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44154):map__44154);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44154__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44154__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(rp,dir,p,r);\n});\n\nthi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (rp,dir,p,r){\nvar q = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p,rp);\nvar ds = thi.ng.geom.core.mag_squared(q);\nvar v = (- thi.ng.geom.core.dot(q,dir));\nvar d = ((r * r) - (ds - (v * v)));\nif((d >= 0.0)){\nvar d__$1 = Math.sqrt(d);\nvar a = (v + d__$1);\nvar b = (v - d__$1);\nif((!((((a < (0))) && ((b < (0))))))){\nif((((a > (0))) && ((b > (0))))){\nif((a > b)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n} else {\nif((b > (0))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_ray_triangle3_QMARK_ = (function thi$ng$geom$core$intersect$intersect_ray_triangle3_QMARK_(p,d,a,b,c){\nvar u = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(b,a);\nvar v = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(c,a);\nvar n = thi.ng.geom.core.cross(u,v);\nif(cljs.core.truth_(thi.ng.geom.core.vector.V3.thi$ng$math$core$PDeltaEquals$delta_EQ_$arity$2(null,n))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"degenerate\",\"degenerate\",186148125)], null);\n} else {\nvar w0 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p,a);\nvar a_SINGLEQUOTE_ = (- thi.ng.geom.core.dot(n,w0));\nvar b_SINGLEQUOTE_ = thi.ng.geom.core.dot(n,d);\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(0.0,b_SINGLEQUOTE_))){\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(0.0,a_SINGLEQUOTE_))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"same-plane\",\"same-plane\",-2008485673)], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761)], null);\n}\n} else {\nvar r = (a_SINGLEQUOTE_ / b_SINGLEQUOTE_);\nif((r < 0.0)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761)], null);\n} else {\nvar i = thi.ng.geom.core.madd(d,r,p);\nvar vec__44175 = thi.ng.geom.core.utils.triangle_barycentric_coords.cljs$core$IFn$_invoke$arity$6(a,b,c,i,u,v);\nvar u__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44175,(0),null);\nvar v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44175,(1),null);\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44175,(2),null);\nif(cljs.core.truth_((function (){var and__4120__auto__ = (u__$1 >= 0.0);\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (w >= 0.0);\nif(and__4120__auto____$1){\nreturn thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3(0.0,1.0,v__$1);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n}\n}\n}\n}\n});\nthi.ng.geom.core.intersect.triaabb_axis_test = (function thi$ng$geom$core$intersect$triaabb_axis_test(pa1,pb1,pa2,pb2,a,b,fa,fb,sa,sb){\nvar q = ((a * pa1) + (b * pb1));\nvar r = ((a * pa2) + (b * pb2));\nvar vec__44178 = (((q < r))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [q,r], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,q], null));\nvar min = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44178,(0),null);\nvar max = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44178,(1),null);\nvar rad = ((fa * sa) + (fb * sb));\nif((min <= rad)){\nreturn (max >= (- rad));\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.triaabb_edge_test_e0 = (function thi$ng$geom$core$intersect$triaabb_edge_test_e0(p__44185,p__44186,p__44187,p__44188,p__44189){\nvar vec__44190 = p__44185;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44190,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44190,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44190,(2),null);\nvar a = vec__44190;\nvar vec__44193 = p__44186;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44193,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44193,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44193,(2),null);\nvar b = vec__44193;\nvar vec__44196 = p__44187;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44196,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44196,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44196,(2),null);\nvar vec__44199 = p__44188;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44199,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44199,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44199,(2),null);\nvar e = vec__44199;\nvar vec__44202 = p__44189;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44202,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44202,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44202,(2),null);\nvar vec__44205 = thi.ng.geom.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44205,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44205,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44205,(2),null);\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ay,az,cy,cz,ez,(- ey),fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ax,az,cx,cz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.core.intersect.triaabb_axis_test(bx,by,cx,cy,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.triaabb_edge_test_e1 = (function thi$ng$geom$core$intersect$triaabb_edge_test_e1(p__44211,p__44212,p__44213,p__44214,p__44215){\nvar vec__44216 = p__44211;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44216,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44216,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44216,(2),null);\nvar vec__44219 = p__44212;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44219,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44219,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44219,(2),null);\nvar b = vec__44219;\nvar vec__44222 = p__44213;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44222,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44222,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44222,(2),null);\nvar c = vec__44222;\nvar vec__44225 = p__44214;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44225,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44225,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44225,(2),null);\nvar e = vec__44225;\nvar vec__44228 = p__44215;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44228,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44228,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44228,(2),null);\nvar vec__44245 = thi.ng.geom.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44245,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44245,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44245,(2),null);\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ay,az,cy,cz,ez,ey,fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ax,az,cx,cz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.core.intersect.triaabb_axis_test(ax,ay,bx,by,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.triaabb_edge_test_e2 = (function thi$ng$geom$core$intersect$triaabb_edge_test_e2(p__44252,p__44253,p__44254,p__44255,p__44256){\nvar vec__44257 = p__44252;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44257,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44257,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44257,(2),null);\nvar a = vec__44257;\nvar vec__44260 = p__44253;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44260,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44260,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44260,(2),null);\nvar vec__44263 = p__44254;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44263,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44263,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44263,(2),null);\nvar c = vec__44263;\nvar vec__44266 = p__44255;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44266,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44266,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44266,(2),null);\nvar e = vec__44266;\nvar vec__44269 = p__44256;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44269,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44269,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44269,(2),null);\nvar vec__44272 = thi.ng.geom.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44272,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44272,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44272,(2),null);\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ay,az,by,bz,ez,(- ey),fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_axis_test(ax,az,bx,bz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.core.intersect.triaabb_axis_test(bx,by,cx,cy,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.triaabb_edge_minmax = (function thi$ng$geom$core$intersect$triaabb_edge_minmax(a,b,c,s){\nif(((function (){var x__4222__auto__ = (function (){var x__4222__auto__ = a;\nvar y__4223__auto__ = b;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = c;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})() < s)){\nreturn ((function (){var x__4219__auto__ = (function (){var x__4219__auto__ = a;\nvar y__4220__auto__ = b;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar y__4220__auto__ = c;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})() >= (- s));\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.intersect_triangle3_aabb_QMARK_ = (function thi$ng$geom$core$intersect$intersect_triangle3_aabb_QMARK_(a,b,c,p,s){\nvar vec__44305 = thi.ng.geom.core._STAR_.cljs$core$IFn$_invoke$arity$2(s,0.5);\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44305,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44305,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44305,(2),null);\nvar s__$1 = vec__44305;\nvar p__$1 = thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,s__$1);\nvar vec__44308 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(a,p__$1);\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44308,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44308,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44308,(2),null);\nvar a__$1 = vec__44308;\nvar vec__44311 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(b,p__$1);\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44311,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44311,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44311,(2),null);\nvar b__$1 = vec__44311;\nvar vec__44314 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(c,p__$1);\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44314,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44314,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44314,(2),null);\nvar c__$1 = vec__44314;\nvar e0 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(b__$1,a__$1);\nvar e1 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(c__$1,b__$1);\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_test_e0(a__$1,b__$1,c__$1,e0,s__$1))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_test_e1(a__$1,b__$1,c__$1,e1,s__$1))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_test_e2(a__$1,b__$1,c__$1,thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(a__$1,c__$1),s__$1))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_minmax(ax,bx,cx,sx))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_minmax(ay,by,cy,sy))){\nif(cljs.core.truth_(thi.ng.geom.core.intersect.triaabb_edge_minmax(az,bz,cz,sz))){\nvar G__44317 = a__$1;\nvar G__44318 = thi.ng.geom.core.cross(e0,e1);\nvar G__44319 = s__$1;\nreturn (thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3 ? thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3(G__44317,G__44318,G__44319) : thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.call(null,G__44317,G__44318,G__44319));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.core.intersect.intersect_line2_line2_QMARK_ = (function thi$ng$geom$core$intersect$intersect_line2_line2_QMARK_(p__44322,p__44323,p__44324,p__44325){\nvar vec__44326 = p__44322;\nvar px1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44326,(0),null);\nvar py1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44326,(1),null);\nvar p = vec__44326;\nvar vec__44329 = p__44323;\nvar qx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44329,(0),null);\nvar qy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44329,(1),null);\nvar q = vec__44329;\nvar vec__44332 = p__44324;\nvar px2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44332,(0),null);\nvar py2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44332,(1),null);\nvar lp = vec__44332;\nvar vec__44335 = p__44325;\nvar qx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44335,(0),null);\nvar qy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44335,(1),null);\nvar lq = vec__44335;\nvar dx1 = (qx1 - px1);\nvar dy1 = (qy1 - py1);\nvar dx2 = (qx2 - px2);\nvar dy2 = (qy2 - py2);\nvar dx12 = (px1 - px2);\nvar dy12 = (py1 - py2);\nvar denom = ((dy2 * dx1) - (dx2 * dy1));\nvar na = ((dx2 * dy12) - (dy2 * dx12));\nvar nb = ((dx1 * dy12) - (dy1 * dx12));\nif((denom === (0))){\nif((((na === (0))) && ((nb === (0))))){\nvar ip = thi.ng.geom.core.utils.closest_point_on_segment(lp,p,q);\nvar iq = thi.ng.geom.core.utils.closest_point_on_segment(lq,p,q);\nif(cljs.core.truth_((function (){var or__4131__auto__ = thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(ip,lp);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(iq,lq);\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"coincident\",\"coincident\",-473799301),new cljs.core.Keyword(null,\"p\",\"p\",151049309),ip,new cljs.core.Keyword(null,\"q\",\"q\",689001697),iq], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"coincident-no-intersect\",\"coincident-no-intersect\",1935247952),new cljs.core.Keyword(null,\"p\",\"p\",151049309),ip,new cljs.core.Keyword(null,\"q\",\"q\",689001697),iq], null);\n}\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128)], null);\n}\n} else {\nvar ua = (na / denom);\nvar ub = (nb / denom);\nvar i = thi.ng.geom.core.mix.cljs$core$IFn$_invoke$arity$3(p,q,ua);\nif((((ua >= 0.0)) && ((ua <= 1.0)) && ((ub >= 0.0)) && ((ub <= 1.0)))){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i,new cljs.core.Keyword(null,\"ua\",\"ua\",834554218),ua,new cljs.core.Keyword(null,\"ub\",\"ub\",-1843904981),ub], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect-outside\",\"intersect-outside\",-337610558),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i,new cljs.core.Keyword(null,\"ua\",\"ua\",834554218),ua,new cljs.core.Keyword(null,\"ub\",\"ub\",-1843904981),ub], null);\n}\n}\n});\nthi.ng.geom.core.intersect.intersect_line2_edges_QMARK_ = (function thi$ng$geom$core$intersect$intersect_line2_edges_QMARK_(rp,rq,edges){\nreturn cljs.core.first(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__44339){\nvar vec__44340 = p__44339;\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44340,(0),null);\nvar q = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44340,(1),null);\nreturn thi.ng.geom.core.intersect.intersect_line2_line2_QMARK_(rp,rq,p,q);\n})),cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (p1__44338_SHARP_){\nvar and__4120__auto__ = new cljs.core.Keyword(null,\"p\",\"p\",151049309).cljs$core$IFn$_invoke$arity$1(p1__44338_SHARP_);\nif(cljs.core.truth_(and__4120__auto__)){\nvar G__44344 = new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__44338_SHARP_);\nvar fexpr__44343 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),null,new cljs.core.Keyword(null,\"coincident\",\"coincident\",-473799301),null], null), null);\nreturn (fexpr__44343.cljs$core$IFn$_invoke$arity$1 ? fexpr__44343.cljs$core$IFn$_invoke$arity$1(G__44344) : fexpr__44343.call(null,G__44344));\n} else {\nreturn and__4120__auto__;\n}\n}))),cljs.core.completing.cljs$core$IFn$_invoke$arity$1((function (closest,isec){\nvar p = new cljs.core.Keyword(null,\"p\",\"p\",151049309).cljs$core$IFn$_invoke$arity$1(isec);\nvar d = thi.ng.geom.core.dist_squared(rp,p);\nif((d < (closest.cljs$core$IFn$_invoke$arity$1 ? closest.cljs$core$IFn$_invoke$arity$1((1)) : closest.call(null,(1))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p,d], null);\n} else {\nreturn closest;\n}\n})),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,thi.ng.math.core.INF_PLUS_], null),edges));\n});\nthi.ng.geom.core.intersect.intersect_ray2_edges_QMARK_ = (function thi$ng$geom$core$intersect$intersect_ray2_edges_QMARK_(rp,rd,edges){\nreturn thi.ng.geom.core.intersect.intersect_line2_edges_QMARK_(rp,thi.ng.geom.core.madd(rd,1.0E29,rp),edges);\n});\nthi.ng.geom.core.intersect.intersect_plane_plane_QMARK_ = (function thi$ng$geom$core$intersect$intersect_plane_plane_QMARK_(an,aw,bn,bw){\nif(cljs.core.truth_((function (){var or__4131__auto__ = thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(aw,bw,thi.ng.math.core._STAR_eps_STAR_);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(an,bn,thi.ng.math.core._STAR_eps_STAR_);\n}\n})())){\nreturn null;\n} else {\nvar od = thi.ng.geom.core.dot(an,bn);\nvar det = ((1) / ((od * od) + (-1)));\nvar u = (((bw * od) + aw) * det);\nvar v = (((aw * od) + bw) * det);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),thi.ng.geom.core.madd(an,u,thi.ng.geom.core._STAR_.cljs$core$IFn$_invoke$arity$2(bn,v)),new cljs.core.Keyword(null,\"dir\",\"dir\",1734754661),thi.ng.geom.core.utils.ortho_normal.cljs$core$IFn$_invoke$arity$2(an,bn)], null);\n}\n});\nthi.ng.geom.core.intersect.intersect_ray_plane_QMARK_ = (function thi$ng$geom$core$intersect$intersect_ray_plane_QMARK_(rp,dir,n,w){\nvar dp = thi.ng.geom.core.dot(n,dir);\nvar dn = (thi.ng.geom.core.dot(n,rp) + w);\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(0.0,dp,thi.ng.math.core._STAR_eps_STAR_))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),(((dn === (0)))?new cljs.core.Keyword(null,\"on-plane\",\"on-plane\",-1177899984):new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128))], null);\n} else {\nvar du = (- (dn / dp));\nvar i = thi.ng.geom.core.madd(dir,du,rp);\nif(cljs.core.truth_(thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3(0.0,1.0,du))){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect-outside\",\"intersect-outside\",-337610558),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n}\n}\n});\n/**\n * Takes a point & normal defining a plane and 2 vectors defining an\n *   AABB (min-p & size). Returns true if plane intersects box.\n */\nthi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_ = (function thi$ng$geom$core$intersect$intersect_plane_aabb_QMARK_(var_args){\nvar G__44346 = arguments.length;\nswitch (G__44346) {\ncase 4:\nreturn thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p,n,q,s){\nvar s2 = thi.ng.geom.core._STAR_.cljs$core$IFn$_invoke$arity$2(s,0.5);\nreturn thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3(thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p,thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2(q,s2)),n,s2);\n});\n\nthi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (p__44347,p__44348,p__44349){\nvar vec__44350 = p__44347;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44350,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44350,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44350,(2),null);\nvar vec__44353 = p__44348;\nvar nx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44353,(0),null);\nvar ny = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44353,(1),null);\nvar nz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44353,(2),null);\nvar n = vec__44353;\nvar vec__44356 = p__44349;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44356,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44356,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44356,(2),null);\nvar vec__44359 = (((nx > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sx) - px),(sx - px)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sx - px),((- sx) - px)], null));\nvar vx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44359,(0),null);\nvar vx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44359,(1),null);\nvar vec__44362 = (((ny > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sy) - py),(sy - py)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sy - py),((- sy) - py)], null));\nvar vy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44362,(0),null);\nvar vy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44362,(1),null);\nvar vec__44365 = (((nz > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sz) - pz),(sz - pz)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sz - pz),((- sz) - pz)], null));\nvar vz1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44365,(0),null);\nvar vz2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44365,(1),null);\nif(((((nx * vx1) + (ny * vy1)) + (nz * vz1)) <= 0.0)){\nreturn ((((nx * vx2) + (ny * vy2)) + (nz * vz2)) >= 0.0);\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.core.intersect.intersect_plane_sphere_QMARK_ = (function thi$ng$geom$core$intersect$intersect_plane_sphere_QMARK_(n,w,p,r){\nreturn ((function (){var G__44371 = (thi.ng.geom.core.dot(n,p) + w);\nreturn (thi.ng.math.core.abs.cljs$core$IFn$_invoke$arity$1 ? thi.ng.math.core.abs.cljs$core$IFn$_invoke$arity$1(G__44371) : thi.ng.math.core.abs.call(null,G__44371));\n})() <= r);\n});\n/**\n * Computes sum((a-b)*c), where a, b, c are 3D vectors.\n */\nthi.ng.geom.core.intersect.subdot = (function thi$ng$geom$core$intersect$subdot(a,b,c){\nvar d = thi.ng.geom.core.subm(a,b,c);\nreturn (((d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((0)) : d.call(null,(0))) + (d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((1)) : d.call(null,(1)))) + (d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((2)) : d.call(null,(2))));\n});\n/**\n * Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n *  Returns 2-elem vec of [bitmask affine-coords].\n */\nthi.ng.geom.core.intersect.face_a = (function thi$ng$geom$core$intersect$face_a(f,deltas){\nvar aff = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(f,deltas);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(((((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((0)) : aff.call(null,(0))) > (0)))?(1):(0)) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((1)) : aff.call(null,(1))) > (0)))?(2):(0))) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((2)) : aff.call(null,(2))) > (0)))?(4):(0))) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((3)) : aff.call(null,(3))) > (0)))?(8):(0))),aff], null);\n});\n/**\n * Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n *  Returns true if all dot products are positive.\n */\nthi.ng.geom.core.intersect.face_b1_QMARK_ = (function thi$ng$geom$core$intersect$face_b1_QMARK_(deltas,n){\nreturn cljs.core.every_QMARK_((function (p1__44375_SHARP_){\nreturn (thi.ng.geom.core.dot(p1__44375_SHARP_,n) > (0));\n}),deltas);\n});\n/**\n * Like face-b1?, but optimized for last face of tetrahedron.\n */\nthi.ng.geom.core.intersect.face_b2_QMARK_ = (function thi$ng$geom$core$intersect$face_b2_QMARK_(verts,refv,n){\nreturn cljs.core.every_QMARK_((function (p1__44376_SHARP_){\nreturn (thi.ng.geom.core.intersect.subdot(p1__44376_SHARP_,refv,n) > (0));\n}),verts);\n});\n/**\n * Takes 2 bitmasks and edge flags, returns true if there's a\n *  separating plane between the faces shared by that edge.\n */\nthi.ng.geom.core.intersect.edge_a = (function thi$ng$geom$core$intersect$edge_a(ma,mb,ea,eb){\nvar xa = (ma & (ma ^ mb));\nvar xb = (mb & (xa ^ mb));\nvar edge = ((function (xa,xb){\nreturn (function (a,b,i,j){\nvar cp = (((ea.cljs$core$IFn$_invoke$arity$1 ? ea.cljs$core$IFn$_invoke$arity$1(i) : ea.call(null,i)) * (eb.cljs$core$IFn$_invoke$arity$1 ? eb.cljs$core$IFn$_invoke$arity$1(j) : eb.call(null,j))) - ((ea.cljs$core$IFn$_invoke$arity$1 ? ea.cljs$core$IFn$_invoke$arity$1(j) : ea.call(null,j)) * (eb.cljs$core$IFn$_invoke$arity$1 ? eb.cljs$core$IFn$_invoke$arity$1(i) : eb.call(null,i))));\nreturn (((((cp > (0))) && (((xa | a) > (0))) && (((xb | b) > (0))))) || ((((cp < (0))) && (((xa | b) > (0))) && (((xb | a) > (0))))));\n});})(xa,xb))\n;\nreturn (!(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((15),(ma | mb))) || (edge((1),(2),(1),(0))) || (edge((1),(4),(2),(0))) || (edge((1),(8),(3),(0))) || (edge((2),(4),(2),(1))) || (edge((2),(8),(3),(1))) || (edge((4),(8),(3),(2))))));\n});\n/**\n * Lazy edge evaluation. Takes a vector of edges, vector of edge\n *  points and an edge id. Looks up edge for given id and if not yet\n *  present constructs it. Returns 2-elem vector of [edges edge].\n */\nthi.ng.geom.core.intersect.get_edge = (function thi$ng$geom$core$intersect$get_edge(edges,epoints,id){\nvar e = (edges.cljs$core$IFn$_invoke$arity$1 ? edges.cljs$core$IFn$_invoke$arity$1(id) : edges.call(null,id));\nif(cljs.core.truth_(e)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [edges,e], null);\n} else {\nvar ep = (epoints.cljs$core$IFn$_invoke$arity$1 ? epoints.cljs$core$IFn$_invoke$arity$1(id) : epoints.call(null,id));\nvar e__$1 = thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2((ep.cljs$core$IFn$_invoke$arity$1 ? ep.cljs$core$IFn$_invoke$arity$1((0)) : ep.call(null,(0))),(ep.cljs$core$IFn$_invoke$arity$1 ? ep.cljs$core$IFn$_invoke$arity$1((1)) : ep.call(null,(1))));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(edges,id,e__$1),e__$1], null);\n}\n});\n/**\n * Takes the 4 delta vectors between the two tetras, edge definitions\n *  of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n *  and a seq of specs, each encoding a specific check (either calls to\n *  face-a* or edge-a). Returns vector of bitmasks or nil if fail early.\n */\nthi.ng.geom.core.intersect.check_faces_a = (function thi$ng$geom$core$intersect$check_faces_a(deltas,epoints,verts,p,specs){\nvar masks = cljs.core.PersistentVector.EMPTY;\nvar affine = cljs.core.PersistentVector.EMPTY;\nvar edges = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null,null,null], null);\nvar s = specs;\nwhile(true){\nif(cljs.core.truth_(s)){\nvar vec__44405 = cljs.core.first(s);\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44405,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44405,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44405,(2),null);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),f)))){\nvar vec__44421 = thi.ng.geom.core.intersect.get_edge(edges,epoints,a);\nvar edges__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44421,(0),null);\nvar ea = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44421,(1),null);\nvar vec__44424 = thi.ng.geom.core.intersect.get_edge(edges__$1,epoints,b);\nvar edges__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44424,(0),null);\nvar eb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44424,(1),null);\nvar n = thi.ng.geom.core.cross(ea,eb);\nvar vec__44427 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f))?thi.ng.geom.core.intersect.face_a(((function (masks,affine,edges,s,vec__44421,edges__$1,ea,vec__44424,edges__$2,eb,n,vec__44405,f,a,b){\nreturn (function (p1__44379_SHARP_){\nreturn thi.ng.geom.core.dot(p1__44379_SHARP_,n);\n});})(masks,affine,edges,s,vec__44421,edges__$1,ea,vec__44424,edges__$2,eb,n,vec__44405,f,a,b))\n,deltas):thi.ng.geom.core.intersect.face_a(((function (masks,affine,edges,s,vec__44421,edges__$1,ea,vec__44424,edges__$2,eb,n,vec__44405,f,a,b){\nreturn (function (p1__44380_SHARP_){\nreturn thi.ng.geom.core.intersect.subdot(p1__44380_SHARP_,p,n);\n});})(masks,affine,edges,s,vec__44421,edges__$1,ea,vec__44424,edges__$2,eb,n,vec__44405,f,a,b))\n,verts));\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44427,(0),null);\nvar a__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44427,(1),null);\nif((m < (15))){\nvar G__44877 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(masks,m);\nvar G__44878 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(affine,a__$1);\nvar G__44879 = edges__$2;\nvar G__44880 = cljs.core.next(s);\nmasks = G__44877;\naffine = G__44878;\nedges = G__44879;\ns = G__44880;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nif((!(thi.ng.geom.core.intersect.edge_a((masks.cljs$core$IFn$_invoke$arity$1 ? masks.cljs$core$IFn$_invoke$arity$1(a) : masks.call(null,a)),(masks.cljs$core$IFn$_invoke$arity$1 ? masks.cljs$core$IFn$_invoke$arity$1(b) : masks.call(null,b)),(affine.cljs$core$IFn$_invoke$arity$1 ? affine.cljs$core$IFn$_invoke$arity$1(a) : affine.call(null,a)),(affine.cljs$core$IFn$_invoke$arity$1 ? affine.cljs$core$IFn$_invoke$arity$1(b) : affine.call(null,b)))))){\nvar G__44881 = masks;\nvar G__44882 = affine;\nvar G__44883 = edges;\nvar G__44884 = cljs.core.next(s);\nmasks = G__44881;\naffine = G__44882;\nedges = G__44883;\ns = G__44884;\ncontinue;\n} else {\nreturn null;\n}\n}\n} else {\nreturn masks;\n}\nbreak;\n}\n});\n/**\n * Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n *  Returns true if tetras do intersect.\n */\nthi.ng.geom.core.intersect.check_faces_b = (function thi$ng$geom$core$intersect$check_faces_b(deltas,epoints,verts,p,specs){\nvar edges = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null,null,null], null);\nvar s = specs;\nwhile(true){\nif(cljs.core.truth_(s)){\nvar vec__44445 = cljs.core.first(s);\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44445,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44445,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44445,(2),null);\nvar vec__44448 = thi.ng.geom.core.intersect.get_edge(edges,epoints,a);\nvar edges__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44448,(0),null);\nvar ea = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44448,(1),null);\nvar vec__44451 = thi.ng.geom.core.intersect.get_edge(edges__$1,epoints,b);\nvar edges__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44451,(0),null);\nvar eb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44451,(1),null);\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f))?thi.ng.geom.core.intersect.face_b1_QMARK_(deltas,thi.ng.geom.core.cross(ea,eb)):thi.ng.geom.core.intersect.face_b2_QMARK_(verts,p,thi.ng.geom.core.cross(ea,eb)))))){\nvar G__44909 = edges__$2;\nvar G__44910 = cljs.core.next(s);\nedges = G__44909;\ns = G__44910;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n});\n/**\n * Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n *  true if they intersect. Orientation of points is irrelevant (unlike\n *  in the original algorithm this implementation is based on).\n */\nthi.ng.geom.core.intersect.intersect_tetrahedra_QMARK_ = (function thi$ng$geom$core$intersect$intersect_tetrahedra_QMARK_(p__44460,p__44461){\nvar vec__44463 = p__44460;\nvar pa = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44463,(0),null);\nvar pb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44463,(1),null);\nvar pc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44463,(2),null);\nvar pd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44463,(3),null);\nvar p = vec__44463;\nvar vec__44466 = p__44461;\nvar qa = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44466,(0),null);\nvar qb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44466,(1),null);\nvar qc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44466,(2),null);\nvar qd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44466,(3),null);\nvar q = vec__44466;\nvar masks = thi.ng.geom.core.intersect.check_faces_a(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (vec__44463,pa,pb,pc,pd,p,vec__44466,qa,qb,qc,qd,q){\nreturn (function (p1__44458_SHARP_){\nreturn thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p1__44458_SHARP_,pa);\n});})(vec__44463,pa,pb,pc,pd,p,vec__44466,qa,qb,qc,qd,q))\n,q),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pb,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pc,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pd,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pc,pb], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pd,pb], null)], null),q,pb,new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(2),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),(4),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(1),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(2),(3)], null)], null));\nif(cljs.core.truth_(masks)){\nvar or__4131__auto__ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((15),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.bit_or,masks));\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.geom.core.intersect.check_faces_b(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (or__4131__auto__,masks,vec__44463,pa,pb,pc,pd,p,vec__44466,qa,qb,qc,qd,q){\nreturn (function (p1__44459_SHARP_){\nreturn thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2(p1__44459_SHARP_,qa);\n});})(or__4131__auto__,masks,vec__44463,pa,pb,pc,pd,p,vec__44466,qa,qb,qc,qd,q))\n,p),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qb,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qc,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qd,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qc,qb], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qd,qb], null)], null),p,qb,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(2),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),(4),(3)], null)], null));\n}\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","thi/ng/geom/core/intersect.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$thi.ng.geom.core.intersect","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$thi.ng.geom.core.utils","^O","~$thi.ng.geom.core","^P","~$gu","^O","~$cljs.core","^R","~$v","~$thi.ng.geom.core.vector","~$goog","^T","^S","^S","~$thi.ng.math.core","^U","~$m","^U","~$g","^P"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$vec2","^S","~$vec3","^S","~$V2","^S","~$V3","^S","~$*eps*","^U"],"^X",["^ ","~$thi.ng.math.macros","^13","~$mm","^13","^R","^R"],"~:form",["~#list",["~$ns","^J",["^16",["^X",["^13","~:as","^14"]]],["^16",["^W",["^P","^18","~$g"],["^O","^18","^Q"],["^S","^18","~$v","~:refer",["^Z","^[","^10","^11"]],["^U","^18","~$m","^19",["^12"]]]]]],"~:flags",["^ ","^X",["^H",[]],"^W",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^R","^P","^O","^S","^U"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","thi/ng/geom/core/intersect.cljc"],"~:compiled-at",1569963242370,"~:resource-name","thi/ng/geom/core/intersect.cljc","~:warnings",[],"~:source","(ns thi.ng.geom.core.intersect\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.utils :as gu]\n   [thi.ng.geom.core.vector :as v :refer [vec2 vec3 V2 V3]]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(declare intersect-plane-aabb?)\n\n(defn- sq [x] (* x x))\n\n(defn intersect-circle-circle?\n  ([{p :p r1 :r} {q :p r2 :r}]\n     (intersect-circle-circle? p r1 q r2))\n  ([p r1 q r2]\n     (let [delta (g/- q p)\n           d (g/mag delta)]\n       (when (and (<= d (+ r1 r2)) (>= d (m/abs (- r1 r2))))\n         (let [a (/ (+ (- (* r1 r1) (* r2 r2)) (* d d)) (* 2.0 d))\n               invd (/ 1.0 d)\n               p (g/madd delta (* a invd) p)\n               h (Math/sqrt (- (* r1 r1) (* a a)))\n               perp (g/* (g/normal delta) (* h invd))]\n           [(g/+ p perp) (g/- p perp)])))))\n(defn intersect-rect-rect?\n  ([{[px py] :p [w h] :size} {[qx qy] :p [qw qh] :size}]\n     (not (or (> px (+ qx qw)) (> qx (+ px w)) (> py (+ qy qh)) (> qy (+ py h)))))\n  ([[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]\n     (not (or (> px1 qx2) (> px2 qx1) (> py1 qy2) (> py2 qy1)))))\n(defn intersect-rect-circle?\n  ([{p :p sz :size} {s :p r :r}]\n     (intersect-rect-circle? p (g/+ p sz) s r))\n  ([[px py] [qx qy] [cx cy] r]\n     (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n           ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))]\n       (<= ds (* r r)))))\n(defn intersect-aabb-aabb?\n  ([{pa :p sa :size} {pb :p sb :size}]\n     (intersect-aabb-aabb? pa pb (g/+ pa sa) (g/+ pb sb)))\n  ([pa pb qa qb]\n     (if (and (<= (pa 0) (qb 0)) (<= (pb 0) (qa 0)))\n       (if (and (<= (pa 1) (qb 1)) (<= (pb 1) (qa 1)))\n         (and (<= (pa 2) (qb 2)) (<= (pb 2) (qa 2)))))))\n(defn intersect-aabb-sphere?\n  ([{p :p sz :size} {s :p r :r}]\n     (intersect-aabb-sphere? p (g/+ p sz) s r))\n  ([[px py pz] [qx qy qz] [cx cy cz] r]\n     (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n           ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))\n           ds (+ ds (if (< cz pz) (sq (- cz pz)) (if (> cz qz) (sq (- cz qz)) 0.0)))]\n       (<= ds (* r r)))))\n(defn intersect-aabb-frustum?\n  \"Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside\"\n  [[px py pz :as p] size planes]\n  (let [[qx qy qz] (g/+ p size)]\n    (reduce\n     (fn [res [[nx ny nz] w]]\n       (let [vx (if (pos? nx) px qx)\n             vy (if (pos? ny) py qy)\n             vz (if (pos? nz) pz qz)]\n         (if (pos? (mm/madd nx vx ny vy nz vz w))\n           (reduced :outside)\n           (let [vx (if (pos? nx) qx px)\n                 vy (if (pos? ny) qy py) \n                 vz (if (pos? nz) qz pz)]\n             (if (pos? (mm/madd nx vx ny vy nz vz w))\n               :intersect\n               res)))))\n     :inside planes)))\n(defn intersect-sphere-sphere?\n  ([{p1 :p r1 :r} {p2 :p r2 :r}]\n     (intersect-sphere-sphere? p1 r1 p2 r2))\n  ([p1 r1 p2 r2]\n     (<= (g/dist-squared p1 p2) (mm/addm r1 r2 r1 r2))))\n(defn intersect-ray-sphere?\n  ([{rp :p dir :dir} {p :p r :r}]\n     (intersect-ray-sphere? rp dir p r))\n  ([rp dir p r]\n   (let [q (g/- p rp)\n         ds (g/mag-squared q)\n         v (- (g/dot q dir))\n         d (mm/msub r r (- ds (* v v)))]\n     (if (>= d 0.0)\n       (let [d (Math/sqrt d)\n             a (+ v d)\n             b (- v d)]\n         (if-not (and (< a 0) (< b 0))\n           (if (and (> a 0) (> b 0))\n             (if (> a b) [b a] [a b])\n             (if (> b 0) [b a] [a b]))\n           [a b]))))))  \n(defn intersect-ray-triangle3?\n  [p d a b c]\n  (let [u (g/- b a)\n        v (g/- c a)\n        n (g/cross u v)]\n    (if (m/delta= V3 n)\n      {:type :degenerate}\n      (let [w0 (g/- p a)\n            a' (- (g/dot n w0))\n            b' (g/dot n d)]\n        (if (m/delta= 0.0 b')\n          (if (m/delta= 0.0 a')\n            {:type :same-plane}\n            {:type :no-intersect})\n          (let [r (/ a' b')]\n            (if (< r 0.0)\n              {:type :no-intersect}\n              (let [i (g/madd d r p)\n                    [u v w] (gu/triangle-barycentric-coords a b c i u v)]\n                (if (and (>= u 0.0) (>= w 0.0) (m/in-range? 0.0 1.0 v))\n                  {:type :intersect :p i}\n                  {:type :no-intersect :p i})))))))))\n(defn- triaabb-axis-test\n  [pa1 pb1 pa2 pb2 a b fa fb sa sb]\n  (let [q (mm/madd a pa1 b pb1)\n        r (mm/madd a pa2 b pb2)\n        [min max] (if (< q r) [q r] [r q])\n        rad (mm/madd fa sa fb sb)]\n    (if (<= min rad) (>= max (- rad)))))\n\n(defn- triaabb-edge-test-e0\n  [[ax ay az :as a] [bx by bz :as b] [cx cy cz] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e1\n  [[ax ay az] [bx by bz :as b] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez ey fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test ax ay bx by ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e2\n  [[ax ay az :as a] [bx by bz] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az by bz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az bx bz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-minmax\n  [a b c s]\n  (if (< (min (min a b) c) s)\n    (>= (max (max a b) c) (- s))))\n\n(defn intersect-triangle3-aabb?\n  [a b c p s]\n  (let [[sx sy sz :as s] (g/* s 0.5)\n        p (g/+ p s)\n        [ax ay az :as a] (g/- a p)\n        [bx by bz :as b] (g/- b p)\n        [cx cy cz :as c] (g/- c p)\n        e0 (g/- b a)\n        e1 (g/- c b)]\n    (if (triaabb-edge-test-e0 a b c e0 s)\n      (if (triaabb-edge-test-e1 a b c e1 s)\n        (if (triaabb-edge-test-e2 a b c (g/- a c) s)\n          (if (triaabb-edge-minmax ax bx cx sx)\n            (if (triaabb-edge-minmax ay by cy sy)\n              (if (triaabb-edge-minmax az bz cz sz)\n                (intersect-plane-aabb? a (g/cross e0 e1) s)))))))))\n(defn intersect-line2-line2?\n  [[px1 py1 :as p] [qx1 qy1 :as q]\n   [px2 py2 :as lp] [qx2 qy2 :as lq]]\n  (let [dx1 (- qx1 px1), dy1 (- qy1 py1)\n        dx2 (- qx2 px2), dy2 (- qy2 py2)\n        dx12 (- px1 px2), dy12 (- py1 py2)\n        denom (mm/msub dy2 dx1 dx2 dy1)\n        na (mm/msub dx2 dy12 dy2 dx12)\n        nb (mm/msub dx1 dy12 dy1 dx12)]\n    (if (zero? denom)\n      (if (and (zero? na) (zero? nb))\n        (let [ip (gu/closest-point-on-segment lp p q)\n              iq (gu/closest-point-on-segment lq p q)]\n          (if (or (m/delta= ip lp) (m/delta= iq lq))\n            {:type :coincident :p ip :q iq}\n            {:type :coincident-no-intersect :p ip :q iq}))\n        {:type :parallel})\n      (let [ua (/ na denom)\n            ub (/ nb denom)\n            i (g/mix p q ua)]\n        (if (and (>= ua 0.0) (<= ua 1.0) (>= ub 0.0) (<= ub 1.0))\n          {:type :intersect :p i :ua ua :ub ub}\n          {:type :intersect-outside :p i :ua ua :ub ub})))))\n(defn intersect-line2-edges?\n  [rp rq edges]\n  (->> edges\n       (transduce\n        (comp\n         (map (fn [[p q]] (intersect-line2-line2? rp rq p q)))\n         (filter #(and (:p %) (#{:intersect :coincident} (:type %)))))\n        (completing\n         (fn [closest isec]\n           (let [p (:p isec)\n                 d (g/dist-squared rp p)]\n             (if (< d (closest 1)) [p d] closest))))\n        [nil m/INF+])\n       (first)))\n\n(defn intersect-ray2-edges?\n  [rp rd edges]\n  (intersect-line2-edges? rp (g/madd rd 1e29 rp) edges))\n(defn intersect-plane-plane?\n  [an aw bn bw]\n  (when-not (or (m/delta= aw bw *eps*) (m/delta= an bn *eps*))\n    (let [od (g/dot an bn)\n          det (/ (mm/madd od od -1))\n          u (* (mm/madd bw od aw) det)\n          v (* (mm/madd aw od bw) det)]\n      {:p (g/madd an u (g/* bn v)) :dir (gu/ortho-normal an bn)})))\n(defn intersect-ray-plane?\n  [rp dir n w]\n  (let [dp (g/dot n dir)\n        dn (+ (g/dot n rp) w)]\n    (if (m/delta= 0.0 dp *eps*)\n      {:type (if (zero? dn) :on-plane :parallel)}\n      (let [du (- (/ dn dp))\n            i (g/madd dir du rp)]\n        (if (m/in-range? 0.0 1.0 du)\n          {:type :intersect :p i}\n          {:type :intersect-outside :p i})))))\n(defn intersect-plane-aabb?\n  \"Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.\"\n  ([p n q s]\n   (let [s2 (g/* s 0.5)]\n     (intersect-plane-aabb? (g/- p (g/+ q s2)) n s2)))\n  ([[px py pz] [nx ny nz :as n] [sx sy sz]]\n   (let [[vx1 vx2] (if (pos? nx) [(- (- sx) px) (- sx px)] [(- sx px) (- (- sx) px)])\n         [vy1 vy2] (if (pos? ny) [(- (- sy) py) (- sy py)] [(- sy py) (- (- sy) py)])\n         [vz1 vz2] (if (pos? nz) [(- (- sz) pz) (- sz pz)] [(- sz pz) (- (- sz) pz)])]\n     (if (<= (mm/madd nx vx1 ny vy1 nz vz1) 0.0)\n       (>= (mm/madd nx vx2 ny vy2 nz vz2) 0.0)))))\n(defn intersect-plane-sphere?\n  [n w p r] (<= (m/abs (+ (g/dot n p) w)) r))\n(defn- subdot\n  \"Computes sum((a-b)*c), where a, b, c are 3D vectors.\"\n  [a b c] (let [d (g/subm a b c)] (mm/add (d 0) (d 1) (d 2))))\n\n(defn- face-a\n  \"Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords].\"\n  [f deltas]\n  (let [aff (mapv f deltas)]\n    [(mm/bitmask pos? (aff 0) (aff 1) (aff 2) (aff 3)) aff]))\n\n(defn- face-b1?\n  \"Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive.\"\n  [deltas n] (every? #(pos? (g/dot % n)) deltas))\n\n(defn- face-b2?\n  \"Like face-b1?, but optimized for last face of tetrahedron.\"\n  [verts refv n] (every? #(pos? (subdot % refv n)) verts))\n\n(defn- edge-a\n  \"Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge.\"\n  [ma mb ea eb]\n  (let [xa (bit-and ma (bit-xor ma mb))\n        xb (bit-and mb (bit-xor xa mb))\n        edge (fn [a b i j]\n               (let [cp (mm/msub (ea i) (eb j) (ea j) (eb i))]\n                 (or (and (pos? cp) (pos? (bit-or xa a)) (pos? (bit-or xb b)))\n                     (and (neg? cp) (pos? (bit-or xa b)) (pos? (bit-or xb a))))))]\n    (not\n     (or\n      (not= 15 (bit-or ma mb))\n      (edge 1 2 1 0)\n      (edge 1 4 2 0)\n      (edge 1 8 3 0)\n      (edge 2 4 2 1)\n      (edge 2 8 3 1)\n      (edge 4 8 3 2)))))\n\n(defn- get-edge\n  \"Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge].\"\n  [edges epoints id]\n  (let [e (edges id)]\n    (if e\n      [edges e]\n      (let [ep (epoints id), e (g/- (ep 0) (ep 1))]\n        [(assoc edges id e) e]))))\n\n(defn- check-faces-a\n  \"Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early.\"\n  [deltas epoints verts p specs]\n  (loop [masks [], affine [], edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)]\n        (if (or (= :f f) (= :f* f))\n          (let [[edges ea] (get-edge edges epoints a)\n                [edges eb] (get-edge edges epoints b)\n                n (g/cross ea eb)\n                [m a] (if (= :f f)\n                        (face-a #(g/dot % n) deltas)\n                        (face-a #(subdot % p n) verts))]\n            (if (< m 15)\n              (recur (conj masks m) (conj affine a) edges (next s))))\n          (if-not (edge-a (masks a) (masks b) (affine a) (affine b))\n            (recur masks affine edges (next s)))))\n      masks)))\n\n(defn- check-faces-b\n  \"Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect.\"\n  [deltas epoints verts p specs]\n  (loop [edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)\n            [edges ea] (get-edge edges epoints a)\n            [edges eb] (get-edge edges epoints b)]\n        (if-not (if (= :f f)\n                  (face-b1? deltas (g/cross ea eb))\n                  (face-b2? verts p (g/cross ea eb)))\n          (recur edges (next s))))\n      true)))\n(defn intersect-tetrahedra?\n  \"Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on).\"\n  [[pa pb pc pd :as p] [qa qb qc qd :as q]]\n  (let [masks (check-faces-a\n               (map #(g/- % pa) q)\n               [[pb pa] [pc pa] [pd pa] [pc pb] [pd pb]]\n               q pb [[:f 0 1] [:f 2 0] [:e 0 1] [:f 1 2]\n                     [:e 0 2] [:e 1 2] [:f* 4 3] [:e 0 3]\n                     [:e 1 3] [:e 2 3]])]\n    (if masks\n      (or (not= 15 (reduce bit-or masks))\n          (check-faces-b\n           (map #(g/- % qa) p)\n           [[qb qa] [qc qa] [qd qa] [qc qb] [qd qb]]\n           p qb [[:f 0 1] [:f 2 0] [:f 1 2] [:f* 4 3]])))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["thi.ng.geom.core.intersect/sq","x","var_args","G__43953","thi.ng.geom.core.intersect/intersect-circle-circle?","js/Error","p__43957","p__43958","map__43960","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__43962","p","r1","q","r2","thi.ng.geom.core.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4","delta","thi.ng.geom.core._.cljs$core$IFn$_invoke$arity$2","d","thi.ng.geom.core/mag","G__43975","thi.ng.math.core/abs","a","invd","thi.ng.geom.core/madd","h","G__43980","Math/sqrt","perp","thi.ng.geom.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.normal.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core._PLUS_.cljs$core$IFn$_invoke$arity$2","G__43993","thi.ng.geom.core.intersect/intersect-rect-rect?","p__43994","p__43995","map__43996","vec__43997","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__44000","map__44003","vec__44004","vec__44008","p__44027","p__44028","p__44029","p__44030","vec__44031","vec__44034","vec__44037","vec__44040","px","py","w","qx","qy","qw","qh","px1","py1","qx1","qy1","px2","py2","qx2","qy2","G__44049","thi.ng.geom.core.intersect/intersect-rect-circle?","p__44052","p__44053","map__44054","map__44055","p__44058","p__44059","p__44060","vec__44061","vec__44064","vec__44067","sz","s","r","thi.ng.geom.core.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4","cx","cy","ds","G__44073","thi.ng.geom.core.intersect/intersect-aabb-aabb?","p__44077","p__44080","map__44085","map__44086","pa","sa","pb","sb","thi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4","qa","qb","G__44090","thi.ng.geom.core.intersect/intersect-aabb-sphere?","p__44091","p__44092","map__44093","map__44094","p__44097","p__44098","p__44099","vec__44100","vec__44103","vec__44106","thi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","pz","qz","cz","p__44110","vec__44111","thi.ng.geom.core.intersect/intersect-aabb-frustum?","size","planes","vec__44114","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__44117","vec__44118","vec__44121","res","nx","ny","nz","vx","vy","vz","cljs.core/reduced","G__44128","thi.ng.geom.core.intersect/intersect-sphere-sphere?","p__44129","p__44130","map__44131","map__44132","p1","p2","thi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","thi.ng.geom.core/dist-squared","G__44149","thi.ng.geom.core.intersect/intersect-ray-sphere?","p__44150","p__44151","map__44153","map__44154","rp","dir","thi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","thi.ng.geom.core/mag-squared","v","thi.ng.geom.core/dot","b","thi.ng.geom.core.intersect/intersect-ray-triangle3?","c","u","n","thi.ng.geom.core/cross","thi.ng.geom.core.vector/V3","w0","a'","b'","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","vec__44175","i","thi.ng.geom.core.utils.triangle_barycentric_coords.cljs$core$IFn$_invoke$arity$6","and__4120__auto__","thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.intersect/triaabb-axis-test","pa1","pb1","pa2","pb2","fa","fb","vec__44178","min","max","rad","p__44185","p__44186","p__44187","p__44188","p__44189","vec__44190","vec__44193","vec__44196","vec__44199","vec__44202","thi.ng.geom.core.intersect/triaabb-edge-test-e0","ax","ay","az","bx","by","bz","ex","ey","ez","e","sx","sy","vec__44205","fx","fy","fz","thi.ng.geom.core/abs","p__44211","p__44212","p__44213","p__44214","p__44215","vec__44216","vec__44219","vec__44222","vec__44225","vec__44228","thi.ng.geom.core.intersect/triaabb-edge-test-e1","vec__44245","p__44252","p__44253","p__44254","p__44255","p__44256","vec__44257","vec__44260","vec__44263","vec__44266","vec__44269","thi.ng.geom.core.intersect/triaabb-edge-test-e2","vec__44272","thi.ng.geom.core.intersect/triaabb-edge-minmax","x__4222__auto__","y__4223__auto__","x__4219__auto__","y__4220__auto__","thi.ng.geom.core.intersect/intersect-triangle3-aabb?","vec__44305","vec__44308","vec__44311","vec__44314","e0","e1","G__44317","G__44318","G__44319","thi.ng.geom.core.intersect/intersect-plane-aabb?","p__44322","p__44323","p__44324","p__44325","vec__44326","vec__44329","vec__44332","vec__44335","thi.ng.geom.core.intersect/intersect-line2-line2?","lp","lq","dx1","dy1","dx2","dy2","dx12","dy12","denom","na","nb","ip","thi.ng.geom.core.utils/closest-point-on-segment","iq","or__4131__auto__","ua","ub","thi.ng.geom.core.mix.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.intersect/intersect-line2-edges?","rq","edges","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__44339","vec__44340","p1__44338#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","G__44344","fexpr__44343","cljs.core.completing.cljs$core$IFn$_invoke$arity$1","closest","isec","thi.ng.math.core/INF+","cljs.core/first","thi.ng.geom.core.intersect/intersect-ray2-edges?","rd","thi.ng.geom.core.intersect/intersect-plane-plane?","an","aw","bn","bw","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*eps*","od","det","thi.ng.geom.core.utils.ortho_normal.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.intersect/intersect-ray-plane?","dp","dn","du","G__44346","p__44347","p__44348","p__44349","vec__44350","vec__44353","vec__44356","s2","thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3","vec__44359","vec__44362","vec__44365","vx1","vx2","vy1","vy2","vz1","vz2","thi.ng.geom.core.intersect/intersect-plane-sphere?","G__44371","thi.ng.geom.core.intersect/subdot","thi.ng.geom.core/subm","thi.ng.geom.core.intersect/face-a","f","deltas","aff","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.intersect/face-b1?","p1__44375#","cljs.core/every?","thi.ng.geom.core.intersect/face-b2?","verts","refv","p1__44376#","thi.ng.geom.core.intersect/edge-a","ma","mb","ea","eb","xa","xb","edge","j","cp","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.intersect/get-edge","epoints","id","ep","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.intersect/check-faces-a","specs","masks","affine","vec__44405","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","vec__44421","vec__44424","vec__44427","m","p1__44379#","p1__44380#","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/next","thi.ng.geom.core.intersect/check-faces-b","vec__44445","vec__44448","vec__44451","p__44460","p__44461","vec__44463","vec__44466","thi.ng.geom.core.intersect/intersect-tetrahedra?","pc","pd","qc","qd","p1__44458#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/bit-or","p1__44459#"]]],"~:cache-keys",["~#cmap",[["^1>","thi/ng/xerror/core.cljc"],[1569959626590,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","^R"]]],["^1>","goog/math/math.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.array","~$goog.asserts"]]],["^1>","goog/array/array.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1P"]]],["^1>","clojure/core/reducers.cljs"],[1556316222100,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","goog/debug/error.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/dom/nodetype.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","thi/ng/math/core.cljc"],[1569962683442,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","goog/object/object.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],"~:SHADOW-TIMESTAMP",[1569627608000,1556316222000],["^1>","goog/math/long.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1P","~$goog.reflect"]]],["^1>","goog/string/internal.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/functions/functions.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","thi/ng/geom/core/utils.cljc"],[1569962683394,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^S","~$thi.ng.dstruct.core","^U","~$clojure.core.reducers"]]],["^1>","thi/ng/geom/core/intersect.cljc"],[1569962683394,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^O","^S","^U"]]],["^1>","thi/ng/geom/core/vector.cljc"],[1569962683394,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^U","~$thi.ng.xerror.core"]]],["^1>","goog/structs/map.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/asserts/asserts.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","thi/ng/dstruct/core.cljc"],[1569962683512,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","thi/ng/geom/core.cljc"],[1569962683394,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","goog/base.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",[]]],["^1>","goog/structs/structs.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","~$goog.object"]]],["^1>","goog/string/string.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.string.internal"]]],["^1>","goog/reflect/reflect.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/string/stringbuffer.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/iter/iter.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","~$goog.functions","~$goog.math"]]],["^1>","cljs/core.cljs"],[1556316222100,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["~$goog.math.Long","~$goog.math.Integer","^1Z","^24","^1O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1>","goog/math/integer.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/uri/utils.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","^1Z"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/dstruct/0.1.2/dstruct-0.1.2.jar!/thi/ng/dstruct/core.cljc",1569962683000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/geom-core/0.0.908/geom-core-0.0.908.jar!/thi/ng/geom/core/macros/vector.clj",1569962683000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/math/0.1.4/math-0.1.4.jar!/thi/ng/math/macros.clj",1569962683000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/xerror/0.1.0/xerror-0.1.0.jar!/thi/ng/xerror/core.cljc",1569959626000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^O","^R","^R","~$v","^S","^T","^T","^S","^S","^U","^U","~$m","^U","~$g","^P"],"^V",["^H",["^W","^X"]],"~:shadow/js-access-global",["^H",["Error"]],"^Y",["^ ","^Z","^S","^[","^S","^10","^S","^11","^S","^12","^U"],"~:defs",["^ ","~$triaabb-edge-test-e2",["^ ","~:protocol-inline",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",142,"^8",8,"^9",142,"^:",28,"~:private",true,"~:arglists",["^16",["~$quote",["^16",[[["~$ax","~$ay","~$az","^18","~$a"],["~$bx","~$by","~$bz"],["~$cx","~$cy","~$cz","^18","~$c"],["~$ex","~$ey","~$ez","^18","~$e"],["~$sx","~$sy","~$sz"]]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/triaabb-edge-test-e2","^6","thi/ng/geom/core/intersect.cljc","^:",28,"~:method-params",["^16",[["~$p__44252","~$p__44253","~$p__44254","~$p__44255","~$p__44256"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",142,"~:ret-tag",["^H",["~$boolean","~$clj-nil"]],"^9",142,"~:max-fixed-arity",5,"~:fn-var",true,"^33",["^16",["^34",["^16",[[["^35","^36","^37","^18","~$a"],["^38","^39","^3:"],["^3;","^3<","^3=","^18","~$c"],["^3>","^3?","^3@","^18","~$e"],["^3A","^3B","^3C"]]]]]]],"~$face-b2?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",260,"^8",8,"^9",260,"^:",16,"^32",true,"^33",["^16",["^34",["^16",[["~$verts","~$refv","~$n"]]]]],"~:doc","Like face-b1?, but optimized for last face of tetrahedron."],"^32",true,"^I","~$thi.ng.geom.core.intersect/face-b2?","^6","thi/ng/geom/core/intersect.cljc","^:",16,"^3E",["^16",[["^3T","^3U","~$n"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",260,"^3N","^3O","^9",260,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[["^3T","^3U","~$n"]]]]],"^3V","Like face-b1?, but optimized for last face of tetrahedron."],"~$intersect-plane-aabb?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",230,"^8",7,"^9",230,"^:",28,"^33",["^16",["^34",["^16",[["~$p","~$n","~$q","~$s"],[["~$px","~$py","~$pz"],["~$nx","~$ny","~$nz","^18","~$n"],["^3A","^3B","^3C"]]]]]],"^3V","Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.","~:top-fn",["^ ","^3M",false,"~:fixed-arity",4,"^3Q",4,"^3E",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^33",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-plane-aabb?","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^33",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^3L",["^16",[null,null]]],"^3E",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"~:methods",[["^ ","^44",4,"^3M",false,"~:tag","~$any"],["^ ","^44",3,"^3M",false,"^47",["^H",["^3O","^3P"]]]],"^7",230,"^9",230,"^3Q",4,"^3R",true,"^33",["^16",[["~$p","~$n","~$q","~$s"],[["^3Y","^3Z","^3["],["^40","^41","^42","^18","~$n"],["^3A","^3B","^3C"]]]],"^3V","Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box."],"~$intersect-aabb-aabb?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",41,"^8",7,"^9",41,"^:",27,"^33",["^16",["^34",["^16",[[["^ ","~$pa","~:p","~$sa","~:size"],["^ ","~$pb","~:p","~$sb","^4<"]],["^4:","^4=","~$qa","~$qb"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]],"^33",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-aabb-aabb?","^6","thi/ng/geom/core/intersect.cljc","^:",27,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]],"^33",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47",["^H",["^3O","^3P"]]]],"^7",41,"^9",41,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","^4:","~:p","^4;","^4<"],["^ ","^4=","~:p","^4>","^4<"]],["^4:","^4=","^4?","^4@"]]]],"~$check-faces-b",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",317,"^8",8,"^9",317,"^:",21,"^32",true,"^33",["^16",["^34",["^16",[["~$deltas","~$epoints","^3T","~$p","~$specs"]]]]],"^3V","Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."],"^32",true,"^I","~$thi.ng.geom.core.intersect/check-faces-b","^6","thi/ng/geom/core/intersect.cljc","^:",21,"^3E",["^16",[["^4C","^4D","^3T","~$p","^4E"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",317,"^3N",["^H",["^3O","^3P"]],"^9",317,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[["^4C","^4D","^3T","~$p","^4E"]]]]],"^3V","Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."],"~$intersect-plane-plane?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",211,"^8",7,"^9",211,"^:",29,"^33",["^16",["^34",["^16",[["~$an","~$aw","~$bn","~$bw"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-plane-plane?","^6","thi/ng/geom/core/intersect.cljc","^:",29,"^3E",["^16",[["^4H","^4I","^4J","^4K"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",211,"^3N",["^H",["~$cljs.core/IMap","^3P"]],"^9",211,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[["^4H","^4I","^4J","^4K"]]]]]],"~$sq",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",14,"^8",8,"^9",14,"^:",10,"^32",true,"^33",["^16",["^34",["^16",[["~$x"]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/sq","^6","thi/ng/geom/core/intersect.cljc","^:",10,"^3E",["^16",[["~$x"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",14,"^3N","~$number","^9",14,"^3Q",1,"^3R",true,"^33",["^16",["^34",["^16",[["~$x"]]]]]],"~$intersect-aabb-sphere?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",48,"^8",7,"^9",48,"^:",29,"^33",["^16",["^34",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["~$qx","~$qy","~$qz"],["^3;","^3<","^3="],"~$r"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]],"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-aabb-sphere?","^6","thi/ng/geom/core/intersect.cljc","^:",29,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]],"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47","^3O"]],"^7",48,"^9",48,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z","^3["],["^4R","^4S","^4T"],["^3;","^3<","^3="],"~$r"]]]],"~$intersect-circle-circle?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",16,"^8",7,"^9",16,"^:",31,"^33",["^16",["^34",["^16",[[["^ ","~$p","~:p","~$r1","~:r"],["^ ","~$q","~:p","~$r2","~:r"]],["~$p","^4W","~$q","^4X"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]],"^33",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-circle-circle?","^6","thi/ng/geom/core/intersect.cljc","^:",31,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]],"^33",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47",["^H",["~$cljs.core/IVector","^3P"]]]],"^7",16,"^9",16,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","~$p","~:p","^4W","~:r"],["^ ","~$q","~:p","^4X","~:r"]],["~$p","^4W","~$q","^4X"]]]],"~$intersect-rect-rect?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",29,"^8",7,"^9",29,"^:",27,"^33",["^16",["^34",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["~$qw","~$qh"],"^4<"]]],[["~$px1","~$py1"],["~$qx1","~$qy1"],["~$px2","~$py2"],["~$qx2","~$qy2"]]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]],"^33",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-rect-rect?","^6","thi/ng/geom/core/intersect.cljc","^:",27,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]],"^33",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^3O"],["^ ","^44",4,"^3M",false,"^47","^3O"]],"^7",29,"^9",29,"^3Q",4,"^3R",true,"^33",["^16",[[["^1J",[["^3Y","^3Z"],"~:p",["~$w","~$h"],"^4<"]],["^1J",[["^4R","^4S"],"~:p",["^50","^51"],"^4<"]]],[["^52","^53"],["^54","^55"],["^56","^57"],["^58","^59"]]]]],"~$get-edge",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",284,"^8",8,"^9",284,"^:",16,"^32",true,"^33",["^16",["^34",["^16",[["~$edges","^4D","~$id"]]]]],"^3V","Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."],"^32",true,"^I","~$thi.ng.geom.core.intersect/get-edge","^6","thi/ng/geom/core/intersect.cljc","^:",16,"^3E",["^16",[["^5<","^4D","^5="]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",284,"^3N","^4Z","^9",284,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[["^5<","^4D","^5="]]]]],"^3V","Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."],"~$check-faces-a",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",295,"^8",8,"^9",295,"^:",21,"^32",true,"^33",["^16",["^34",["^16",[["^4C","^4D","^3T","~$p","^4E"]]]]],"^3V","Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."],"^32",true,"^I","~$thi.ng.geom.core.intersect/check-faces-a","^6","thi/ng/geom/core/intersect.cljc","^:",21,"^3E",["^16",[["^4C","^4D","^3T","~$p","^4E"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",295,"^3N",["^H",["~$clj","^4Z","^3P"]],"^9",295,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[["^4C","^4D","^3T","~$p","^4E"]]]]],"^3V","Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."],"~$edge-a",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",264,"^8",8,"^9",264,"^:",14,"^32",true,"^33",["^16",["^34",["^16",[["~$ma","~$mb","~$ea","~$eb"]]]]],"^3V","Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."],"^32",true,"^I","~$thi.ng.geom.core.intersect/edge-a","^6","thi/ng/geom/core/intersect.cljc","^:",14,"^3E",["^16",[["^5C","^5D","^5E","^5F"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",264,"^3N","^3O","^9",264,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[["^5C","^5D","^5E","^5F"]]]]],"^3V","Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."],"~$intersect-ray-sphere?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",81,"^8",7,"^9",81,"^:",28,"^33",["^16",["^34",["^16",[[["^ ","~$rp","~:p","~$dir","~:dir"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]],"^33",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-ray-sphere?","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]],"^33",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47",["^H",["^4Z","^3P"]]]],"^7",81,"^9",81,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","^5I","~:p","^5J","^5K"],["^ ","~$p","~:p","~$r","~:r"]],["^5I","^5J","~$p","~$r"]]]],"~$intersect-ray-triangle3?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",98,"^8",7,"^9",98,"^:",31,"^33",["^16",["^34",["^16",[["~$p","~$d","~$a","~$b","~$c"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-ray-triangle3?","^6","thi/ng/geom/core/intersect.cljc","^:",31,"^3E",["^16",[["~$p","~$d","~$a","~$b","~$c"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",98,"^3N","^4M","^9",98,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[["~$p","~$d","~$a","~$b","~$c"]]]]]],"~$triaabb-edge-minmax",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",149,"^8",8,"^9",149,"^:",27,"^32",true,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c","~$s"]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/triaabb-edge-minmax","^6","thi/ng/geom/core/intersect.cljc","^:",27,"^3E",["^16",[["~$a","~$b","~$c","~$s"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",149,"^3N",["^H",["^3O","^3P"]],"^9",149,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c","~$s"]]]]]],"~$intersect-triangle3-aabb?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",154,"^8",7,"^9",154,"^:",32,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c","~$p","~$s"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-triangle3-aabb?","^6","thi/ng/geom/core/intersect.cljc","^:",32,"^3E",["^16",[["~$a","~$b","~$c","~$p","~$s"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",154,"^3N",["^H",["^48","^3P"]],"^9",154,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c","~$p","~$s"]]]]]],"~$intersect-ray-plane?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",219,"^8",7,"^9",219,"^:",27,"^33",["^16",["^34",["^16",[["^5I","^5J","~$n","~$w"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-ray-plane?","^6","thi/ng/geom/core/intersect.cljc","^:",27,"^3E",["^16",[["^5I","^5J","~$n","~$w"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",219,"^3N","^4M","^9",219,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[["^5I","^5J","~$n","~$w"]]]]]],"~$intersect-ray2-edges?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",208,"^8",7,"^9",208,"^:",28,"^33",["^16",["^34",["^16",[["^5I","~$rd","^5<"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-ray2-edges?","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^3E",["^16",[["^5I","^5V","^5<"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",208,"^3N",["^H",["^48","^3P"]],"^9",208,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[["^5I","^5V","^5<"]]]]]],"~$subdot",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",244,"^8",8,"^9",244,"^:",14,"^32",true,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c"]]]]],"^3V","Computes sum((a-b)*c), where a, b, c are 3D vectors."],"^32",true,"^I","~$thi.ng.geom.core.intersect/subdot","^6","thi/ng/geom/core/intersect.cljc","^:",14,"^3E",["^16",[["~$a","~$b","~$c"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",244,"^3N","^4P","^9",244,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[["~$a","~$b","~$c"]]]]],"^3V","Computes sum((a-b)*c), where a, b, c are 3D vectors."],"~$intersect-tetrahedra?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",331,"^8",7,"^9",331,"^:",28,"^33",["^16",["^34",["^16",[[["^4:","^4=","~$pc","~$pd","^18","~$p"],["^4?","^4@","~$qc","~$qd","^18","~$q"]]]]]],"^3V","Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."],"^I","~$thi.ng.geom.core.intersect/intersect-tetrahedra?","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^3E",["^16",[["~$p__44460","~$p__44461"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",331,"^3N",["^H",["^3O","^3P"]],"^9",331,"^3Q",2,"^3R",true,"^33",["^16",["^34",["^16",[[["^4:","^4=","^5[","^60","^18","~$p"],["^4?","^4@","^61","^62","^18","~$q"]]]]]],"^3V","Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."],"~$intersect-sphere-sphere?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",76,"^8",7,"^9",76,"^:",31,"^33",["^16",["^34",["^16",[[["^ ","~$p1","~:p","^4W","~:r"],["^ ","~$p2","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]],"^33",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-sphere-sphere?","^6","thi/ng/geom/core/intersect.cljc","^:",31,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]],"^33",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47","^3O"]],"^7",76,"^9",76,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","^67","~:p","^4W","~:r"],["^ ","^68","~:p","^4X","~:r"]],["^67","^4W","^68","^4X"]]]],"~$intersect-line2-line2?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",170,"^8",7,"^9",170,"^:",29,"^33",["^16",["^34",["^16",[[["^52","^53","^18","~$p"],["^54","^55","^18","~$q"],["^56","^57","^18","~$lp"],["^58","^59","^18","~$lq"]]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-line2-line2?","^6","thi/ng/geom/core/intersect.cljc","^:",29,"^3E",["^16",[["~$p__44322","~$p__44323","~$p__44324","~$p__44325"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",170,"^3N","^4M","^9",170,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[[["^52","^53","^18","~$p"],["^54","^55","^18","~$q"],["^56","^57","^18","^6;"],["^58","^59","^18","^6<"]]]]]]],"~$intersect-plane-sphere?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",242,"^8",7,"^9",242,"^:",30,"^33",["^16",["^34",["^16",[["~$n","~$w","~$p","~$r"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-plane-sphere?","^6","thi/ng/geom/core/intersect.cljc","^:",30,"^3E",["^16",[["~$n","~$w","~$p","~$r"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",242,"^3N","^3O","^9",242,"^3Q",4,"^3R",true,"^33",["^16",["^34",["^16",[["~$n","~$w","~$p","~$r"]]]]]],"~$intersect-rect-circle?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",34,"^8",7,"^9",34,"^:",29,"^33",["^16",["^34",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]]]],"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]],"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]],"^3L",["^16",[null,null]]]],"^I","~$thi.ng.geom.core.intersect/intersect-rect-circle?","^6","thi/ng/geom/core/intersect.cljc","^:",29,"^43",["^ ","^3M",false,"^44",4,"^3Q",4,"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]],"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]],"^3L",["^16",[null,null]]],"^3E",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]],"^3K",null,"^44",4,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^46",[["^ ","^44",2,"^3M",false,"^47","^48"],["^ ","^44",4,"^3M",false,"^47","^3O"]],"^7",34,"^9",34,"^3Q",4,"^3R",true,"^33",["^16",[[["^ ","~$p","~:p","^3C","^4<"],["^ ","~$s","~:p","~$r","~:r"]],[["^3Y","^3Z"],["^4R","^4S"],["^3;","^3<"],"~$r"]]]],"~$triaabb-edge-test-e1",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",135,"^8",8,"^9",135,"^:",28,"^32",true,"^33",["^16",["^34",["^16",[[["^35","^36","^37"],["^38","^39","^3:","^18","~$b"],["^3;","^3<","^3=","^18","~$c"],["^3>","^3?","^3@","^18","~$e"],["^3A","^3B","^3C"]]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/triaabb-edge-test-e1","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^3E",["^16",[["~$p__44211","~$p__44212","~$p__44213","~$p__44214","~$p__44215"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",135,"^3N",["^H",["^3O","^3P"]],"^9",135,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[[["^35","^36","^37"],["^38","^39","^3:","^18","~$b"],["^3;","^3<","^3=","^18","~$c"],["^3>","^3?","^3@","^18","~$e"],["^3A","^3B","^3C"]]]]]]],"~$intersect-line2-edges?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",193,"^8",7,"^9",193,"^:",29,"^33",["^16",["^34",["^16",[["^5I","~$rq","^5<"]]]]]],"^I","~$thi.ng.geom.core.intersect/intersect-line2-edges?","^6","thi/ng/geom/core/intersect.cljc","^:",29,"^3E",["^16",[["^5I","^6N","^5<"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",193,"^3N",["^H",["^48","^3P"]],"^9",193,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[["^5I","^6N","^5<"]]]]]],"~$triaabb-axis-test",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",120,"^8",8,"^9",120,"^:",25,"^32",true,"^33",["^16",["^34",["^16",[["~$pa1","~$pb1","~$pa2","~$pb2","~$a","~$b","~$fa","~$fb","^4;","^4>"]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/triaabb-axis-test","^6","thi/ng/geom/core/intersect.cljc","^:",25,"^3E",["^16",[["^6Q","^6R","^6S","^6T","~$a","~$b","^6U","^6V","^4;","^4>"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",120,"^3N",["^H",["^3O","^3P"]],"^9",120,"^3Q",10,"^3R",true,"^33",["^16",["^34",["^16",[["^6Q","^6R","^6S","^6T","~$a","~$b","^6U","^6V","^4;","^4>"]]]]]],"~$face-b1?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",255,"^8",8,"^9",255,"^:",16,"^32",true,"^33",["^16",["^34",["^16",[["^4C","~$n"]]]]],"^3V","Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."],"^32",true,"^I","~$thi.ng.geom.core.intersect/face-b1?","^6","thi/ng/geom/core/intersect.cljc","^:",16,"^3E",["^16",[["^4C","~$n"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",255,"^3N","^3O","^9",255,"^3Q",2,"^3R",true,"^33",["^16",["^34",["^16",[["^4C","~$n"]]]]],"^3V","Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."],"~$triaabb-edge-test-e0",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",128,"^8",8,"^9",128,"^:",28,"^32",true,"^33",["^16",["^34",["^16",[[["^35","^36","^37","^18","~$a"],["^38","^39","^3:","^18","~$b"],["^3;","^3<","^3="],["^3>","^3?","^3@","^18","~$e"],["^3A","^3B","^3C"]]]]]]],"^32",true,"^I","~$thi.ng.geom.core.intersect/triaabb-edge-test-e0","^6","thi/ng/geom/core/intersect.cljc","^:",28,"^3E",["^16",[["~$p__44185","~$p__44186","~$p__44187","~$p__44188","~$p__44189"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",128,"^3N",["^H",["^3O","^3P"]],"^9",128,"^3Q",5,"^3R",true,"^33",["^16",["^34",["^16",[[["^35","^36","^37","^18","~$a"],["^38","^39","^3:","^18","~$b"],["^3;","^3<","^3="],["^3>","^3?","^3@","^18","~$e"],["^3A","^3B","^3C"]]]]]]],"~$face-a",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",248,"^8",8,"^9",248,"^:",14,"^32",true,"^33",["^16",["^34",["^16",[["~$f","^4C"]]]]],"^3V","Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."],"^32",true,"^I","~$thi.ng.geom.core.intersect/face-a","^6","thi/ng/geom/core/intersect.cljc","^:",14,"^3E",["^16",[["~$f","^4C"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",248,"^3N","^4Z","^9",248,"^3Q",2,"^3R",true,"^33",["^16",["^34",["^16",[["~$f","^4C"]]]]],"^3V","Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."],"~$intersect-aabb-frustum?",["^ ","^31",null,"^5",["^ ","^6","thi/ng/geom/core/intersect.cljc","^7",56,"^8",7,"^9",56,"^:",30,"^33",["^16",["^34",["^16",[[["^3Y","^3Z","^3[","^18","~$p"],"~$size","~$planes"]]]]],"^3V","Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"],"^I","~$thi.ng.geom.core.intersect/intersect-aabb-frustum?","^6","thi/ng/geom/core/intersect.cljc","^:",30,"^3E",["^16",[["~$p__44110","^78","^79"]]],"^3K",null,"^3L",["^16",[null,null]],"^8",1,"^3M",false,"^7",56,"^3N",["^H",[null,"^48"]],"^9",56,"^3Q",3,"^3R",true,"^33",["^16",["^34",["^16",[[["^3Y","^3Z","^3[","^18","~$p"],"^78","^79"]]]]],"^3V","Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"]],"^X",["^ ","^13","^13","^14","^13","^R","^R"],"~:cljs.analyzer/constants",["^ ","^V",["^H",["~:q","~:intersect-outside","~:r","~:inside","^5K","~:parallel","~:ua","~:ub","~:type","~:e","^4<","~:on-plane","~:coincident-no-intersect","~:no-intersect","~:same-plane","~:intersect","~:f","~:f*","~:coincident","~:p","~:degenerate","~:outside"]],"~:order",["~:p","~:r","^4<","^7K","^7G","^7>","^5K","^7B","^7J","^7F","^7E","~:q","^7I","^7D","^7?","^7@","^7A","^7=","^7C","~:f","^7H","~:e"]],"^1:",["^ ","^X",["^H",[]],"^W",["^H",[]]],"^1;",["^ "],"^1<",["^T","^R","^P","^O","^S","^U"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1J",[["^7O","~:static-fns"],true,["^7O","~:elide-asserts"],false,["^7O","~:optimize-constants"],null,["^7O","^1A"],null,["^7O","~:external-config"],null,["^7O","~:tooling-config"],null,["^7O","~:emit-constants"],null,["^7O","~:load-tests"],null,["^7O","~:form-size-threshold"],null,["^7O","~:infer-externs"],true,["^7O","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7O","~:fn-invoke-direct"],null,["^7O","~:source-map"],"/dev/null"]]]