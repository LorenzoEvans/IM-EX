{"version":3,"sources":["shadow/cljs/devtools/cli_opts.cljc"],"mappings":"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","names":["shadow.cljs.devtools.cli-opts/parse-dep","dep-str","vec__53560","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sym","ver","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.cli-opts/parse-merge-data","edn-str","shadow.cljs.devtools.cli-opts/conj-vec","x","y","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/cli-spec","opts","k","v","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/map?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","shadow.cljs.devtools.cli-opts/action-help","shadow.cljs.devtools.cli-opts/action-list","p__53563","map__53564","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/help","errors","summary","seq__53566","cljs.core/seq","chunk__53567","count__53568","i__53569","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","err","cljs.core/println","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","seq__53570","chunk__53571","count__53572","i__53573","action","G__53578","G__53579","G__53580","G__53581","goog.string/format","cljs.core/name","shadow.cljs.devtools.cli-opts/action-set","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/actions-that-require-build-arg","p__53583","map__53584","shadow.cljs.devtools.cli-opts/parse-build-arg","arguments","result","cljs.core/empty?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__53582#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","p__53586","map__53587","shadow.cljs.devtools.cli-opts/parse-arguments","action-str","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/contains?","cljs.core/subvec","G__53589","shadow.cljs.devtools.cli-opts/split-at-run","args","idx","or__4131__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/parse","vec__53590","extra","cljs.core/vec","parsed","cljs.tools.cli/parse-opts","cljs.core/into","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/cli-config","shadow.cljs.devtools.cli-opts/upgrade-args","old","G__53596","vec__53597","seq__53598","first__53599","vec__53603","seq__53604","first__53605","head","tail","new","dep","cljs.core/not","clojure.string/starts-with?","cljs.core/rest","shadow.cljs.devtools.cli-opts/parse-main-cli","shadow.cli-util/parse-args"],"sourcesContent":["(ns shadow.cljs.devtools.cli-opts\n  #?(:clj\n     (:require\n       [clojure.tools.cli :as cli]\n       [shadow.cli-util :as cli-util]\n       [shadow.cljs.devtools.config :as config]\n       [clojure.string :as str])\n     :cljs\n     (:require\n       [goog.string.format]\n       [goog.string :refer (format)]\n       [cljs.tools.cli :as cli]\n       [shadow.cli-util :as cli-util]\n       [clojure.string :as str])))\n\n(defn parse-dep [dep-str]\n  (let [[sym ver] (str/split dep-str #\":\")]\n    [(symbol sym) ver]\n    ))\n\n#?(:cljs\n   ;; don't actually need to parse this on the npm side\n   ;; since it never compiles anything\n   (defn parse-merge-data [edn-str]\n     {})\n\n   :clj\n   (defn parse-merge-data [edn-str]\n     (config/read-config-str edn-str)))\n\n(defn conj-vec [x y]\n  (if (nil? x)\n    [y]\n    (conj x y)))\n\n(def cli-spec\n  ;; FIXME: how do I make this not show up in summary?\n  [[nil \"--npm\" \"internal, used by the shadow-cljs npm package\"]\n\n   [\"-d\" \"--dependency DEP\" \"adds an additional dependency (eg. -d foo/bar:1.2.3 -d another/thing:4.0.0)\"\n    :parse-fn parse-dep\n    :assoc-fn\n    (fn [opts k v]\n      (update opts :dependencies conj-vec v))]\n\n   [nil \"--config-merge DATA\" \"merges additional EDN data into the build config\"\n    :parse-fn parse-merge-data\n    :assoc-fn\n    (fn [opts k v]\n      (when-not (map? v)\n        (throw (ex-info \"--config-merge expects an EDN map argument\" {:v v})))\n      (update opts :config-merge conj-vec v))]\n   ;; generic\n   [\"-A\" \"--aliases ALIASES\" \"adds aliases for use with clj, only effective when using deps.edn\"]\n   [nil \"--source-maps\" \"temporarily enable source-maps for release debugging\"]\n   [nil \"--pseudo-names\" \"temporarily enable pseudo-names for release debugging. DO NOT SHIP THIS CODE!\"]\n   [nil \"--debug\" \"enable source-maps + pseudo-names. DO NOT SHIP THIS CODE!\"]\n   [nil \"--stdin\" \"clj-eval from stdin\"]\n   [\"-v\" \"--verbose\" \"verbose build log\"]\n   [nil \"--force-spawn\" \"spawn new process, do not connect to running server\"]\n   [nil \"--cli-info\" \"prints a bunch of information\"]\n   [nil \"--via VIA\" \"internal option, used by node script\" :parse-fn keyword]\n   [\"-h\" \"--help\"]])\n\n\n(def action-help\n  ;; per action help for: shadow-cljs compile -h\n  {:compile \"TBD\"})\n\n(def action-list\n  [:compile\n   :watch\n   :check\n   :release\n   :classpath\n\n   :node-repl\n   :browser-repl\n\n   :cljs-repl\n   :clj-repl\n   :clj-eval\n   :clj-run\n   :run\n\n   :info\n   :pom\n\n   :npm-deps\n\n   :test\n\n   :aot\n   :init\n   :help\n   :server\n\n   :start\n   :stop\n   :restart\n   ])\n\n(defn help [{:keys [errors summary] :as opts}]\n  (do (doseq [err errors]\n        (println)\n        (println err)\n        (println))\n\n      (println \"Usage:\")\n      (println \"  shadow-cljs <action> <zero or more build ids>\")\n      (println)\n\n      (println \"Supported actions are:\")\n      (println)\n      (doseq [action action-list]\n        ;; FIXME: add help\n        (println (format \"%12s - ...\" (name action))))\n      (println)\n      (println \"Options:\")\n      (println \"-----\")\n      (println summary)\n      (println \"-----\")))\n\n(def action-set\n  (into #{} action-list))\n\n(def actions-that-require-build-arg\n  #{:compile\n    :watch\n    :release\n    :check\n    :cljs-repl})\n\n(defn parse-build-arg [{:keys [action arguments] :as result}]\n  (if (empty? arguments)\n    (assoc result :errors [(str \"Action \\\"\" (name action) \"\\\" requires one or more build ids\")])\n    ;; FIXME: validate build-ids\n    (assoc result :builds (into [] (map (comp keyword #(str/replace %1 \":\" \"\"))) arguments))))\n\n(defn parse-arguments [{:keys [arguments] :as result}]\n  (if (empty? arguments)\n    (assoc result :errors [\"Please specify which action to run!\"])\n    (let [action-str\n          (first arguments)\n\n          action\n          (keyword action-str)]\n      (if-not (contains? action-set action)\n        (assoc result :errors [(str \"Invalid action \\\"\" action-str \"\\\"\")])\n        (-> result\n            (assoc :action action)\n            (update :arguments subvec 1)\n            (cond->\n              (contains? actions-that-require-build-arg action)\n              (parse-build-arg)\n              ))))))\n\n(defn split-at-run [args]\n  (let [idx (or (.indexOf args \"run\")\n                (.indexOf args \"clj-run\"))]\n    (if (= -1 idx)\n      [args []]\n      [(subvec args 0 (inc idx))\n       (subvec args (inc idx))]\n      )))\n\n(comment\n  (prn (split-at-run [\"a\" \"run\" \"b\"])))\n\n(defn parse [args]\n  (let [[args extra] (split-at-run (vec args))\n        parsed\n        (-> (cli/parse-opts args cli-spec)\n            (update :arguments into extra))]\n\n    (if (or (:errors parsed) (get-in parsed [:options :help]))\n      parsed\n      (parse-arguments parsed)\n      )))\n\n(comment\n  (prn (parse [\"run\" \"--foo\" \"--bar\"])))\n\n(def cli-config\n  {:aliases\n   {\"v\" :verbose\n    \"h\" :help}\n\n   :init-command\n   :global\n\n   :commands\n   {:global\n    {:args-mode :none\n     :aliases\n     {\"d\" :dependency}\n     :flags\n     #{:force-spawn\n       :npm\n       :cli-info}\n     :options\n     {:dependency\n      {:multiple true\n       :parse-fn parse-dep}}}\n\n    :help\n    {:args-mode :none}\n\n    :server\n    {:args-mode :none}\n\n    :node-repl\n    {:args-mode :none\n     :options\n     {:node-arg\n      {:multiple true}}}\n\n    :browser-repl\n    {:args-mode :none}\n\n    :clj-repl\n    {:args-mode :none}\n\n    :run\n    {:args-mode :eat-all}\n\n    :clj-run\n    {:alias-of :run}\n\n    :compile\n    {:args-mode :at-least-one}\n\n    :watch\n    {:args-mode :at-least-one}\n\n    :release\n    {:args-mode :at-least-one\n     :flags\n     #{:source-maps\n       :pseudo-names\n       :debug}}\n    }})\n\n(defn upgrade-args\n  \"rewrite old style args to new style\"\n  [old]\n  (loop [[head & tail] old\n         new []]\n    (cond\n      (nil? head)\n      new\n\n      (or (= head \"-d\")\n          (= head \"--dependency\"))\n      (let [dep (first tail)]\n        (if (or (not dep)\n                (str/starts-with? dep \"-\"))\n          (throw (ex-info \"invalid argument\" {:arg head\n                                              :dep dep\n                                              :old old\n                                              :new new}))\n          (recur (rest tail) (conj new (str \"--dependency=\" dep)))\n          ))\n\n      :else\n      (recur tail (conj new head))\n      )))\n\n(defn parse-main-cli [args]\n  (cli-util/parse-args cli-config (upgrade-args args)))\n"]}