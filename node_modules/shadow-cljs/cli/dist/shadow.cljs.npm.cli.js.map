{"version":3,"sources":["shadow/cljs/npm/cli.cljs"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","shadow.cljs.npm.cli/log","seq53648","self__4718__auto__","cljs.core/seq","args","js/process.stderr.write","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/jar-version","js/require","G__53653","G__53654","goog.object/get","shadow.cljs.npm.cli/file-older-than","a","b","xa","js/shadow.js.shim.module$fs.statSync","xb","shadow.cljs.npm.cli/ensure-dir","dir","js/shadow.js.shim.module$fs.existsSync","js/shadow.js.shim.module$fs.mkdirSync","shadow.cljs.npm.cli/is-directory?","path","js/shadow.js.shim.module$fs.lstatSync","shadow.cljs.npm.cli/is-windows?","clojure.string/includes?","js/process.platform","shadow.cljs.npm.cli/run","project-root","cmd","proc-opts","spawn-opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/clj->js","executable","G__53655","G__53656","js/shadow.js.shim.module$which.sync","cljs.core/not","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__53657","G__53658","G__53659","js/shadow.js.shim.module$child_process.spawnSync","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/run!","G__53660","G__53661","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","js/process.exit","node-server","js/shadow.js.shim.module$net.Server","socket","err","js/console.warn","js/process.on","cli-port","js/Object.assign","js/process.env","proc","G__53662","G__53663","G__53664","js/shadow.js.shim.module$child_process.spawn","error","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli.log.cljs$core$IFn$_invoke$arity$variadic","code","signal","shadow.cljs.npm.cli/run-java","opts","result","status","shadow.cljs.npm.cli/default-config-str","shadow.cljs.npm.util/slurp","js/shadow.js.shim.module$path.resolve","js/__dirname","shadow.cljs.npm.cli/default-config","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/ensure-config","root","config","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/run-init","js/shadow.js.shim.module$readline_sync.keyInYN","js/shadow.js.shim.module$fs.writeFileSync","shadow.cljs.npm.cli/modified-dependencies?","cp-file","cp","shadow.cljs.npm.cli/unwanted-deps","shadow.cljs.npm.cli/drop-unwanted-deps","dependencies","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__53665","vec__53666","seq__53667","first__53668","cljs.core/first","cljs.core/next","dep-id","_","fq-dep-id","cljs.core/namespace","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/contains?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/add-exclusions","p__53669","vec__53670","seq__53671","first__53672","version","modifiers","dep","mods","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.update.cljs$core$IFn$_invoke$arity$3","excl","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/reduce-kv","cljs.core/conj","p__53675","map__53676","cljs.core/PROTOCOL_SENTINEL","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/get-classpath","cache-root","user-config","map__53678","use-aot","cljs.core.get.cljs$core$IFn$_invoke$arity$3","shadow-artifact","or__4131__auto__","G__53679","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","classpath-config","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","p1__53673#","updated?","jar","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/process.stdout","js/process.stderr","files","classpath-data","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__53674#","cljs.core/every?","js/shadow.js.shim.module$fs.unlinkSync","shadow.cljs.npm.cli/print-error","ex","map__53681","tag","data","cljs.core/ex-data","shadow.cljs.npm.cli/get-shared-home","G__53683","G__53684","G__53685","js/shadow.js.shim.module$os.homedir","p__53686","map__53687","shadow.cljs.npm.cli/get-jvm-opts","source-paths","jvm-opts","classpath","classpath-str","js/shadow.js.shim.module$path.delimiter","shadow.cljs.npm.cli/run-standalone","cli-args","p__53689","map__53690","shadow.cljs.npm.cli/get-lein-args","lein","map__53692","profile","lein-config","cljs.core/map?","extra-deps","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__53694","shadow.cljs.npm.util/reduce->","shadow.cljs.npm.cli/run-lein","lein-args","p__53696","map__53697","shadow.cljs.npm.cli/get-clojure-args","map__53699","aliases","inject","inject?","opt-aliases","extra-deps-vec","p__53702","vec__53703","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","id","G__53701","G__53706","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__53707","cljs.core/pr-str","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__53695#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/powershell-escape","s","clojure.string/replace","shadow.cljs.npm.cli/run-clojure","clojure-args","ps-args","shadow.cljs.npm.cli/wait-for-server-start!","port-file","js/setTimeout","p__53708","map__53709","shadow.cljs.npm.cli/server-start","deps","vec__53711","server-cmd","server-args","cache-dir","out-path","err-path","out","js/shadow.js.shim.module$fs.openSync","G__53714","G__53715","G__53716","shadow.cljs.npm.cli/server-stop","server-port-file","server-pid-file","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","cli-repl","js/parseInt","G__53717","js/shadow.js.shim.module$net.connect","cljs.core.async/close!","shadow.cljs.npm.cli/defaults","p__53718","map__53719","shadow.cljs.npm.cli/merge-config-with-cli-opts","options","map__53721","G__53723","G__53725","shadow.cljs.npm.cli/print-classpath-tree","js/Error","shadow.cljs.npm.cli.print_classpath_tree.cljs$core$IFn$_invoke$arity$2","level","seq__53726","chunk__53727","count__53728","i__53729","vec__53736","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__53739","coord","coord-deps","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","p__53742","map__53743","shadow.cljs.npm.cli/print-cli-info","config-path","G__53745","G__53746","G__53747","G__53748","cljs.core/println","js/__filename","seq__53749","chunk__53750","count__53751","i__53752","source-path","map__53753","deps-hierarchy","cp-data","shadow.cljs.npm.cli.print_classpath_tree.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/getenv","envname","shadow.cljs.npm.cli/read-config*","e53755","reader-opts","config-txt","rdr","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","G__53756","G__53757","G__53758","goog.string/format","shadow.cljs.npm.cli/read-user-config","G__53759","G__53760","G__53761","shadow.cljs.npm.cli/read-config","shadow.cljs.npm.cli/guess-node-package-manager","yarn-lock","shadow.cljs.npm.cli/check-project-install!","package-json-file","G__53763","pkg","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","vec__53764","pkg-cmd","pkg-args","G__53767","cljs.core/Keyword","G__53768","G__53769","G__53770","shadow.cljs.npm.cli/generate-xml","struct","cljs.core/vector?","vec__53771","seq__53772","first__53773","attrs","more","p__53786","vec__53787","key","value","ns","cljs.core/rest","p__53790","map__53791","shadow.cljs.npm.cli/generate-pom","pom-path","G__53794","project-name","js/shadow.js.shim.module$path.basename","G__53795","G__53796","p__53802","vec__53803","seq__53804","first__53805","dep-sym","dep-version","G__53806","shadow.cljs.npm.cli/is-server-running?","server-pid","pid","e53807","js/process.kill","e","shadow.cljs.npm.cli/do-start","shadow.cljs.npm.cli/print-classpath","shadow.cljs.npm.cli/main","e53808","map__53809","action","shadow.cljs.devtools.cli-opts/parse","shadow.cljs.devtools.cli-opts/help","map__53811","js/shadow.js.shim.module$path.dirname","G__53812","server-running?","G__53814","js/shadow.js.shim.module$mkdirp.sync","js/process.version","c__40254__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__40255__auto__","switch__40216__auto__","state_53824","state_val_53825","statearr-53826","statearr-53827","inst_53816","cljs.core.async.impl.ioc-helpers/take!","statearr-53828","inst_53821","inst_53822","statearr-53829","cljs.core.async.impl.ioc-helpers/return-chan","inst_53818","statearr-53830","statearr-53831","state-machine__40217__auto__","ret-value__40218__auto__","result__40219__auto__","cljs.core/keyword-identical?","e53832","js/Object","ex__40220__auto__","statearr-53833","cljs.core.async.impl.ioc-helpers/process-exception","state__40256__auto__","statearr-53834","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","shadow.cljs.npm.client/run"],"sourcesContent":["(ns shadow.cljs.npm.cli\n  (:refer-clojure :exclude (run!))\n  (:require\n    [\"path\" :as path]\n    [\"fs\" :as fs]\n    [\"os\" :as os]\n    [\"child_process\" :as cp]\n    [\"readline-sync\" :as rl-sync] ;; FIXME: drop this?\n    [\"mkdirp\" :as mkdirp]\n    [\"net\" :as node-net]\n    [\"which\" :as which]\n    [cljs.core.async :as async :refer (go go-loop alt!)]\n    [cljs.tools.reader.reader-types :as rt]\n    [cljs.tools.reader.edn :as edn]\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.object :as gobj]\n    [goog.string.format]\n    [goog.string :refer (format)]\n    [shadow.cljs.npm.util :as util]\n    [shadow.cljs.npm.client :as client]\n    [shadow.cljs.devtools.cli-opts :as opts]\n    ))\n\n(defn log [& args]\n  (js/process.stderr.write (str (->> args (map str) (str/join \" \")) \"\\n\")))\n\n(def jar-version\n  (-> (js/require \"../../package.json\")\n      (gobj/get \"jar-version\")))\n\n(defn file-older-than [a b]\n  (let [xa (fs/statSync a)\n        xb (fs/statSync b)]\n    (> (.-mtime xa) (.-mtime xb))))\n\n(defn ensure-dir [dir]\n  (when-not (fs/existsSync dir)\n    (fs/mkdirSync dir)))\n\n(defn is-directory? [path]\n  (-> (fs/lstatSync path)\n      (.isDirectory)))\n\n(defn is-windows? []\n  (str/includes? js/process.platform \"win32\"))\n\n(defn run [project-root cmd args proc-opts]\n  (let [spawn-opts\n        (-> {:cwd project-root\n             :stdio \"inherit\"}\n            (merge proc-opts)\n            (clj->js))\n\n        executable\n        (which/sync cmd #js {:nothrow true})]\n\n    (if-not executable\n      (throw (ex-info (str \"Executable '\" cmd \"' not found on system path.\") {:cmd cmd :args args}))\n      (cp/spawnSync executable (into-array args) spawn-opts))))\n\n;; same as run! but preserves the exit code of the process\n;; must be run as the last step since it will kill the node process after\n(defn run! [project-root cmd args proc-opts]\n  (let [executable (which/sync cmd #js {:nothrow true})]\n    (if-not executable\n      (do (println (str \"Executable '\" cmd \"' not found on system path.\"))\n          (js/process.exit 1))\n\n      (let [node-server (node-net/Server.)]\n\n        (.on node-server \"connection\"\n          (fn [^js socket]\n            ;; send OK and close socket\n            ;; this is not meant as a persistent connection as I need to verify first\n            ;; under which circumstances that may disconnect for \"valid\" reasons\n            ;; like switching the WiFi network, sleep mode etc\n            ;; instead just have the java proc periodically check if this is still alive\n            (.end socket \"OK\")))\n\n        (.on node-server \"error\"\n          (fn [err]\n            (js/console.warn \"node-server err\" err)))\n\n        (js/process.on \"SIGTERM\"\n          (fn []\n            (.close node-server)\n            (js/process.exit 0)))\n\n        (js/process.on \"SIGINT\"\n          (fn []\n            (.close node-server)\n            (js/process.exit 0)))\n\n        (.listen node-server\n          (fn []\n            (let [cli-port\n                  (-> node-server (.address) (.-port))\n\n                  spawn-opts\n                  (-> {:cwd project-root\n                       :env (-> #js {\"SHADOW_CLI_PORT\" cli-port}\n                                (js/Object.assign js/process.env))\n                       :stdio \"inherit\"}\n                      (merge proc-opts)\n                      (clj->js))\n\n                  ^js proc\n                  (cp/spawn executable (into-array args) spawn-opts)]\n\n              (.on proc \"error\"\n                (fn [^js error]\n                  (if (and error (= \"ENOENT\" (. error -errno)))\n                    (log (str \"shadow-cljs - failed to execute \\\"\" cmd \"\\\", command not found.\"))\n                    (log (str \"shadow-cljs - failed to execute \\\"\" cmd \"\\\", \" (. error -message))))))\n\n              (.on proc \"exit\"\n                (fn [code signal]\n                  (.close node-server)\n                  (js/process.exit code)))\n\n              proc\n              )))))))\n\n(defn run-java [project-root args opts]\n  (let [^js result\n        (run project-root \"java\" args opts)\n\n        status\n        (.-status result)]\n\n    (cond\n      (zero? status)\n      true\n\n      (pos? status)\n      (throw (ex-info \"java process exit with non-zero exit code\" {:tag :java-exit :status status :result result}))\n\n      (and (.-error result) (= \"ENOENT\" (.. result -error -errno)))\n      (do (log \"shadow-cljs - java not found, please install a Java8 SDK. (OpenJDK or Oracle)\")\n          (js/process.exit 1)\n          ))))\n\n(def default-config-str\n  (util/slurp (path/resolve js/__dirname \"..\" \"default-config.edn\")))\n\n(def default-config\n  (reader/read-string default-config-str))\n\n(defn ensure-config []\n  (loop [root (path/resolve)]\n    (let [config (path/resolve root \"shadow-cljs.edn\")]\n      (cond\n        (fs/existsSync config)\n        config\n\n        ;; check parent directory\n        ;; might be in $PROJECT/src/demo it should find $PROJECT/shadow-cljs.edn\n        (not= root (path/resolve root \"..\"))\n        (recur (path/resolve root \"..\"))\n\n        :else ;; ask to create default config in current dir\n        false\n        ))))\n\n(defn run-init [opts]\n  (let [config (path/resolve \"shadow-cljs.edn\")]\n    (log \"shadow-cljs - init\")\n    (log (str \"- \" config))\n\n    (when (rl-sync/keyInYN \"Create?\")\n      ;; FIXME: ask for default source path, don't just use one\n      (fs/writeFileSync config default-config-str)\n      (log \"shadow-cljs - created default configuration\")\n      config\n      )))\n\n(defn modified-dependencies? [cp-file config]\n  (let [cp (-> (util/slurp cp-file)\n               (reader/read-string))]\n\n    (or (not= (:version cp) (:version config))\n        (not= (:dependencies cp) (:dependencies config))\n        )))\n\n;; these might cause trouble when using different versions\n;; than expected by shadow-cljs.\n(def unwanted-deps\n  '#{org.clojure/clojurescript ;; we will always be on the latest version\n     org.clojure/clojure ;; can't run on 1.8\n     thheller/shadow-cljs ;; just in case, added later\n\n     ;; brought in by shadow-cljs\n     ;; breaks cache when ending up with older version\n     com.cognitect/transit-clj\n     com.cognitect/transit-java\n     })\n\n(defn drop-unwanted-deps [dependencies]\n  (->> dependencies\n       (remove (fn [[dep-id & _]]\n                 (let [fq-dep-id\n                       (if (namespace dep-id)\n                         dep-id\n                         (symbol (name dep-id) (name dep-id)))]\n\n                   (when (or (contains? unwanted-deps dep-id)\n                             (contains? unwanted-deps fq-dep-id))\n                     (js/console.warn\n                       (str \"WARNING: The \" dep-id \" dependency in shadow-cljs.edn was ignored. Default version is used and override is not allowed to ensure compatibility.\"))\n                     true))))\n       (into [])))\n\n(defn add-exclusions [dependencies]\n  (->> dependencies\n       (map (fn [[dep-id version & modifiers :as dep]]\n              (let [mods\n                    (-> (apply hash-map modifiers)\n                        (update :exclusions (fn [excl]\n                                              (->> excl\n                                                   (concat unwanted-deps)\n                                                   (distinct)\n                                                   (into [])))))]\n                (reduce-kv conj [dep-id version] mods))))\n       (into [])))\n\n(defn get-classpath [project-root {:keys [cache-root user-config] :as config}]\n  (let [cp-file\n        (path/resolve project-root cache-root \"classpath.edn\")\n\n        use-aot\n        (not (false? (get config :aot true)))\n\n        shadow-artifact\n        (-> ['thheller/shadow-cljs (or (:version config)\n                                       jar-version)]\n            (cond->\n              use-aot\n              (conj :classifier \"aot\")))\n\n\n        classpath-config\n        (-> config\n            ;; allow the system config to add extra deps like cider-nrepl\n            (update :dependencies into (:dependencies user-config))\n            (update :dependencies drop-unwanted-deps)\n            (update :dependencies add-exclusions)\n            (update :dependencies #(into [shadow-artifact] %)))\n\n        ;; only need to rebuild the classpath if :dependencies\n        ;; or the version changed\n        updated?\n        (when (or (not (fs/existsSync cp-file))\n                  (modified-dependencies? cp-file classpath-config))\n          ;; re-create classpath by running the java helper\n          (let [jar (js/require \"shadow-cljs-jar/path\")]\n            (run-java\n              project-root\n              [\"-jar\" jar]\n              {:input (pr-str classpath-config)\n               :stdio [nil js/process.stdout js/process.stderr]})\n            true))\n\n        {:keys [files] :as classpath-data}\n        (-> (util/slurp cp-file)\n            (reader/read-string)\n            (assoc :updated? updated?))]\n\n    ;; if something in the ~/.m2 directory is deleted we need to re-fetch it\n    ;; otherwise we end up with weird errors at runtime\n    (if (every? #(fs/existsSync %) files)\n      classpath-data\n      ;; if anything is missing delete the classpath.edn and start over\n      (do (fs/unlinkSync cp-file)\n          (log \"WARN: missing dependencies, reconstructing classpath.\")\n          (recur project-root config)\n          ))))\n\n(defn print-error [ex]\n  (let [{:keys [tag] :as data}\n        (ex-data ex)]\n\n    (js/console.warn \"===== ERROR =================\")\n    (js/console.warn (.-message ex))\n    (js/console.warn \"=============================\")\n    ))\n\n(defn get-shared-home []\n  (path/resolve (os/homedir) \".shadow-cljs\" jar-version))\n\n(defn get-jvm-opts [project-root {:keys [source-paths jvm-opts] :as config}]\n  (let [classpath\n        (get-classpath project-root config)\n\n        classpath-str\n        (->> (:files classpath)\n             (concat source-paths)\n             (str/join path/delimiter))]\n\n    (-> []\n        (into jvm-opts)\n        (conj \"-cp\" classpath-str)\n        )))\n\n(defn run-standalone [project-root config args opts]\n  (let [cli-args\n        (-> (get-jvm-opts project-root config)\n            (conj \"clojure.main\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    #_(log \"shadow-cljs - starting ...\")\n    (run! project-root \"java\" cli-args {})))\n\n(defn get-lein-args [{:keys [lein user-config] :as config} opts]\n  (let [{:keys [profile] :as lein-config}\n        (cond\n          (map? lein)\n          lein\n          (true? lein)\n          {})\n\n        extra-deps\n        (-> []\n            (into (:dependencies user-config))\n            (into (get-in opts [:options :dependencies])))]\n\n    (-> []\n        (cond->\n          profile\n          (conj \"with-profile\" profile)\n\n          (seq extra-deps)\n          (util/reduce->\n            (fn [args dep]\n              (conj args \"update-in\" \":dependencies\" \"conj\" (pr-str dep) \"--\"))\n            extra-deps)))))\n\n(defn run-lein [project-root config args opts]\n  (let [lein-args\n        (-> (get-lein-args config opts)\n            (conj \"run\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - running: lein\" (str/join \" \" lein-args))\n    (run! project-root \"lein\" lein-args {})))\n\n(defn get-clojure-args [project-root {:keys [jvm-opts user-config] :as config} opts]\n  (let [{:keys [aliases inject]} (:deps config)\n\n        inject?\n        (true? inject)\n\n        ;; unparsed string arg\n        opt-aliases\n        (get-in opts [:options :aliases])\n\n        extra-deps-vec\n        (-> []\n            (into (:dependencies user-config))\n            (into (get-in opts [:options :dependencies])))\n\n        extra-deps\n        (-> {}\n            (util/reduce->\n              (fn [m [id version]]\n                ;; FIXME: don't forget about extra kv args\n                (assoc m id {:mvn/version version}))\n              extra-deps-vec)\n            (cond->\n              inject?\n              (assoc 'thheller/shadow-cljs {:mvn/version jar-version})))\n\n        aliases\n        (-> (or aliases [])\n            (into (:deps-aliases user-config))\n            (cond->\n              (seq extra-deps)\n              (conj :shadow-cljs-inject)))]\n\n    (-> []\n        (cond->\n          (seq extra-deps)\n          (conj\n            \"-Sdeps\"\n            (pr-str {:aliases {:shadow-cljs-inject {:extra-deps extra-deps}}}))\n\n          (seq aliases)\n          (conj (str \"-A\" (->> aliases (map pr-str) (str/join \"\"))))\n\n          (seq opt-aliases)\n          (conj (str \"-A\" opt-aliases))\n\n          (seq jvm-opts)\n          (into (map #(str \"-J\" %)) jvm-opts)\n          ))))\n\n(defn powershell-escape [s]\n  (-> s\n      (str/replace \" \" \"` \")\n      (str/replace \"{\" \"`{\")\n      (str/replace \"}\" \"`}\")\n      (str/replace \\\" \"`\\\"`\\\"\")))\n\n(defn run-clojure [project-root config args opts]\n  (let [clojure-args\n        (-> (get-clojure-args project-root config opts)\n            (conj \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - starting via \\\"clojure\\\"\")\n    (if-not (is-windows?)\n      (run! project-root \"clojure\" clojure-args {})\n      (let [ps-args (into [\"-command\" \"clojure\"] (map powershell-escape) clojure-args)]\n        (run! project-root \"powershell\" ps-args {})))))\n\n(defn wait-for-server-start! [port-file ^js proc]\n  (if (fs/existsSync port-file)\n    (do (js/process.stderr.write \" ready!\\n\")\n        ;; give the server some time to settle before we release it\n        ;; hopefully fixes some circleci issues\n        (js/setTimeout #(.unref proc) 500))\n    (do (js/process.stderr.write \".\")\n        (js/setTimeout #(wait-for-server-start! port-file proc) 250))\n    ))\n\n(defn server-start [project-root {:keys [lein deps cache-root] :as config} args opts]\n  (let [[server-cmd server-args]\n        (cond\n          deps\n          [\"clojure\"\n           (-> (get-clojure-args project-root config opts)\n               (conj \"-m\"))]\n\n          lein\n          [\"lein\"\n           (-> (get-lein-args config opts)\n               (conj \"run\" \"-m\"))]\n\n          :else\n          [\"java\"\n           (-> (get-jvm-opts project-root config)\n               (conj \"clojure.main\" \"-m\"))])\n\n        server-args\n        (conj server-args \"shadow.cljs.devtools.cli\" \"--npm\" \"server\")]\n\n    (js/process.stderr.write \"shadow-cljs - server starting \")\n\n    (let [cache-dir\n          (path/resolve project-root cache-root)\n\n          out-path\n          (path/resolve cache-dir \"server.stdout.log\")\n\n          err-path\n          (path/resolve cache-dir \"server.stderr.log\")\n\n          out\n          (fs/openSync out-path \"a\")\n\n          err\n          (fs/openSync err-path \"a\")\n\n          proc\n          (cp/spawn server-cmd (into-array server-args)\n            #js {:detached true\n                 :stdio #js [\"ignore\", out, err]})]\n\n      (wait-for-server-start! (path/resolve cache-dir \"cli-repl.port\") proc)\n      )))\n\n(defn server-stop [project-root config server-port-file server-pid-file args opts]\n  (let [signal (async/chan)\n\n        cli-repl\n        (-> (util/slurp server-port-file)\n            (js/parseInt 10))\n\n        socket\n        (node-net/connect\n          #js {:port cli-repl\n               :host \"localhost\"\n               :timeout 1000})]\n\n    (.on socket \"connect\" #(.write socket \"(shadow.cljs.devtools.server/remote-stop!)\\n:repl/quit\\n\"))\n    (.on socket \"error\" (fn [err]\n                          (fs/unlinkSync server-port-file)\n                          (fs/unlinkSync server-pid-file)))\n    (.on socket \"close\" #(async/close! signal))\n\n    signal))\n\n(def defaults\n  {:cache-root \".shadow-cljs\"\n   :version jar-version\n   :dependencies []})\n\n(defn merge-config-with-cli-opts [config {:keys [options] :as opts}]\n  (let [{:keys [dependencies]} options]\n    (-> config\n        (cond->\n          (seq dependencies)\n          (update :dependencies into dependencies)\n          ))))\n\n(defn print-classpath-tree\n  ([deps]\n   (print-classpath-tree deps 0))\n  ([deps level]\n   (doseq [[coord coord-deps] deps]\n     (println\n       (str\n         (when (pos? level)\n           (->> (repeat level \"\")\n                (str/join \"  \")))\n         (pr-str coord)))\n     (when coord-deps\n       (print-classpath-tree coord-deps (inc level))))))\n\n(defn print-cli-info [project-root config-path {:keys [cache-root source-paths] :as config} opts]\n  (println \"=== Version\")\n  (println \"jar:           \" jar-version)\n  (println \"cli:           \" (-> (js/require \"../../package.json\")\n                                 (gobj/get \"version\")))\n  (println \"deps:          \" (-> (js/require \"shadow-cljs-jar/package.json\")\n                                 (gobj/get \"version\")))\n  (println \"config-version:\" (:version config))\n  (println)\n\n  (println \"=== Paths\")\n  (println \"cli:    \" js/__filename)\n  (println \"config: \" config-path)\n  (println \"project:\" project-root)\n  (println \"cache:  \" cache-root)\n  (println)\n\n  (println \"=== Java\")\n  (run-java project-root [\"-version\"] {})\n  (println)\n\n  (println \"=== Source Paths\")\n  (doseq [source-path source-paths]\n    (println (path/resolve project-root source-path)))\n  (println)\n\n  (when (and (not (:lein config))\n             (not (:deps config)))\n    (println \"=== Dependencies\")\n    (let [{:keys [deps-hierarchy] :as cp-data}\n          (get-classpath project-root config)]\n\n      (print-classpath-tree deps-hierarchy))\n    (println)))\n\n(defn- getenv [envname]\n  (str (aget js/process.env envname)))\n\n(defn read-config* [config-path]\n  (try\n    (let [reader-opts\n          {:readers {'shadow/env getenv}}\n\n          config-txt\n          (util/slurp config-path)\n\n          rdr\n          (rt/source-logging-push-back-reader config-txt)]\n\n      (edn/read reader-opts rdr))\n\n    (catch :default ex\n      (throw (ex-info\n               (format \"Failed to read config file: %s\\n%s\" config-path (.-message ex))\n               {:config-path config-path} ex)))))\n\n(defn read-user-config []\n  (let [config-path (path/resolve (os/homedir) \".shadow-cljs\" \"config.edn\")]\n    (when (fs/existsSync config-path)\n      (read-config* config-path))))\n\n(defn read-config [config-path opts]\n  (-> (read-config* config-path)\n      (merge-config-with-cli-opts opts)))\n\n(defn guess-node-package-manager [project-root config]\n  (or (get-in config [:node-modules :managed-by])\n      (let [yarn-lock (path/resolve project-root \"yarn.lock\")]\n        (when (fs/existsSync yarn-lock)\n          :yarn))\n      :npm))\n\n(defn check-project-install! [project-root config]\n  (let [package-json-file\n        (path/resolve project-root \"package.json\")]\n\n    (or (fs/existsSync (path/resolve \"node_modules\" \"shadow-cljs\"))\n        (and (fs/existsSync package-json-file)\n             (let [pkg (js->clj (js/require package-json-file))]\n               (or (get-in pkg [\"devDependencies\" \"shadow-cljs\"])\n                   (get-in pkg [\"dependencies\" \"shadow-cljs\"]))))\n\n        ;; not installed\n        (do (log \"shadow-cljs not installed in project.\")\n            (log \"\")\n\n            (if-not (rl-sync/keyInYN \"Add it now?\")\n              false\n              (let [[pkg-cmd pkg-args]\n                    (case (guess-node-package-manager project-root config)\n                      :yarn\n                      [\"yarn\" [\"add\" \"--dev\" \"shadow-cljs\"]]\n                      :npm\n                      [\"npm\" [\"install\" \"--save-dev\" \"shadow-cljs\"]])]\n\n                (log (str \"Running: \" pkg-cmd \" \" (str/join \" \" pkg-args)))\n\n                ;; npm installs into wrong location if no package.json is present\n                (when-not (fs/existsSync package-json-file)\n                  (fs/writeFileSync package-json-file \"{}\"))\n\n                (cp/spawnSync pkg-cmd (into-array pkg-args) #js {:cwd project-root\n                                                                 :stdio \"inherit\"})\n                true))))))\n\n;; FIXME: couldn't find a \"nice\" xml library to d this for me which wasn't total overkill\n;; only nice to have would be prettier output but since its for cursive to look at\n;; I don't really care.\n(defn generate-xml [struct]\n  (cond\n    (string? struct)\n    struct\n\n    (vector? struct)\n    (let [[tag attrs & more] struct\n          tag (name tag)]\n      (str \"<\" tag\n           (when (map? attrs)\n             (->> attrs\n                  (map (fn [[key value]]\n                         (let [ns (namespace key)]\n                           (str ns (when ns \":\") (name key) \"=\\\"\" value \"\\\"\")\n                           )))\n                  (str/join \" \")\n                  (str \" \")))\n           \">\"\n           (->> (if (map? attrs) more (rest struct))\n                (map generate-xml)\n                (str/join \"\"))\n           \"</\" tag \">\"))))\n\n(defn generate-pom [project-root config-path {:keys [source-paths dependencies] :as config} opts]\n  (let [pom-path\n        (path/resolve project-root \"pom.xml\")]\n\n    (when (or (not (fs/existsSync pom-path))\n              (rl-sync/keyInYN (str pom-path \" already exists. Overwrite?\")))\n\n      ;; FIXME: allow setting this in shadow-cljs.edn\n      (let [project-name (path/basename project-root)]\n\n        (fs/writeFileSync pom-path\n          (str \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n               \"<!-- generated by shadow-cljs pom, do not edit -->\\n\"\n               (generate-xml\n                 [:project {:xmlns \"http://maven.apache.org/POM/4.0.0\"\n                            :xmlns/xsi \"http://www.w3.org/2001/XMLSchema-instance\"\n                            :xsi/schemaLocation \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"}\n                  [:modelVersion \"4.0.0\"]\n                  [:groupId project-name]\n                  [:artifactId project-name]\n                  [:version \"0.0.1\"]\n                  [:name project-name]\n\n                  ;; FIXME: need config for this at some point, defaults from lein\n                  [:repositories\n                   [:repository\n                    [:id \"central\"]\n                    [:url \"https://repo1.maven.org/maven2/\"]\n                    [:snapshots [:enabled \"false\"]]\n                    [:releases [:enabled \"true\"]]]\n                   [:repository\n                    [:id \"clojars\"]\n                    [:url \"https://repo.clojars.org/\"]\n                    [:snapshots [:enabled \"true\"]]\n                    [:releases [:enabled \"true\"]]]]\n\n                  (->> (into [['thheller/shadow-cljs jar-version]] dependencies)\n                       (map (fn [[dep-sym dep-version & more]]\n                              (let [id (name dep-sym)\n                                    ns (or (namespace dep-sym) id)]\n                                [:dependency\n                                 [:groupId ns]\n                                 [:artifactId id]\n                                 [:version dep-version]])))\n                       (into [:dependencies]))\n\n                  (-> [:build]\n                      (conj [:sourceDirectory (first source-paths)])\n                      (cond->\n                        (seq (rest source-paths))\n                        (conj [:plugins\n                               [:plugin\n                                [:groupId \"org.codehaus.mojo\"]\n                                [:artifactId \"build-helper-maven-plugin\"]\n                                [:executions\n                                 [:execution\n                                  [:phase \"generate-sources\"]\n                                  [:goals [:goal \"add-source\"]]\n                                  [:configuration\n                                   (->> source-paths\n                                        (map (fn [path]\n                                               [:source path]))\n                                        (into [:sources]))]]]]])))])))))))\n\n;; can't do this because running the server on windows\n;; but running shadow-cljs via WSL won't find the PID\n;; and think that the server is dead\n(defn is-server-running? [server-pid]\n  (and (fs/existsSync server-pid)\n       (let [pid (-> (util/slurp server-pid)\n                     (js/parseInt 10))]\n         (try\n           ;; returns true if signal succeeded\n           (js/process.kill pid 0)\n           (catch :default e\n             ;; throws ESRCH or other errors if signal failed\n             ;; meaning the server isn't reachable\n             false\n             )))))\n\n(defn do-start [project-root config args opts]\n  (cond\n    (:deps config)\n    (run-clojure project-root config args opts)\n\n    (:lein config)\n    (run-lein project-root config args opts)\n\n    :else\n    (run-standalone project-root config args opts)))\n\n(defn print-classpath [project-root config opts]\n  (cond\n    (:deps config)\n    (let [clojure-args\n          (-> (get-clojure-args project-root config opts)\n              (conj \"-Spath\"))]\n\n      (if-not (is-windows?)\n        (run! project-root \"clojure\" clojure-args {})\n        (let [ps-args (into [\"-command\" \"clojure\"] (map powershell-escape) clojure-args)]\n          (run! project-root \"powershell\" ps-args {}))))\n\n    (:lein config)\n    (let [lein-args\n          (-> (get-lein-args config opts)\n              (conj \"classpath\"))]\n\n      (run! project-root \"lein\" lein-args {}))\n\n    :else\n    (let [classpath\n          (get-classpath project-root config)\n\n          classpath-str\n          (->> (:files classpath)\n               (concat (:source-paths config))\n               (str/join path/delimiter))]\n\n      (println classpath-str))))\n\n(defn ^:export main [args]\n\n  (try\n    (let [{:keys [action options] :as opts}\n          (opts/parse args)]\n\n      (cond\n        (or (:help options)\n            (= action :help))\n        (opts/help opts)\n\n        (= action :init)\n        (run-init opts)\n\n        :else\n        (let [config-path (ensure-config)]\n          (if-not config-path\n            (do (println \"Could not find shadow-cljs.edn config file.\")\n                (println \"To create one run:\")\n                (println \"  shadow-cljs init\"))\n\n            (let [project-root\n                  (path/dirname config-path)\n\n                  args\n                  (into [] args) ;; starts out as JS array\n\n                  user-config\n                  (read-user-config)\n\n                  config\n                  (read-config config-path opts)\n\n                  {:keys [cache-root version] :as config}\n                  (-> (merge defaults config)\n                      (cond->\n                        user-config\n                        (assoc :user-config user-config)))\n\n                  server-port-file\n                  (path/resolve project-root cache-root \"cli-repl.port\")\n\n                  server-pid-file\n                  (path/resolve project-root cache-root \"server.pid\")\n\n                  server-running?\n                  (and (fs/existsSync server-port-file)\n                       (fs/existsSync server-pid-file))]\n\n              (mkdirp/sync (path/resolve project-root cache-root))\n\n              (when (and (not server-running?) (fs/existsSync server-pid-file))\n                (log \"shadow-cljs - server pid exists but server appears to be dead, proceeding without server.\")\n                (fs/unlinkSync server-pid-file))\n\n              (log \"shadow-cljs - config:\" config-path \" cli version:\" version \" node:\" js/process.version)\n\n              (cond\n                (or (:cli-info options)\n                    (= :info action))\n                (print-cli-info project-root config-path config opts)\n\n                (= :pom action)\n                (generate-pom project-root config-path config opts)\n\n                (= :classpath action)\n                (print-classpath project-root config opts)\n\n                (= :start action)\n                (if server-running?\n                  (log \"shadow-cljs - server already running\")\n                  (server-start project-root config args opts))\n\n                (= :stop action)\n                (if-not server-running?\n                  (log \"shadow-cljs - server not running\")\n                  (server-stop project-root config server-port-file server-pid-file args opts))\n\n                (= :restart action)\n                (go (when server-running?\n                      (<! (server-stop project-root config server-port-file server-pid-file args opts)))\n                    (server-start project-root config args opts))\n\n                (and server-running? (not (:force-spawn options)))\n                (client/run project-root config server-port-file opts args\n                  #(do-start project-root config args opts))\n\n                :else\n                (do-start project-root config args opts)\n                ))))))\n    (catch :default ex\n      (print-error ex)\n      (js/process.exit 1))))\n"]}