["^ ","~:output",["^ ","~:js","goog.provide('thi.ng.typedarrays.core');\ngoog.require('cljs.core');\n/**\n * Returns true if JS runtime supports typed arrays\n */\nthi.ng.typedarrays.core.typed_arrays_supported_QMARK_ = (function thi$ng$typedarrays$core$typed_arrays_supported_QMARK_(){\nreturn (!(((window[\"ArrayBuffer\"]) == null)));\n});\nthi.ng.typedarrays.core.array_types = cljs.core.PersistentHashMap.fromArrays([\"Float64Array\",\"Uint8Array\",\"Int8Array\",\"Uint8ClampedArray\",\"Uint16Array\",\"Int16Array\",\"Uint32Array\",\"Float32Array\",\"Int32Array\"],[new cljs.core.Keyword(null,\"float64\",\"float64\",1881838306),new cljs.core.Keyword(null,\"uint8\",\"uint8\",956521151),new cljs.core.Keyword(null,\"int8\",\"int8\",-1834023920),new cljs.core.Keyword(null,\"uint8-clamped\",\"uint8-clamped\",1439331936),new cljs.core.Keyword(null,\"uint16\",\"uint16\",-588869202),new cljs.core.Keyword(null,\"int16\",\"int16\",-188764863),new cljs.core.Keyword(null,\"uint32\",\"uint32\",-418789486),new cljs.core.Keyword(null,\"float32\",\"float32\",-2119815775),new cljs.core.Keyword(null,\"int32\",\"int32\",1718804896)]);\n/**\n * Returns truthy value if the given arg is a typed array instance\n */\nthi.ng.typedarrays.core.typed_array_QMARK_ = (function thi$ng$typedarrays$core$typed_array_QMARK_(x){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"object\",goog.typeOf(x))){\nif(typeof x.BYTES_PER_ELEMENT === 'number'){\nreturn x.buffer;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.typedarrays.core.array_type = (function thi$ng$typedarrays$core$array_type(x){\nif(cljs.core.array_QMARK_(x)){\nreturn new cljs.core.Keyword(null,\"array\",\"array\",-2080713842);\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(x))){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(thi.ng.typedarrays.core.array_types,cljs.core.first(cljs.core.re_find(/((Uint|Int|Float)\\d+(Clamped)?Array)/,cljs.core.str.cljs$core$IFn$_invoke$arity$1(x.constructor))));\n} else {\nreturn null;\n}\n}\n});\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_arrays_supported_QMARK_)){\ncljs.core.run_BANG_((function (type){\nif(cljs.core.truth_((self[type]).prototype.slice)){\nreturn null;\n} else {\nreturn (self[type]).prototype.slice = (function (from,to){\nvar this$ = this;\nvar from__$1 = (((from < (0)))?((this$.length + from) | (0)):(from | (0)));\nvar to__$1 = (cljs.core.truth_(goog.isNumber(to))?(((to < (0)))?((this$.length + to) | (0)):(function (){var G__44302 = to;\nvar G__44303 = this$.length;\nreturn Math.min(G__44302,G__44303);\n})()):this$.length);\nvar len = (function (){var G__44304 = (to__$1 - from__$1);\nvar G__44305 = (0);\nreturn Math.max(G__44304,G__44305);\n})();\nvar ctor = this$.constructor;\nvar dest = new ctor(len);\nvar i_44331 = (0);\nwhile(true){\nif((i_44331 < len)){\n(dest[i_44331] = (this$[(from__$1 + i_44331)]));\n\nvar G__44333 = (i_44331 + (1));\ni_44331 = G__44333;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn dest;\n});\n}\n}),cljs.core.keys(thi.ng.typedarrays.core.array_types));\n} else {\n}\n/**\n * Creates a native Int8Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.int8 = (function thi$ng$typedarrays$core$int8(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Int8Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Int8Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Int8Array(len));\nvar i_44334 = (0);\nvar coll_44335 = size_or_coll;\nwhile(true){\nif((i_44334 < len)){\n(buf[i_44334] = cljs.core.first(coll_44335));\n\nvar G__44336 = (i_44334 + (1));\nvar G__44337 = cljs.core.next(coll_44335);\ni_44334 = G__44336;\ncoll_44335 = G__44337;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Int8Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.int8_view = (function thi$ng$typedarrays$core$int8_view(var_args){\nvar G__44309 = arguments.length;\nswitch (G__44309) {\ncase 1:\nreturn thi.ng.typedarrays.core.int8_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.int8_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.int8_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Int8Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.int8_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Int8Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.int8_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Uint8Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.uint8 = (function thi$ng$typedarrays$core$uint8(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Uint8Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Uint8Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Uint8Array(len));\nvar i_44339 = (0);\nvar coll_44340 = size_or_coll;\nwhile(true){\nif((i_44339 < len)){\n(buf[i_44339] = cljs.core.first(coll_44340));\n\nvar G__44341 = (i_44339 + (1));\nvar G__44342 = cljs.core.next(coll_44340);\ni_44339 = G__44341;\ncoll_44340 = G__44342;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Uint8Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.uint8_view = (function thi$ng$typedarrays$core$uint8_view(var_args){\nvar G__44312 = arguments.length;\nswitch (G__44312) {\ncase 1:\nreturn thi.ng.typedarrays.core.uint8_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.uint8_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.uint8_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Uint8Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.uint8_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Uint8Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.uint8_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Uint8ClampedArray of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.uint8_clamped = (function thi$ng$typedarrays$core$uint8_clamped(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Uint8ClampedArray(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Uint8ClampedArray(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Uint8ClampedArray(len));\nvar i_44344 = (0);\nvar coll_44345 = size_or_coll;\nwhile(true){\nif((i_44344 < len)){\n(buf[i_44344] = cljs.core.first(coll_44345));\n\nvar G__44346 = (i_44344 + (1));\nvar G__44347 = cljs.core.next(coll_44345);\ni_44344 = G__44346;\ncoll_44345 = G__44347;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Uint8ClampedArray view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.uint8_clamped_view = (function thi$ng$typedarrays$core$uint8_clamped_view(var_args){\nvar G__44314 = arguments.length;\nswitch (G__44314) {\ncase 1:\nreturn thi.ng.typedarrays.core.uint8_clamped_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.uint8_clamped_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.uint8_clamped_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Uint8ClampedArray(a.buffer));\n});\n\nthi.ng.typedarrays.core.uint8_clamped_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Uint8ClampedArray(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.uint8_clamped_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Int16Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.int16 = (function thi$ng$typedarrays$core$int16(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Int16Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Int16Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Int16Array(len));\nvar i_44349 = (0);\nvar coll_44350 = size_or_coll;\nwhile(true){\nif((i_44349 < len)){\n(buf[i_44349] = cljs.core.first(coll_44350));\n\nvar G__44351 = (i_44349 + (1));\nvar G__44352 = cljs.core.next(coll_44350);\ni_44349 = G__44351;\ncoll_44350 = G__44352;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Int16Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.int16_view = (function thi$ng$typedarrays$core$int16_view(var_args){\nvar G__44317 = arguments.length;\nswitch (G__44317) {\ncase 1:\nreturn thi.ng.typedarrays.core.int16_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.int16_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.int16_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Int16Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.int16_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Int16Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.int16_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Uint16Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.uint16 = (function thi$ng$typedarrays$core$uint16(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Uint16Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Uint16Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Uint16Array(len));\nvar i_44354 = (0);\nvar coll_44355 = size_or_coll;\nwhile(true){\nif((i_44354 < len)){\n(buf[i_44354] = cljs.core.first(coll_44355));\n\nvar G__44356 = (i_44354 + (1));\nvar G__44357 = cljs.core.next(coll_44355);\ni_44354 = G__44356;\ncoll_44355 = G__44357;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Uint16Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.uint16_view = (function thi$ng$typedarrays$core$uint16_view(var_args){\nvar G__44319 = arguments.length;\nswitch (G__44319) {\ncase 1:\nreturn thi.ng.typedarrays.core.uint16_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.uint16_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.uint16_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Uint16Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.uint16_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Uint16Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.uint16_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Int32Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.int32 = (function thi$ng$typedarrays$core$int32(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Int32Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Int32Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Int32Array(len));\nvar i_44359 = (0);\nvar coll_44360 = size_or_coll;\nwhile(true){\nif((i_44359 < len)){\n(buf[i_44359] = cljs.core.first(coll_44360));\n\nvar G__44361 = (i_44359 + (1));\nvar G__44362 = cljs.core.next(coll_44360);\ni_44359 = G__44361;\ncoll_44360 = G__44362;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Int32Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.int32_view = (function thi$ng$typedarrays$core$int32_view(var_args){\nvar G__44321 = arguments.length;\nswitch (G__44321) {\ncase 1:\nreturn thi.ng.typedarrays.core.int32_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.int32_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.int32_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Int32Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.int32_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Int32Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.int32_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Uint32Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.uint32 = (function thi$ng$typedarrays$core$uint32(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Uint32Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Uint32Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Uint32Array(len));\nvar i_44364 = (0);\nvar coll_44365 = size_or_coll;\nwhile(true){\nif((i_44364 < len)){\n(buf[i_44364] = cljs.core.first(coll_44365));\n\nvar G__44366 = (i_44364 + (1));\nvar G__44367 = cljs.core.next(coll_44365);\ni_44364 = G__44366;\ncoll_44365 = G__44367;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Uint32Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.uint32_view = (function thi$ng$typedarrays$core$uint32_view(var_args){\nvar G__44324 = arguments.length;\nswitch (G__44324) {\ncase 1:\nreturn thi.ng.typedarrays.core.uint32_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.uint32_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.uint32_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Uint32Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.uint32_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Uint32Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.uint32_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Float32Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.float32 = (function thi$ng$typedarrays$core$float32(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Float32Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Float32Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Float32Array(len));\nvar i_44369 = (0);\nvar coll_44370 = size_or_coll;\nwhile(true){\nif((i_44369 < len)){\n(buf[i_44369] = cljs.core.first(coll_44370));\n\nvar G__44371 = (i_44369 + (1));\nvar G__44372 = cljs.core.next(coll_44370);\ni_44369 = G__44371;\ncoll_44370 = G__44372;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Float32Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.float32_view = (function thi$ng$typedarrays$core$float32_view(var_args){\nvar G__44327 = arguments.length;\nswitch (G__44327) {\ncase 1:\nreturn thi.ng.typedarrays.core.float32_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.float32_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.float32_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Float32Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.float32_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Float32Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.float32_view.cljs$lang$maxFixedArity = 3;\n\n/**\n * Creates a native Float64Array of the given size or from `coll`\n *   If arg already is a typed array then a copy is created.\n */\nthi.ng.typedarrays.core.float64 = (function thi$ng$typedarrays$core$float64(size_or_coll){\nif(typeof size_or_coll === 'number'){\nreturn (new Float64Array(size_or_coll));\n} else {\nif(cljs.core.truth_(thi.ng.typedarrays.core.typed_array_QMARK_(size_or_coll))){\nreturn (new Float64Array(size_or_coll));\n} else {\nvar len = cljs.core.count(size_or_coll);\nvar buf = (new Float64Array(len));\nvar i_44374 = (0);\nvar coll_44375 = size_or_coll;\nwhile(true){\nif((i_44374 < len)){\n(buf[i_44374] = cljs.core.first(coll_44375));\n\nvar G__44376 = (i_44374 + (1));\nvar G__44377 = cljs.core.next(coll_44375);\ni_44374 = G__44376;\ncoll_44375 = G__44377;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn buf;\n\n}\n}\n});\n/**\n * Creates a Float64Array view of the given typed array's\n *   underlying ArrayBuffer, optionally from given byte offset\n *   and item length.\n */\nthi.ng.typedarrays.core.float64_view = (function thi$ng$typedarrays$core$float64_view(var_args){\nvar G__44330 = arguments.length;\nswitch (G__44330) {\ncase 1:\nreturn thi.ng.typedarrays.core.float64_view.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn thi.ng.typedarrays.core.float64_view.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.typedarrays.core.float64_view.cljs$core$IFn$_invoke$arity$1 = (function (a){\nreturn (new Float64Array(a.buffer));\n});\n\nthi.ng.typedarrays.core.float64_view.cljs$core$IFn$_invoke$arity$3 = (function (a,offset,len){\nreturn (new Float64Array(a.buffer,offset,len));\n});\n\nthi.ng.typedarrays.core.float64_view.cljs$lang$maxFixedArity = 3;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","thi/ng/typedarrays/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$thi.ng.typedarrays.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^O","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^J"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","thi/ng/typedarrays/core.cljs"],"~:compiled-at",1569960340621,"~:resource-name","thi/ng/typedarrays/core.cljs","~:warnings",[],"~:source","(ns thi.ng.typedarrays.core)\n\n(defn typed-arrays-supported?\n  \"Returns true if JS runtime supports typed arrays\"\n  [] (not (nil? (aget js/window \"ArrayBuffer\"))))\n\n(def ^:private array-types\n  {\"Uint8Array\"        :uint8\n   \"Uint8ClampedArray\" :uint8-clamped\n   \"Uint16Array\"       :uint16\n   \"Uint32Array\"       :uint32\n   \"Int8Array\"         :int8\n   \"Int16Array\"        :int16\n   \"Int32Array\"        :int32\n   \"Float32Array\"      :float32\n   \"Float64Array\"      :float64})\n\n(defn typed-array?\n  \"Returns truthy value if the given arg is a typed array instance\"\n  [x]\n  (if (= \"object\" (goog/typeOf x))\n    (if (number? (.-BYTES_PER_ELEMENT x))\n      (.-buffer x))))\n\n(defn array-type\n  [x]\n  (if (array? x)\n    :array\n    (if (typed-array? x)\n      (->> (.-constructor x)\n           str\n           (re-find #\"((Uint|Int|Float)\\d+(Clamped)?Array)\")\n           first\n           (get array-types)))))\n\n(when typed-arrays-supported?\n  (run!\n   (fn [type]\n     (when-not (.. (aget js/self type) -prototype -slice)\n       (set! (.. (aget js/self type) -prototype -slice)\n             (fn [from to]\n               (this-as this\n                 (let [from (if (neg? from)\n                              (int (+ (.-length this) from))\n                              (int from))\n                       to   (if (goog/isNumber to)\n                              (if (neg? to)\n                                (int (+ (.-length this) to))\n                                (Math/min to (.-length this)))\n                              (.-length this))\n                       len  (Math/max (- to from) 0)\n                       ctor (.-constructor this)\n                       dest (js* \"new ~{}(~{})\" ctor len)]\n                   (loop [i 0]\n                     (when (< i len)\n                       (aset dest i (aget this (+ from i)))\n                       (recur (inc i))))\n                   dest))))))\n   (keys array-types)))\n\n(defn int8\n  \"Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int8-view\n  \"Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int8Array. (.-buffer a)))\n  ([a offset len] (js/Int8Array. (.-buffer a) offset len)))\n\n(defn uint8\n  \"Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-view\n  \"Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8Array. (.-buffer a)))\n  ([a offset len] (js/Uint8Array. (.-buffer a) offset len)))\n\n(defn uint8-clamped\n  \"Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8ClampedArray. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-clamped-view\n  \"Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8ClampedArray. (.-buffer a)))\n  ([a offset len] (js/Uint8ClampedArray. (.-buffer a) offset len)))\n\n(defn int16\n  \"Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int16-view\n  \"Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int16Array. (.-buffer a)))\n  ([a offset len] (js/Int16Array. (.-buffer a) offset len)))\n\n(defn uint16\n  \"Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint16-view\n  \"Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint16Array. (.-buffer a)))\n  ([a offset len] (js/Uint16Array. (.-buffer a) offset len)))\n\n(defn int32\n  \"Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int32-view\n  \"Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int32Array. (.-buffer a)))\n  ([a offset len] (js/Int32Array. (.-buffer a) offset len)))\n\n(defn uint32\n  \"Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint32-view\n  \"Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint32Array. (.-buffer a)))\n  ([a offset len] (js/Uint32Array. (.-buffer a) offset len)))\n\n(defn float32\n  \"Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float32-view\n  \"Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float32Array. (.-buffer a)))\n  ([a offset len] (js/Float32Array. (.-buffer a) offset len)))\n\n(defn float64\n  \"Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float64Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float64Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float64Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float64-view\n  \"Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float64Array. (.-buffer a)))\n  ([a offset len] (js/Float64Array. (.-buffer a) offset len)))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["thi.ng.typedarrays.core/typed-arrays-supported?","js/window","thi.ng.typedarrays.core/array-types","thi.ng.typedarrays.core/typed-array?","x","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/typeOf","thi.ng.typedarrays.core/array-type","cljs.core/array?","cljs.core/re-find","cljs.core/first","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/run!","type","js/self","from","to","this","goog/isNumber","G__44302","G__44303","Math/min","len","G__44304","G__44305","Math/max","ctor","dest","i","cljs.core/keys","thi.ng.typedarrays.core/int8","size-or-coll","js/Int8Array","cljs.core/count","buf","coll","cljs.core/next","var_args","G__44309","thi.ng.typedarrays.core/int8-view","js/Error","a","offset","thi.ng.typedarrays.core/uint8","js/Uint8Array","G__44312","thi.ng.typedarrays.core/uint8-view","thi.ng.typedarrays.core/uint8-clamped","js/Uint8ClampedArray","G__44314","thi.ng.typedarrays.core/uint8-clamped-view","thi.ng.typedarrays.core/int16","js/Int16Array","G__44317","thi.ng.typedarrays.core/int16-view","thi.ng.typedarrays.core/uint16","js/Uint16Array","G__44319","thi.ng.typedarrays.core/uint16-view","thi.ng.typedarrays.core/int32","js/Int32Array","G__44321","thi.ng.typedarrays.core/int32-view","thi.ng.typedarrays.core/uint32","js/Uint32Array","G__44324","thi.ng.typedarrays.core/uint32-view","thi.ng.typedarrays.core/float32","js/Float32Array","G__44327","thi.ng.typedarrays.core/float32-view","thi.ng.typedarrays.core/float64","js/Float64Array","G__44330","thi.ng.typedarrays.core/float64-view"]]],"~:cache-keys",["~#cmap",[["^[","thi/ng/typedarrays/core.cljs"],[1569959626548,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^P","^O"]]],["^[","goog/math/math.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.array","~$goog.asserts"]]],["^[","goog/array/array.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A"]]],["^[","goog/debug/error.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/dom/nodetype.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/object/object.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],"~:SHADOW-TIMESTAMP",[1569627608000,1556316222000],["^[","goog/math/long.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","~$goog.reflect"]]],["^[","goog/string/internal.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/functions/functions.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/structs/map.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1@","^1A","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",[]]],["^[","goog/structs/structs.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1@","~$goog.object"]]],["^[","goog/string/string.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/string/stringbuffer.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/iter/iter.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1@","^1A","~$goog.functions","~$goog.math"]]],["^[","cljs/core.cljs"],[1556316222100,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["~$goog.math.Long","~$goog.math.Integer","^1H","^1N","^1@","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/uri/utils.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1@","^1A","^1H"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P"],"^Q",["^H",[]],"~:shadow/js-access-global",["^H",["window","Float64Array","Uint8Array","Int8Array","self","Uint8ClampedArray","Uint16Array","Int16Array","Error","Uint32Array","Float32Array","Int32Array"]],"^R",null,"~:defs",["^ ","~$uint16-view",["^ ","~:protocol-inline",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",169,"^8",7,"^9",169,"^:",18,"~:arglists",["^U",["~$quote",["^U",[["~$a"],["~$a","~$offset","~$len"]]]]],"~:doc","Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"~:arglists-meta",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/uint16-view","^6","thi/ng/typedarrays/core.cljs","^:",18,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"~:protocol-impl",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"~:methods",[["^ ","^2O",1,"^2N",false,"~:tag","~$js/Uint16Array"],["^ ","^2O",3,"^2N",false,"^2V","^2W"]],"^7",169,"^9",169,"^2P",3,"~:fn-var",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",84,"^8",7,"^9",84,"^:",12,"^2H",["^U",["^2I",["^U",[["~$size-or-coll"]]]]],"^2L","Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/uint8","^6","thi/ng/typedarrays/core.cljs","^:",12,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",84,"~:ret-tag","~$js/Uint8Array","^9",84,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$typed-arrays-supported?",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",3,"^8",7,"^9",3,"^:",30,"^2H",["^U",["^2I",["^U",[[]]]]],"^2L","Returns true if JS runtime supports typed arrays"],"^I","~$thi.ng.typedarrays.core/typed-arrays-supported?","^6","thi/ng/typedarrays/core.cljs","^:",30,"^2Q",["^U",[[]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",3,"^30","~$boolean","^9",3,"^2P",0,"^2X",true,"^2H",["^U",["^2I",["^U",[[]]]]],"^2L","Returns true if JS runtime supports typed arrays"],"~$uint8-clamped",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",107,"^8",7,"^9",107,"^:",20,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/uint8-clamped","^6","thi/ng/typedarrays/core.cljs","^:",20,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",107,"^30","~$js/Uint8ClampedArray","^9",107,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int32",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",176,"^8",7,"^9",176,"^:",12,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/int32","^6","thi/ng/typedarrays/core.cljs","^:",12,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",176,"^30","~$js/Int32Array","^9",176,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$uint32-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",215,"^8",7,"^9",215,"^:",18,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/uint32-view","^6","thi/ng/typedarrays/core.cljs","^:",18,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","~$js/Uint32Array"],["^ ","^2O",3,"^2N",false,"^2V","^3="]],"^7",215,"^9",215,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$int16",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",130,"^8",7,"^9",130,"^:",12,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/int16","^6","thi/ng/typedarrays/core.cljs","^:",12,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",130,"^30","~$js/Int16Array","^9",130,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$float32",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",222,"^8",7,"^9",222,"^:",14,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/float32","^6","thi/ng/typedarrays/core.cljs","^:",14,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",222,"^30","~$js/Float32Array","^9",222,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$array-types",["^ ","^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",7,"^8",16,"^9",7,"^:",27,"~:private",true],"^3E",true,"^I","~$thi.ng.typedarrays.core/array-types","^6","thi/ng/typedarrays/core.cljs","^:",27,"^8",1,"^7",7,"^9",7,"^2V","~$cljs.core/IMap"],"~$float64",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",245,"^8",7,"^9",245,"^:",14,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/float64","^6","thi/ng/typedarrays/core.cljs","^:",14,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",245,"^30","~$js/Float64Array","^9",245,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int32-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",192,"^8",7,"^9",192,"^:",17,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/int32-view","^6","thi/ng/typedarrays/core.cljs","^:",17,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^3:"],["^ ","^2O",3,"^2N",false,"^2V","^3:"]],"^7",192,"^9",192,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$array-type",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",25,"^8",7,"^9",25,"^:",17,"^2H",["^U",["^2I",["^U",[["~$x"]]]]]],"^I","~$thi.ng.typedarrays.core/array-type","^6","thi/ng/typedarrays/core.cljs","^:",17,"^2Q",["^U",[["~$x"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",25,"^30",["^H",["~$any","~$cljs.core/Keyword","~$clj-nil"]],"^9",25,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["~$x"]]]]]],"~$int8-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",77,"^8",7,"^9",77,"^:",16,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/int8-view","^6","thi/ng/typedarrays/core.cljs","^:",16,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","~$js/Int8Array"],["^ ","^2O",3,"^2N",false,"^2V","^3T"]],"^7",77,"^9",77,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint16",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",153,"^8",7,"^9",153,"^:",13,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/uint16","^6","thi/ng/typedarrays/core.cljs","^:",13,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",153,"^30","^2W","^9",153,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int8",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",61,"^8",7,"^9",61,"^:",11,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/int8","^6","thi/ng/typedarrays/core.cljs","^:",11,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",61,"^30","^3T","^9",61,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int16-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",146,"^8",7,"^9",146,"^:",17,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/int16-view","^6","thi/ng/typedarrays/core.cljs","^:",17,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^3@"],["^ ","^2O",3,"^2N",false,"^2V","^3@"]],"^7",146,"^9",146,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint32",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",199,"^8",7,"^9",199,"^:",13,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^I","~$thi.ng.typedarrays.core/uint32","^6","thi/ng/typedarrays/core.cljs","^:",13,"^2Q",["^U",[["^2Z"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",199,"^30","^3=","^9",199,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["^2Z"]]]]],"^2L","Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$float32-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",238,"^8",7,"^9",238,"^:",19,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/float32-view","^6","thi/ng/typedarrays/core.cljs","^:",19,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^3C"],["^ ","^2O",3,"^2N",false,"^2V","^3C"]],"^7",238,"^9",238,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$typed-array?",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",18,"^8",7,"^9",18,"^:",19,"^2H",["^U",["^2I",["^U",[["~$x"]]]]],"^2L","Returns truthy value if the given arg is a typed array instance"],"^I","~$thi.ng.typedarrays.core/typed-array?","^6","thi/ng/typedarrays/core.cljs","^:",19,"^2Q",["^U",[["~$x"]]],"^2T",null,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^7",18,"^30",["^H",["^3O","^3Q"]],"^9",18,"^2P",1,"^2X",true,"^2H",["^U",["^2I",["^U",[["~$x"]]]]],"^2L","Returns truthy value if the given arg is a typed array instance"],"~$float64-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",261,"^8",7,"^9",261,"^:",19,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/float64-view","^6","thi/ng/typedarrays/core.cljs","^:",19,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^3J"],["^ ","^2O",3,"^2N",false,"^2V","^3J"]],"^7",261,"^9",261,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8-clamped-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",123,"^8",7,"^9",123,"^:",25,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/uint8-clamped-view","^6","thi/ng/typedarrays/core.cljs","^:",25,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^37"],["^ ","^2O",3,"^2N",false,"^2V","^37"]],"^7",123,"^9",123,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8-view",["^ ","^2G",null,"^5",["^ ","^6","thi/ng/typedarrays/core.cljs","^7",100,"^8",7,"^9",100,"^:",17,"^2H",["^U",["^2I",["^U",[["~$a"],["~$a","^2J","^2K"]]]]],"^2L","Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]]],"^I","~$thi.ng.typedarrays.core/uint8-view","^6","thi/ng/typedarrays/core.cljs","^:",17,"^2M",["^ ","^2N",false,"^2O",3,"^2P",3,"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2R",["^U",[null,null]]],"^2Q",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2T",null,"^2O",3,"^2R",["^U",[null,null]],"^8",1,"^2N",false,"^2U",[["^ ","^2O",1,"^2N",false,"^2V","^31"],["^ ","^2O",3,"^2N",false,"^2V","^31"]],"^7",100,"^9",100,"^2P",3,"^2X",true,"^2H",["^U",[["~$a"],["~$a","^2J","^2K"]]],"^2L","Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."]],"^S",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^H",["~:int32","~:uint8-clamped","~:int16","~:float32","~:float64","~:else","~:uint16","~:array","~:int8","~:uint32","~:uint8"]],"~:order",["^4@","^4F","^4D","^4=","^4B","^4>","^4E","^4?","^4<","^4C","^4A"]],"^W",["^ "],"^X",["^ "],"^Y",["^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1;",[["^4J","~:static-fns"],true,["^4J","~:elide-asserts"],false,["^4J","~:optimize-constants"],null,["^4J","^12"],null,["^4J","~:external-config"],null,["^4J","~:tooling-config"],null,["^4J","~:emit-constants"],null,["^4J","~:load-tests"],null,["^4J","~:form-size-threshold"],null,["^4J","~:infer-externs"],true,["^4J","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4J","~:fn-invoke-direct"],null,["^4J","~:source-map"],"/dev/null"]]]