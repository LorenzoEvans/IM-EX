["^ ","~:output",["^ ","~:js","goog.provide('quil.util');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\n/**\n * Function that does nothing.\n */\nquil.util.no_fn = (function quil$util$no_fn(){\nreturn null;\n});\n/**\n * Internal state map used to initiate all sketches.\n */\nquil.util.initial_internal_state = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"frame-rate\",\"frame-rate\",-994918942),(60),new cljs.core.Keyword(null,\"looping?\",\"looping?\",78344245),true], null);\n/**\n * Returns the val associated with key in mappings or key directly if it\n *   is one of the vals in mappings. Otherwise throws an exception.\n */\nquil.util.resolve_constant_key = (function quil$util$resolve_constant_key(key,mappings){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(mappings,key))){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(mappings,key);\n} else {\nif(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([key]),cljs.core.vals(mappings)))){\nreturn key;\n} else {\nthrow (new Error([\"Expecting a keyword, got: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(key),\". Expected one of: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.vec(cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.keys(mappings))))].join('')));\n\n}\n}\n});\n/**\n * Returns the length of the longest key of map m. Assumes m's keys are strings\n * and returns 0 if map is empty:\n * (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n * (length-of-longest-key {}) ;=> 0\n */\nquil.util.length_of_longest_key = (function quil$util$length_of_longest_key(m){\nvar or__4131__auto__ = cljs.core.last(cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__40118_SHARP_){\nreturn p1__40118_SHARP_.length();\n}),cljs.core.keys(m))));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (0);\n}\n});\n/**\n * Generates a padding string starting concatting s with len times pad:\n * (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n * May be called without starting string s in which case it defaults to the\n * empty string and also without pad in which case it defaults to a single space\n */\nquil.util.gen_padding = (function quil$util$gen_padding(var_args){\nvar G__40123 = arguments.length;\nswitch (G__40123) {\ncase 1:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nquil.util.gen_padding.cljs$core$IFn$_invoke$arity$1 = (function (len){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3(\"\",len,\" \");\n});\n\nquil.util.gen_padding.cljs$core$IFn$_invoke$arity$2 = (function (len,pad){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3(\"\",len,pad);\n});\n\nquil.util.gen_padding.cljs$core$IFn$_invoke$arity$3 = (function (s,len,pad){\nif((len > (0))){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3([cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(pad)].join(''),(len - (1)),pad);\n} else {\nreturn s;\n}\n});\n\nquil.util.gen_padding.cljs$lang$maxFixedArity = 3;\n\nquil.util.print_definition_list = (function quil$util$print_definition_list(definitions){\nvar longest_key = quil.util.length_of_longest_key(definitions);\nreturn cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (longest_key){\nreturn (function (p__40151){\nvar vec__40156 = p__40151;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40156,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40156,(1),null);\nvar len = k.length();\nvar diff = (longest_key - len);\nvar pad = quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1(diff);\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([k,pad,\"- \",v], 0));\n});})(longest_key))\n,definitions));\n});\nquil.util.clj_compilation_QMARK_ = (function quil$util$clj_compilation_QMARK_(){\nreturn false;\n});\nquil.util.prepare_quil_name = (function quil$util$prepare_quil_name(const_keyword){\nreturn clojure.string.replace(clojure.string.upper_case(cljs.core.name(const_keyword)),/-/,\"_\");\n});\nquil.util.prepare_quil_clj_constants = (function quil$util$prepare_quil_clj_constants(constants){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__40162_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__40162_SHARP_,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([\"PConstants/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(quil.util.prepare_quil_name(p1__40162_SHARP_))].join(''))],null));\n}),constants));\n});\nquil.util.prepare_quil_cljs_constants = (function quil$util$prepare_quil_cljs_constants(constants){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__40168_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__40168_SHARP_,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"aget\",\"cljs.core/aget\",6345791,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(\"js\",\"p5.prototype\",\"js/p5.prototype\",-1153964427,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,quil.util.prepare_quil_name(p1__40168_SHARP_),null,(1),null))], 0))))],null));\n}),constants));\n});\nquil.util.make_quil_constant_map = (function quil$util$make_quil_constant_map(target,const_map_name,const_map){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),null,(1),null)),(new cljs.core.List(null,const_map_name,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(target,new cljs.core.Keyword(null,\"clj\",\"clj\",-660495428)))?quil.util.prepare_quil_clj_constants(const_map):quil.util.prepare_quil_cljs_constants(const_map)),null,(1),null))], 0))));\n});\n/**\n * In clojure it does unchecked-int and does nothing in cljs.\n *   Needed to handle colors in hex form in clojure.\n */\nquil.util.clj_unchecked_int = (function quil$util$clj_unchecked_int(v){\nreturn v;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","quil/util.cljc","~:line",2,"~:column",2,"~:end-line",2,"~:end-column",11,"~:doc","Utility fns"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$quil.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^P","~$cstr","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K",["^Y",["^U",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","quil/util.cljc"],"~:compiled-at",1569954522713,"~:resource-name","quil/util.cljc","~:warnings",[],"~:source","(ns ^{:doc \"Utility fns\"}\n quil.util\n  (:require [clojure.string :as cstr]))\n\n(defn no-fn\n  \"Function that does nothing.\"\n  [])\n\n(def initial-internal-state\n  \"Internal state map used to initiate all sketches.\"\n  {:frame-rate 60\n   :looping? true})\n\n#?(:clj\n   (defn callable? [value]\n     (or (fn? value)\n         (var? value))))\n\n#?(:clj\n   (defn absolute-path [path]\n     (-> (str path)\n         (java.io.File.)\n         (.getAbsolutePath))))\n\n#?(:clj\n   (defn int-like?\n     [val]\n     (let [t (type val)]\n       (or (= java.lang.Long t)\n           (= java.lang.Integer t)))))\n\n(defn resolve-constant-key\n  \"Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception.\"\n  [key mappings]\n  (cond\n    (get mappings key)            (get mappings key)\n    (some #{key} (vals mappings)) key\n\n    :else                         (throw (#?(:clj Exception.\n                                             :cljs js/Error.)\n                                          (str \"Expecting a keyword, got: \" key \". Expected one of: \" (vec (sort (keys mappings))))))))\n\n(defn- length-of-longest-key\n  \"Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\\\"foo\\\" 1 \\\"barr\\\" 2 \\\"bazzz\\\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\"\n  [m]\n  (or (last (sort (map #(.length %) (keys m))))\n      0))\n\n(defn- gen-padding\n  \"Generates a padding string starting concatting s with len times pad:\n   (gen-padding \\\"\\\" 5 \\\"b\\\") ;=> \\\"bbbbb\\\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space\"\n  ([len] (gen-padding \"\" len \" \"))\n  ([len pad] (gen-padding \"\" len pad))\n  ([s len pad]\n   (if (> len 0)\n     (gen-padding (str s pad) (dec len) pad)\n     s)))\n\n(defn print-definition-list\n  [definitions]\n  (let [longest-key (length-of-longest-key definitions)]\n    (dorun\n     (map (fn [[k v]]\n            (let [len (.length k)\n                  diff (- longest-key len)\n                  pad (gen-padding diff)]\n              (println k pad \"- \" v)))\n          definitions))))\n\n(defn clj-compilation? []\n  #?(:clj\n     (not\n      (boolean\n       (when-let [n (find-ns 'cljs.analyzer)]\n         (when-let [v (ns-resolve n '*cljs-file*)]\n           @v))))\n     :cljs false))\n\n(defn prepare-quil-name [const-keyword]\n  (cstr/replace\n   (cstr/upper-case (name const-keyword))\n   #\"-\" \"_\"))\n\n(defn prepare-quil-clj-constants [constants]\n  (into {}\n        (map\n         #(vector % (symbol (str \"PConstants/\" (prepare-quil-name %))))\n         constants)))\n\n(defn prepare-quil-cljs-constants [constants]\n  (into {}\n        (map\n         #(vector % `(aget js/p5.prototype ~(prepare-quil-name %)))\n         constants)))\n\n(defn make-quil-constant-map [target const-map-name const-map]\n  `(def ^{:private true}\n     ~const-map-name\n     ~(if (= target :clj)\n        (prepare-quil-clj-constants const-map)\n        (prepare-quil-cljs-constants const-map))))\n\n(defmacro generate-quil-constants [target & opts]\n  `(do\n     ~@(map\n        #(make-quil-constant-map target (first %) (second %))\n        (partition 2 opts))))\n\n(defn clj-unchecked-int\n  \"In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure.\"\n  [v]\n  #?(:clj (unchecked-int v) :cljs v))\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["quil.util/no-fn","quil.util/initial-internal-state","quil.util/resolve-constant-key","key","mappings","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/some","cljs.core/vals","js/Error","cljs.core/vec","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","quil.util/length-of-longest-key","m","or__4131__auto__","cljs.core/last","p1__40118#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","var_args","G__40123","quil.util/gen-padding","len","quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3","pad","s","quil.util/print-definition-list","definitions","longest-key","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","p__40151","vec__40156","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","diff","quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","quil.util/clj-compilation?","quil.util/prepare-quil-name","const-keyword","clojure.string/replace","clojure.string/upper-case","cljs.core/name","quil.util/prepare-quil-clj-constants","constants","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__40162#","cljs.core/PersistentVector","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","quil.util/prepare-quil-cljs-constants","p1__40168#","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","quil.util/make-quil-constant-map","target","const-map-name","const-map","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quil.util/clj-unchecked-int"]]],"~:cache-keys",["~#cmap",[["^14","goog/math/math.js"],[1559507890775,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/array/array.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1F"]]],["^14","goog/debug/error.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/dom/nodetype.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/object/object.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],"~:SHADOW-TIMESTAMP",[1568955172000,1556316222000],["^14","goog/math/long.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1F","~$goog.reflect"]]],["^14","goog/string/internal.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/functions/functions.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/structs/map.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/asserts/asserts.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1E","^1F","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","goog/base.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",[]]],["^14","goog/structs/structs.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1E","~$goog.object"]]],["^14","clojure/string.cljs"],[1556316222100,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^R","^1M","~$goog.string.StringBuffer"]]],["^14","goog/string/string.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","~$goog.string.internal"]]],["^14","goog/reflect/reflect.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/string/stringbuffer.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/iter/iter.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1E","^1F","~$goog.functions","~$goog.math"]]],["^14","cljs/core.cljs"],[1556316222100,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["~$goog.math.Long","~$goog.math.Integer","^1M","^1S","^1E","~$goog.Uri","^1T"]]],["^14","goog/math/integer.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S"]]],["^14","goog/uri/utils.js"],[1559507890775,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^1E","^1F","^1M"]]],["^14","quil/util.cljc"],[1569953590486,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^S","^R","^P"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","quil/util.cljc","^7",2,"^8",2,"^9",2,"^:",11,"^;","Utility fns"],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U"]],"~:shadow/js-access-global",["^I",["Error","p5"]],"^V",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","quil/util.cljc","^7",76,"^8",7,"^9",76,"^:",23,"~:arglists",["^Y",["~$quote",["^Y",[[]]]]]],"^J","~$quil.util/clj-compilation?","^6","quil/util.cljc","^:",23,"~:method-params",["^Y",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"~:variadic?",false,"^7",76,"~:ret-tag","~$boolean","^9",76,"~:max-fixed-arity",0,"~:fn-var",true,"^2M",["^Y",["^2N",["^Y",[[]]]]]],"~$make-quil-constant-map",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",102,"^8",7,"^9",102,"^:",29,"^2M",["^Y",["^2N",["^Y",[["~$target","~$const-map-name","~$const-map"]]]]]],"^J","~$quil.util/make-quil-constant-map","^6","quil/util.cljc","^:",29,"^2P",["^Y",[["^2Y","^2Z","^2["]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",102,"^2T",["^I",["~$seq","~$cljs.core/IList"]],"^9",102,"^2V",3,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^2Y","^2Z","^2["]]]]]],"~$clj-unchecked-int",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",115,"^8",7,"^9",115,"^:",24,"^2M",["^Y",["^2N",["^Y",[["~$v"]]]]],"^;","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^J","~$quil.util/clj-unchecked-int","^6","quil/util.cljc","^:",24,"^2P",["^Y",[["~$v"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",115,"^9",115,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["~$v"]]]]],"^;","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^5",["^ ","^6","quil/util.cljc","^7",9,"^8",6,"^9",9,"^:",28],"^J","~$quil.util/initial-internal-state","^6","quil/util.cljc","^:",28,"^8",1,"^7",9,"^9",9,"~:tag","~$cljs.core/IMap","^;","Internal state map used to initiate all sketches."],"~$print-definition-list",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",65,"^8",7,"^9",65,"^:",28,"^2M",["^Y",["^2N",["^Y",[["~$definitions"]]]]]],"^J","~$quil.util/print-definition-list","^6","quil/util.cljc","^:",28,"^2P",["^Y",[["^3:"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",65,"^2T","~$clj-nil","^9",65,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^3:"]]]]]],"~$resolve-constant-key",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",32,"^8",7,"^9",32,"^:",27,"^2M",["^Y",["^2N",["^Y",[["~$key","~$mappings"]]]]],"^;","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^J","~$quil.util/resolve-constant-key","^6","quil/util.cljc","^:",27,"^2P",["^Y",[["^3>","^3?"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",32,"^2T",["^I",[null,"~$any","^3<"]],"^9",32,"^2V",2,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^3>","^3?"]]]]],"^;","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$no-fn",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",5,"^8",7,"^9",5,"^:",12,"^2M",["^Y",["^2N",["^Y",[[]]]]],"^;","Function that does nothing."],"^J","~$quil.util/no-fn","^6","quil/util.cljc","^:",12,"^2P",["^Y",[[]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",5,"^2T","^3<","^9",5,"^2V",0,"^2W",true,"^2M",["^Y",["^2N",["^Y",[[]]]]],"^;","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",90,"^8",7,"^9",90,"^:",33,"^2M",["^Y",["^2N",["^Y",[["~$constants"]]]]]],"^J","~$quil.util/prepare-quil-clj-constants","^6","quil/util.cljc","^:",33,"^2P",["^Y",[["^3E"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",90,"^2T",["^I",[null,"~$clj","^3A"]],"^9",90,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^3E"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",96,"^8",7,"^9",96,"^:",34,"^2M",["^Y",["^2N",["^Y",[["^3E"]]]]]],"^J","~$quil.util/prepare-quil-cljs-constants","^6","quil/util.cljc","^:",34,"^2P",["^Y",[["^3E"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",96,"^2T",["^I",[null,"^3G","^3A"]],"^9",96,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^3E"]]]]]],"~$length-of-longest-key",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",44,"^8",8,"^9",44,"^:",29,"~:private",true,"^2M",["^Y",["^2N",["^Y",[["~$m"]]]]],"^;","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^3K",true,"^J","~$quil.util/length-of-longest-key","^6","quil/util.cljc","^:",29,"^2P",["^Y",[["~$m"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",44,"^2T",["^I",["^3A","~$number"]],"^9",44,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["~$m"]]]]],"^;","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^2L",null,"^5",["^ ","^3K",true,"^6","quil/util.cljc","^:",19,"~:top-fn",["^ ","^2S",false,"~:fixed-arity",3,"^2V",3,"^2P",["^Y",[["~$len"],["^3Q","~$pad"],["~$s","^3Q","^3R"]]],"^2M",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]],"^2R",["^Y",[null,null,null]]],"^8",8,"^7",53,"^9",53,"^2M",["^Y",["^2N",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]]]],"^;","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"^3K",true,"^J","~$quil.util/gen-padding","^6","quil/util.cljc","^:",19,"^3O",["^ ","^2S",false,"^3P",3,"^2V",3,"^2P",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]],"^2M",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]],"^2R",["^Y",[null,null,null]]],"^2P",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]],"^2Q",null,"^3P",3,"^2R",["^Y",[null,null,null]],"^8",1,"^2S",false,"~:methods",[["^ ","^3P",1,"^2S",false,"^37","^3A"],["^ ","^3P",2,"^2S",false,"^37","^3A"],["^ ","^3P",3,"^2S",false,"^37",["^I",[null,"^3A"]]]],"^7",53,"^9",53,"^2V",3,"^2W",true,"^2M",["^Y",[["^3Q"],["^3Q","^3R"],["~$s","^3Q","^3R"]]],"^;","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$prepare-quil-name",["^ ","^2L",null,"^5",["^ ","^6","quil/util.cljc","^7",85,"^8",7,"^9",85,"^:",24,"^2M",["^Y",["^2N",["^Y",[["~$const-keyword"]]]]]],"^J","~$quil.util/prepare-quil-name","^6","quil/util.cljc","^:",24,"^2P",["^Y",[["^3V"]]],"^2Q",null,"^2R",["^Y",[null,null]],"^8",1,"^2S",false,"^7",85,"^2T","^3A","^9",85,"^2V",1,"^2W",true,"^2M",["^Y",["^2N",["^Y",[["^3V"]]]]]]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:frame-rate","~:else","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^3Y","^3[","^3Z","^42","^40","^43","^41"]],"^10",["^ ","^U",["^I",[]]],"^11",["^ "],"^12",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1@",[["^47","~:static-fns"],true,["^47","~:elide-asserts"],false,["^47","~:optimize-constants"],null,["^47","^17"],null,["^47","~:external-config"],null,["^47","~:tooling-config"],null,["^47","~:emit-constants"],null,["^47","~:load-tests"],null,["^47","~:form-size-threshold"],null,["^47","~:infer-externs"],true,["^47","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^47","~:fn-invoke-direct"],null,["^47","~:source-map"],"/dev/null"]]]