{"version":3,"sources":["shadow/cljs/npm/util.cljs"],"mappings":";;;;AAKA,AAAA,AAAMA,AAAOC;AAAb,AACM,AAACC,AAAgBD,AACjB;;AAEN,AAAA,AAAME,AAAUC,AAAKC,AAAUC;AAA/B,AACE,AAACC,AAAOF,AAAUD,AAAKE;;AAEzB,AAAA,AAAME,AAAUC,AAAEC;AAAlB,AACE,AAAI,AAAA,AAAMD;AAAV,AACIC;;AACF,AAACC,AAAKF,AAAEC;;;AAEZ,AAAA,AAAME,AAAeC;AAArB,AAGE,AAAOA","names":["shadow.cljs.npm.util/slurp","file","js/shadow.js.shim.module$fs.readFileSync","shadow.cljs.npm.util/reduce->","init","reduce-fn","coll","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","shadow.cljs.npm.util/conj-set","x","y","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.util/kill-proc","proc"],"sourcesContent":["(ns shadow.cljs.npm.util\n  (:require\n    [\"child_process\" :as cp]\n    [\"fs\" :as fs]))\n\n(defn slurp [file]\n  (-> (fs/readFileSync file)\n      (.toString)))\n\n(defn reduce-> [init reduce-fn coll]\n  (reduce reduce-fn init coll))\n\n(defn conj-set [x y]\n  (if (nil? x)\n    #{y}\n    (conj x y)))\n\n(defn kill-proc [^js proc]\n  ;; the java process should now always exit cleanly when the node process is killed\n  ;; so we just kill the node process to let the jvm shutdown cleanly\n  (.kill proc)\n  #_(case js/process.platform\n      \"win32\"\n      (cp/spawnSync \"taskkill\" #js [\"/pid\" (.-pid proc) \"/f\" #_\"/t\"])\n\n      (.kill proc)\n      ))"]}