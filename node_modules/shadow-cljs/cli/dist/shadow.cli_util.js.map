{"version":3,"sources":["shadow/cli_util.cljc"],"mappings":"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","names":["p__50519","map__50520","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cli-util/validate-flags","flags","state","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","check-flag","kw-flag","or__4131__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/reduced","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/assoc-in","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__50570","map__50571","shadow.cli-util/validate-options","options","cljs.core/reduce-kv","opt-key","opt-vals","map__50578","multiple","parse","opt-config","cljs.core/name","cljs.core/count","and__4120__auto__","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/first","p__50586","map__50587","shadow.cli-util/validate-arguments","args-mode","command","arguments","cljs.core/contains?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","shadow.cli-util/validate-command","task","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","shadow.cli-util/conj-vec","x","y","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.cli-util/start-command","command-config","vec__50607","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5733__auto__","alias","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__50633","map__50641","shadow.cli-util/parse-next","remaining","map__50654","next","next-state","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/rest","clojure.string/starts-with?","val-idx","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","key","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","value","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","char","s","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__50677","map__50678","shadow.cli-util/merge-flags","aliases","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/vals","p__50686","map__50688","shadow.cli-util/normalize-config","commands","config","m","k","v","p__50703","map__50704","shadow.cli-util/parse-args","init-command","args","norm-config","G__50707","map__50711","map__50716","G__50712","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq"],"sourcesContent":["(ns shadow.cli-util\n  (:require\n    [clojure.string :as str]\n    [clojure.set :as set]))\n\n(defn validate-flags [{:keys [flags] :as state}]\n  (reduce\n    (fn [state check-flag]\n      (let [kw-flag (or (get-in state [:command-config :flags check-flag])\n                        (get-in state [:command-config :aliases check-flag])\n                        (get-in state [:config :flags check-flag])\n                        (get-in state [:config :aliases check-flag]))]\n        (if-not kw-flag\n          (reduced (assoc state :error {:code :invalid-flag :msg (str \"Unknown argument '\" check-flag \"'.\")}))\n          (-> state\n              (assoc-in [:options kw-flag] true)\n              (update :flags conj kw-flag)))))\n    (assoc state :flags #{})\n    flags))\n\n(defn validate-options [{:keys [options] :as state}]\n  (reduce-kv\n    (fn [state opt-key opt-vals]\n      (let [{:keys [multiple parse] :as opt-config}\n            (or (get-in state [:command-config :options opt-key])\n                (get-in state [:config :options opt-key]))]\n        (cond\n          (not opt-config)\n          (reduced (assoc state :error {:code :invalid-option :msg (str \"Unknown argument '\" (name opt-key) \"'.\")}))\n\n          (and (not multiple) (> (count opt-vals) 1))\n          (reduced (assoc state :error {:code :duplicated-option :msg (str \"Argument '\" (name opt-key) \"' provided multiple times.\")}))\n\n          (and multiple parse)\n          (assoc-in state [:options opt-key] (into [] (map parse) opt-vals))\n\n          multiple\n          (assoc-in state [:options opt-key] opt-vals)\n\n          :else\n          (assoc-in state [:options opt-key] (first opt-vals))\n          )))\n    (assoc state :options {})\n    options))\n\n(defn validate-arguments [{:keys [args-mode command arguments] :as state}]\n  (cond\n    (not (contains? state :args-mode))\n    state\n\n    ;; :none will have failed earlier\n\n    (and (= :single args-mode) (empty? arguments))\n    (assoc state :error {:code :missing-argument :msg (str \"Command '\" (name command) \"' requires an argument.\")})\n\n    (and (= :at-least-one args-mode) (empty? arguments))\n    (assoc state :error {:code :missing-arguments :msg (str \"Command '\" (name command) \"' requires at least one argument.\")})\n\n    :else\n    (dissoc state :args-mode)))\n\n(defn validate-command [state]\n  (-> (reduce\n        (fn [state task]\n          (if (:error state)\n            (reduced state)\n            (task state)))\n        state\n        [validate-arguments\n         validate-options\n         validate-flags])\n      (dissoc :command-config :config :remaining)))\n\n(defn conj-vec [x y]\n  (if (nil? x)\n    [y]\n    (conj x y)))\n\n(defn start-command [state command]\n  (let [command-config (get-in state [:config :commands command])]\n    (if-not command-config\n      (assoc state :error {:code :unknown-command\n                           :command command\n                           :msg (str \"Unknown command '\" (name command) \"'.\")})\n      (let [[command command-config]\n            (if-let [alias (:alias-of command-config)]\n              [alias (get-in state [:config :commands alias])]\n              [command command-config])]\n        (assoc state\n          :command command\n          :command-config command-config\n          :arguments []\n          :args-mode (:args-mode command-config))))))\n\n(defn parse-next [{:keys [command arguments remaining] :as state}]\n  (let [next\n        (first remaining)\n\n        {:keys [args-mode] :as next-state}\n        (update state :remaining rest)]\n\n    (cond\n      ;; no further args parsing\n      (= :eat-all args-mode)\n      (update next-state :arguments conj next)\n\n      ;; long opts\n      ;; --foo flag\n      ;; --foo=bar with value\n      (str/starts-with? next \"--\")\n      (let [val-idx (str/index-of next \"=\")]\n        (if-not val-idx\n          (let [key (keyword (subs next 2))]\n            (update next-state :flags conj key))\n          (let [key (keyword (subs next 2 val-idx))\n                value (subs next (inc val-idx))]\n            (update-in next-state [:options key] conj-vec value))))\n\n      ;; short -oAl flag aliases\n      (str/starts-with? next \"-\")\n      (reduce\n        (fn [state char]\n          (let [s (str char)]\n            (update state :flags conj s)))\n        next-state\n        (subs next 1))\n\n      (and (= :single args-mode)\n           (= 1 (count arguments)))\n      (dissoc state :args-mode)\n\n      (= :none args-mode)\n      (-> state\n          (dissoc :args-mode)\n          (recur))\n\n      (or (= :at-least-one args-mode)\n          (= :single args-mode))\n      (update next-state :arguments conj next)\n\n      (and (nil? args-mode)\n           (nil? command))\n      (let [command (keyword next)]\n        (start-command next-state command))\n\n      (nil? args-mode)\n      (assoc next-state :error {:code :invalid-argument :msg (str \"Invalid argument '\" next \"'.\")})\n\n      :else\n      (throw (ex-info \"parser in unknown state\" state))\n      )))\n\n(defn merge-flags [{:keys [flags aliases] :as x}]\n  (assoc x :flags (set/union (set flags) (set (vals aliases)))))\n\n(defn normalize-config [{:keys [commands] :as config}]\n  (-> config\n      (merge-flags)\n      (assoc :commands (reduce-kv (fn [m k v]\n                                    (assoc m k (merge-flags v)))\n                         commands\n                         commands))))\n\n(defn parse-args [{:keys [init-command] :as config} args]\n  (let [norm-config (normalize-config config)]\n\n    (loop [{:keys [remaining] :as state}\n           (-> {:config norm-config\n                :input args\n                :remaining args}\n               (cond->\n                 init-command\n                 (start-command init-command)\n\n                 (not init-command)\n                 (merge {:command nil\n                         :arguments []\n                         :options {}\n                         :flags #{}})))]\n      (cond\n        (contains? state :error)\n        (dissoc state :config :args-mode :command-config :remaining)\n\n        (not (seq remaining))\n        (validate-command state)\n\n        :else\n        (-> state\n            (parse-next)\n            (recur))))))\n\n\n"]}