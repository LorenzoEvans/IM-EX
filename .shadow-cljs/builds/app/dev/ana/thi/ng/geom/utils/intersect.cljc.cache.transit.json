["^ ","~:output",["^ ","~:js","goog.provide('thi.ng.geom.utils.intersect');\ngoog.require('cljs.core');\ngoog.require('thi.ng.geom.core');\ngoog.require('thi.ng.geom.utils');\ngoog.require('thi.ng.geom.vector');\ngoog.require('thi.ng.math.core');\nthi.ng.geom.utils.intersect.sq = (function thi$ng$geom$utils$intersect$sq(x){\nreturn (x * x);\n});\nthi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_circle_circle_QMARK_(var_args){\nvar G__45327 = arguments.length;\nswitch (G__45327) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45328,p__45329){\nvar map__45330 = p__45328;\nvar map__45330__$1 = (((((!((map__45330 == null))))?(((((map__45330.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45330.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45330):map__45330);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45330__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45330__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar map__45332 = p__45329;\nvar map__45332__$1 = (((((!((map__45332 == null))))?(((((map__45332.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45332.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45332):map__45332);\nvar q = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45332__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45332__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4(p,r1,q,r2);\n});\n\nthi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p,r1,q,r2){\nvar delta = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(q,p);\nvar d = thi.ng.math.core.mag(delta);\nif((((d <= (r1 + r2))) && ((d >= (function (){var G__45342 = (r1 - r2);\nreturn (thi.ng.math.core.abs_STAR_.cljs$core$IFn$_invoke$arity$1 ? thi.ng.math.core.abs_STAR_.cljs$core$IFn$_invoke$arity$1(G__45342) : thi.ng.math.core.abs_STAR_.call(null,G__45342));\n})())))){\nvar a = ((((r1 * r1) - (r2 * r2)) + (d * d)) / (2.0 * d));\nvar invd = (1.0 / d);\nvar p__$1 = thi.ng.math.core.madd(delta,(a * invd),p);\nvar h = (function (){var G__45347 = ((r1 * r1) - (a * a));\nreturn Math.sqrt(G__45347);\n})();\nvar perp = thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2(thi.ng.geom.core.normal.cljs$core$IFn$_invoke$arity$1(delta),(h * invd));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p__$1,perp),thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p__$1,perp)], null);\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_rect_rect_QMARK_(var_args){\nvar G__45349 = arguments.length;\nswitch (G__45349) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45351,p__45352){\nvar map__45353 = p__45351;\nvar map__45353__$1 = (((((!((map__45353 == null))))?(((((map__45353.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45353.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45353):map__45353);\nvar vec__45354 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45353__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45354,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45354,(1),null);\nvar vec__45357 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45353__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45357,(0),null);\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45357,(1),null);\nvar map__45360 = p__45352;\nvar map__45360__$1 = (((((!((map__45360 == null))))?(((((map__45360.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45360.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45360):map__45360);\nvar vec__45361 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45360__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45361,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45361,(1),null);\nvar vec__45364 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45360__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar qw = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45364,(0),null);\nvar qh = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45364,(1),null);\nreturn (!((((px > (qx + qw))) || ((qx > (px + w))) || ((py > (qy + qh))) || ((qy > (py + h))))));\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__45378,p__45379,p__45380,p__45381){\nvar vec__45382 = p__45378;\nvar px1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45382,(0),null);\nvar py1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45382,(1),null);\nvar vec__45385 = p__45379;\nvar qx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45385,(0),null);\nvar qy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45385,(1),null);\nvar vec__45388 = p__45380;\nvar px2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45388,(0),null);\nvar py2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45388,(1),null);\nvar vec__45391 = p__45381;\nvar qx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45391,(0),null);\nvar qy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45391,(1),null);\nreturn (!((((px1 > qx2)) || ((px2 > qx1)) || ((py1 > qy2)) || ((py2 > qy1)))));\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_rect_circle_QMARK_(var_args){\nvar G__45397 = arguments.length;\nswitch (G__45397) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45398,p__45399){\nvar map__45400 = p__45398;\nvar map__45400__$1 = (((((!((map__45400 == null))))?(((((map__45400.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45400.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45400):map__45400);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45400__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sz = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45400__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__45401 = p__45399;\nvar map__45401__$1 = (((((!((map__45401 == null))))?(((((map__45401.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45401.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45401):map__45401);\nvar s = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45401__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45401__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4(p,thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,sz),s,r);\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__45404,p__45405,p__45406,r){\nvar vec__45407 = p__45404;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45407,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45407,(1),null);\nvar vec__45410 = p__45405;\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45410,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45410,(1),null);\nvar vec__45413 = p__45406;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45413,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45413,(1),null);\nvar ds = (((cx < px))?thi.ng.geom.utils.intersect.sq((cx - px)):(((cx > qx))?thi.ng.geom.utils.intersect.sq((cx - qx)):0.0));\nvar ds__$1 = (ds + (((cy < py))?thi.ng.geom.utils.intersect.sq((cy - py)):(((cy > qy))?thi.ng.geom.utils.intersect.sq((cy - qy)):0.0)));\nreturn (ds__$1 <= (r * r));\n});\n\nthi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_aabb_aabb_QMARK_(var_args){\nvar G__45417 = arguments.length;\nswitch (G__45417) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45422,p__45423){\nvar map__45424 = p__45422;\nvar map__45424__$1 = (((((!((map__45424 == null))))?(((((map__45424.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45424.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45424):map__45424);\nvar pa = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45424__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sa = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45424__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__45425 = p__45423;\nvar map__45425__$1 = (((((!((map__45425 == null))))?(((((map__45425.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45425.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45425):map__45425);\nvar pb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45425__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45425__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nreturn thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4(pa,pb,thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(pa,sa),thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(pb,sb));\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (pa,pb,qa,qb){\nif(((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((0)) : pa.call(null,(0))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((0)) : qb.call(null,(0))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((0)) : pb.call(null,(0))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((0)) : qa.call(null,(0))))))){\nif(((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((1)) : pa.call(null,(1))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((1)) : qb.call(null,(1))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((1)) : pb.call(null,(1))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((1)) : qa.call(null,(1))))))){\nreturn ((((pa.cljs$core$IFn$_invoke$arity$1 ? pa.cljs$core$IFn$_invoke$arity$1((2)) : pa.call(null,(2))) <= (qb.cljs$core$IFn$_invoke$arity$1 ? qb.cljs$core$IFn$_invoke$arity$1((2)) : qb.call(null,(2))))) && (((pb.cljs$core$IFn$_invoke$arity$1 ? pb.cljs$core$IFn$_invoke$arity$1((2)) : pb.call(null,(2))) <= (qa.cljs$core$IFn$_invoke$arity$1 ? qa.cljs$core$IFn$_invoke$arity$1((2)) : qa.call(null,(2))))));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_aabb_sphere_QMARK_(var_args){\nvar G__45434 = arguments.length;\nswitch (G__45434) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45436,p__45437){\nvar map__45438 = p__45436;\nvar map__45438__$1 = (((((!((map__45438 == null))))?(((((map__45438.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45438.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45438):map__45438);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45438__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar sz = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45438__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar map__45439 = p__45437;\nvar map__45439__$1 = (((((!((map__45439 == null))))?(((((map__45439.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45439.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45439):map__45439);\nvar s = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45439__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45439__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(p,thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,sz),s,r);\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p__45443,p__45444,p__45445,r){\nvar vec__45447 = p__45443;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45447,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45447,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45447,(2),null);\nvar vec__45450 = p__45444;\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45450,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45450,(1),null);\nvar qz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45450,(2),null);\nvar vec__45453 = p__45445;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45453,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45453,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45453,(2),null);\nvar ds = (((cx < px))?thi.ng.geom.utils.intersect.sq((cx - px)):(((cx > qx))?thi.ng.geom.utils.intersect.sq((cx - qx)):0.0));\nvar ds__$1 = (ds + (((cy < py))?thi.ng.geom.utils.intersect.sq((cy - py)):(((cy > qy))?thi.ng.geom.utils.intersect.sq((cy - qy)):0.0)));\nvar ds__$2 = (ds__$1 + (((cz < pz))?thi.ng.geom.utils.intersect.sq((cz - pz)):(((cz > qz))?thi.ng.geom.utils.intersect.sq((cz - qz)):0.0)));\nreturn (ds__$2 <= (r * r));\n});\n\nthi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\n/**\n * Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n *   parameters (each element [normal w]). The plane normals must be\n *   pointing *inwards*. Returns :inside, :intersect or :outside\n */\nthi.ng.geom.utils.intersect.intersect_aabb_frustum_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_aabb_frustum_QMARK_(p__45457,size,planes){\nvar vec__45458 = p__45457;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45458,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45458,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45458,(2),null);\nvar p = vec__45458;\nvar vec__45462 = thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,size);\nvar qx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45462,(0),null);\nvar qy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45462,(1),null);\nvar qz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45462,(2),null);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__45462,qx,qy,qz,vec__45458,px,py,pz,p){\nreturn (function (res,p__45465){\nvar vec__45467 = p__45465;\nvar vec__45470 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45467,(0),null);\nvar nx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45470,(0),null);\nvar ny = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45470,(1),null);\nvar nz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45470,(2),null);\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45467,(1),null);\nvar vx = (((nx > (0)))?px:qx);\nvar vy = (((ny > (0)))?py:qy);\nvar vz = (((nz > (0)))?pz:qz);\nif((((((nx * vx) + (ny * vy)) + (nz * vz)) + w) > (0))){\nreturn cljs.core.reduced(new cljs.core.Keyword(null,\"outside\",\"outside\",-13164995));\n} else {\nvar vx__$1 = (((nx > (0)))?qx:px);\nvar vy__$1 = (((ny > (0)))?qy:py);\nvar vz__$1 = (((nz > (0)))?qz:pz);\nif((((((nx * vx__$1) + (ny * vy__$1)) + (nz * vz__$1)) + w) > (0))){\nreturn new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392);\n} else {\nreturn res;\n}\n}\n});})(vec__45462,qx,qy,qz,vec__45458,px,py,pz,p))\n,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),planes);\n});\nthi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_sphere_sphere_QMARK_(var_args){\nvar G__45475 = arguments.length;\nswitch (G__45475) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45476,p__45477){\nvar map__45478 = p__45476;\nvar map__45478__$1 = (((((!((map__45478 == null))))?(((((map__45478.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45478.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45478):map__45478);\nvar p1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45478__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45478__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar map__45479 = p__45477;\nvar map__45479__$1 = (((((!((map__45479 == null))))?(((((map__45479.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45479.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45479):map__45479);\nvar p2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45479__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45479__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(p1,r1,p2,r2);\n});\n\nthi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p1,r1,p2,r2){\nreturn (thi.ng.geom.core.dist_squared(p1,p2) <= ((r1 + r2) * (r1 + r2)));\n});\n\nthi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_ray_sphere_QMARK_(var_args){\nvar G__45487 = arguments.length;\nswitch (G__45487) {\ncase 2:\nreturn thi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (p__45491,p__45492){\nvar map__45493 = p__45491;\nvar map__45493__$1 = (((((!((map__45493 == null))))?(((((map__45493.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45493.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45493):map__45493);\nvar rp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45493__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45493__$1,new cljs.core.Keyword(null,\"dir\",\"dir\",1734754661));\nvar map__45494 = p__45492;\nvar map__45494__$1 = (((((!((map__45494 == null))))?(((((map__45494.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__45494.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__45494):map__45494);\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45494__$1,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45494__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nreturn thi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4(rp,dir,p,r);\n});\n\nthi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (rp,dir,p,r){\nvar q = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p,rp);\nvar ds = thi.ng.math.core.mag_squared(q);\nvar v = (- thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(q,dir));\nvar d = ((r * r) - (ds - (v * v)));\nif((d >= 0.0)){\nvar d__$1 = Math.sqrt(d);\nvar a = (v + d__$1);\nvar b = (v - d__$1);\nif((!((((a < (0))) && ((b < (0))))))){\nif((((a > (0))) && ((b > (0))))){\nif((a > b)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n} else {\nif((b > (0))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_ray_triangle3_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_ray_triangle3_QMARK_(p,d,a,b,c){\nvar u = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(b,a);\nvar v = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(c,a);\nvar n = thi.ng.math.core.cross(u,v);\nif(cljs.core.truth_(thi.ng.geom.vector.V3.thi$ng$math$core$IDeltaEquals$delta_EQ_$arity$2(null,n))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"degenerate\",\"degenerate\",186148125)], null);\n} else {\nvar w0 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p,a);\nvar a_SINGLEQUOTE_ = (- thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(n,w0));\nvar b_SINGLEQUOTE_ = thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(n,d);\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(0.0,b_SINGLEQUOTE_))){\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(0.0,a_SINGLEQUOTE_))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"same-plane\",\"same-plane\",-2008485673)], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761)], null);\n}\n} else {\nvar r = (a_SINGLEQUOTE_ / b_SINGLEQUOTE_);\nif((r < 0.0)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761)], null);\n} else {\nvar i = thi.ng.math.core.madd(d,r,p);\nvar vec__45502 = thi.ng.geom.utils.triangle_barycentric_coords.cljs$core$IFn$_invoke$arity$6(a,b,c,i,u,v);\nvar u__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45502,(0),null);\nvar v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45502,(1),null);\nvar w = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45502,(2),null);\nif(cljs.core.truth_((function (){var and__4120__auto__ = (u__$1 >= 0.0);\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (w >= 0.0);\nif(and__4120__auto____$1){\nreturn thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3(0.0,1.0,v__$1);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"no-intersect\",\"no-intersect\",1400023761),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n}\n}\n}\n}\n});\nthi.ng.geom.utils.intersect.triaabb_axis_test = (function thi$ng$geom$utils$intersect$triaabb_axis_test(pa1,pb1,pa2,pb2,a,b,fa,fb,sa,sb){\nvar q = ((a * pa1) + (b * pb1));\nvar r = ((a * pa2) + (b * pb2));\nvar vec__45505 = (((q < r))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [q,r], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,q], null));\nvar min = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45505,(0),null);\nvar max = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45505,(1),null);\nvar rad = ((fa * sa) + (fb * sb));\nif((min <= rad)){\nreturn (max >= (- rad));\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.triaabb_edge_test_e0 = (function thi$ng$geom$utils$intersect$triaabb_edge_test_e0(p__45509,p__45510,p__45511,p__45512,p__45513){\nvar vec__45515 = p__45509;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45515,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45515,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45515,(2),null);\nvar a = vec__45515;\nvar vec__45518 = p__45510;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45518,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45518,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45518,(2),null);\nvar b = vec__45518;\nvar vec__45521 = p__45511;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45521,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45521,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45521,(2),null);\nvar vec__45524 = p__45512;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45524,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45524,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45524,(2),null);\nvar e = vec__45524;\nvar vec__45527 = p__45513;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45527,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45527,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45527,(2),null);\nvar vec__45530 = thi.ng.math.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45530,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45530,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45530,(2),null);\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ay,az,cy,cz,ez,(- ey),fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ax,az,cx,cz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.utils.intersect.triaabb_axis_test(bx,by,cx,cy,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.triaabb_edge_test_e1 = (function thi$ng$geom$utils$intersect$triaabb_edge_test_e1(p__45533,p__45534,p__45535,p__45536,p__45537){\nvar vec__45538 = p__45533;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45538,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45538,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45538,(2),null);\nvar vec__45541 = p__45534;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45541,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45541,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45541,(2),null);\nvar b = vec__45541;\nvar vec__45544 = p__45535;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45544,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45544,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45544,(2),null);\nvar c = vec__45544;\nvar vec__45547 = p__45536;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45547,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45547,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45547,(2),null);\nvar e = vec__45547;\nvar vec__45550 = p__45537;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45550,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45550,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45550,(2),null);\nvar vec__45554 = thi.ng.math.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45554,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45554,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45554,(2),null);\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ay,az,cy,cz,ez,ey,fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ax,az,cx,cz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.utils.intersect.triaabb_axis_test(ax,ay,bx,by,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.triaabb_edge_test_e2 = (function thi$ng$geom$utils$intersect$triaabb_edge_test_e2(p__45557,p__45558,p__45559,p__45560,p__45561){\nvar vec__45571 = p__45557;\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45571,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45571,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45571,(2),null);\nvar a = vec__45571;\nvar vec__45575 = p__45558;\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45575,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45575,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45575,(2),null);\nvar vec__45578 = p__45559;\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45578,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45578,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45578,(2),null);\nvar c = vec__45578;\nvar vec__45581 = p__45560;\nvar ex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45581,(0),null);\nvar ey = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45581,(1),null);\nvar ez = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45581,(2),null);\nvar e = vec__45581;\nvar vec__45584 = p__45561;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45584,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45584,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45584,(2),null);\nvar vec__45591 = thi.ng.math.core.abs(e);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45591,(0),null);\nvar fy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45591,(1),null);\nvar fz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45591,(2),null);\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ay,az,by,bz,ez,(- ey),fz,fy,sy,sz))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_axis_test(ax,az,bx,bz,(- ez),ex,fz,fx,sx,sz))){\nreturn thi.ng.geom.utils.intersect.triaabb_axis_test(bx,by,cx,cy,ey,(- ex),fy,fx,sx,sy);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.triaabb_edge_minmax = (function thi$ng$geom$utils$intersect$triaabb_edge_minmax(a,b,c,s){\nif(((function (){var x__4222__auto__ = (function (){var x__4222__auto__ = a;\nvar y__4223__auto__ = b;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = c;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})() < s)){\nreturn ((function (){var x__4219__auto__ = (function (){var x__4219__auto__ = a;\nvar y__4220__auto__ = b;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar y__4220__auto__ = c;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})() >= (- s));\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.intersect_triangle3_aabb_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_triangle3_aabb_QMARK_(a,b,c,p,s){\nvar vec__45594 = thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2(s,0.5);\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45594,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45594,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45594,(2),null);\nvar s__$1 = vec__45594;\nvar p__$1 = thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(p,s__$1);\nvar vec__45597 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(a,p__$1);\nvar ax = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45597,(0),null);\nvar ay = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45597,(1),null);\nvar az = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45597,(2),null);\nvar a__$1 = vec__45597;\nvar vec__45600 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(b,p__$1);\nvar bx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45600,(0),null);\nvar by = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45600,(1),null);\nvar bz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45600,(2),null);\nvar b__$1 = vec__45600;\nvar vec__45603 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(c,p__$1);\nvar cx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45603,(0),null);\nvar cy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45603,(1),null);\nvar cz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45603,(2),null);\nvar c__$1 = vec__45603;\nvar e0 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(b__$1,a__$1);\nvar e1 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(c__$1,b__$1);\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_test_e0(a__$1,b__$1,c__$1,e0,s__$1))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_test_e1(a__$1,b__$1,c__$1,e1,s__$1))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_test_e2(a__$1,b__$1,c__$1,thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(a__$1,c__$1),s__$1))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_minmax(ax,bx,cx,sx))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_minmax(ay,by,cy,sy))){\nif(cljs.core.truth_(thi.ng.geom.utils.intersect.triaabb_edge_minmax(az,bz,cz,sz))){\nvar G__45606 = a__$1;\nvar G__45607 = thi.ng.math.core.cross(e0,e1);\nvar G__45608 = s__$1;\nreturn (thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3 ? thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3(G__45606,G__45607,G__45608) : thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.call(null,G__45606,G__45607,G__45608));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nthi.ng.geom.utils.intersect.intersect_line2_line2_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_line2_line2_QMARK_(p__45610,p__45611,p__45612,p__45613){\nvar vec__45614 = p__45610;\nvar px1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45614,(0),null);\nvar py1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45614,(1),null);\nvar p = vec__45614;\nvar vec__45617 = p__45611;\nvar qx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45617,(0),null);\nvar qy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45617,(1),null);\nvar q = vec__45617;\nvar vec__45620 = p__45612;\nvar px2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45620,(0),null);\nvar py2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45620,(1),null);\nvar lp = vec__45620;\nvar vec__45623 = p__45613;\nvar qx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45623,(0),null);\nvar qy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45623,(1),null);\nvar lq = vec__45623;\nvar dx1 = (qx1 - px1);\nvar dy1 = (qy1 - py1);\nvar dx2 = (qx2 - px2);\nvar dy2 = (qy2 - py2);\nvar dx12 = (px1 - px2);\nvar dy12 = (py1 - py2);\nvar denom = ((dy2 * dx1) - (dx2 * dy1));\nvar na = ((dx2 * dy12) - (dy2 * dx12));\nvar nb = ((dx1 * dy12) - (dy1 * dx12));\nif((denom === (0))){\nif((((na === (0))) && ((nb === (0))))){\nvar ip = thi.ng.geom.utils.closest_point_on_segment(lp,p,q);\nvar iq = thi.ng.geom.utils.closest_point_on_segment(lq,p,q);\nif(cljs.core.truth_((function (){var or__4131__auto__ = thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(ip,lp);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2(iq,lq);\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"coincident\",\"coincident\",-473799301),new cljs.core.Keyword(null,\"p\",\"p\",151049309),ip,new cljs.core.Keyword(null,\"q\",\"q\",689001697),iq], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"coincident-no-intersect\",\"coincident-no-intersect\",1935247952),new cljs.core.Keyword(null,\"p\",\"p\",151049309),ip,new cljs.core.Keyword(null,\"q\",\"q\",689001697),iq], null);\n}\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128)], null);\n}\n} else {\nvar ua = (na / denom);\nvar ub = (nb / denom);\nvar i = thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$3(p,q,ua);\nif((((ua >= 0.0)) && ((ua <= 1.0)) && ((ub >= 0.0)) && ((ub <= 1.0)))){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i,new cljs.core.Keyword(null,\"ua\",\"ua\",834554218),ua,new cljs.core.Keyword(null,\"ub\",\"ub\",-1843904981),ub], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect-outside\",\"intersect-outside\",-337610558),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i,new cljs.core.Keyword(null,\"ua\",\"ua\",834554218),ua,new cljs.core.Keyword(null,\"ub\",\"ub\",-1843904981),ub], null);\n}\n}\n});\nthi.ng.geom.utils.intersect.intersect_line2_edges_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_line2_edges_QMARK_(rp,rq,edges){\nreturn cljs.core.first(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__45627){\nvar vec__45628 = p__45627;\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45628,(0),null);\nvar q = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45628,(1),null);\nreturn thi.ng.geom.utils.intersect.intersect_line2_line2_QMARK_(rp,rq,p,q);\n})),cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (p1__45626_SHARP_){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(p1__45626_SHARP_,new cljs.core.Keyword(null,\"p\",\"p\",151049309)))){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),null,new cljs.core.Keyword(null,\"coincident\",\"coincident\",-473799301),null], null), null),cljs.core.get.cljs$core$IFn$_invoke$arity$2(p1__45626_SHARP_,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)));\n} else {\nreturn null;\n}\n}))),cljs.core.completing.cljs$core$IFn$_invoke$arity$1((function (closest,isec){\nvar p = cljs.core.get.cljs$core$IFn$_invoke$arity$2(isec,new cljs.core.Keyword(null,\"p\",\"p\",151049309));\nvar d = thi.ng.geom.core.dist_squared(rp,p);\nif((d < (closest.cljs$core$IFn$_invoke$arity$1 ? closest.cljs$core$IFn$_invoke$arity$1((1)) : closest.call(null,(1))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p,d], null);\n} else {\nreturn closest;\n}\n})),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,thi.ng.math.core.INF_PLUS_], null),edges));\n});\nthi.ng.geom.utils.intersect.intersect_ray2_edges_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_ray2_edges_QMARK_(rp,rd,edges){\nreturn thi.ng.geom.utils.intersect.intersect_line2_edges_QMARK_(rp,thi.ng.math.core.madd(rd,1.0E29,rp),edges);\n});\nthi.ng.geom.utils.intersect.intersect_plane_plane_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_plane_plane_QMARK_(an,aw,bn,bw){\nif(cljs.core.truth_((function (){var or__4131__auto__ = thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(aw,bw,thi.ng.math.core._STAR_eps_STAR_);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(an,bn,thi.ng.math.core._STAR_eps_STAR_);\n}\n})())){\nreturn null;\n} else {\nvar od = thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(an,bn);\nvar det = ((1) / ((od * od) + (-1)));\nvar u = (((bw * od) + aw) * det);\nvar v = (((aw * od) + bw) * det);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),thi.ng.math.core.madd(an,u,thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2(bn,v)),new cljs.core.Keyword(null,\"dir\",\"dir\",1734754661),thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$2(an,bn)], null);\n}\n});\nthi.ng.geom.utils.intersect.intersect_ray_plane_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_ray_plane_QMARK_(rp,dir,n,w){\nvar dp = thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(n,dir);\nvar dn = (thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(n,rp) + w);\nif(cljs.core.truth_(thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3(0.0,dp,thi.ng.math.core._STAR_eps_STAR_))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),(((dn === (0)))?new cljs.core.Keyword(null,\"on-plane\",\"on-plane\",-1177899984):new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128))], null);\n} else {\nvar du = (- (dn / dp));\nvar i = thi.ng.math.core.madd(dir,du,rp);\nif(cljs.core.truth_(thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3(0.0,1.0,du))){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect\",\"intersect\",-2039792392),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"intersect-outside\",\"intersect-outside\",-337610558),new cljs.core.Keyword(null,\"p\",\"p\",151049309),i], null);\n}\n}\n});\n/**\n * Takes a point & normal defining a plane and 2 vectors defining an\n *   AABB (min-p & size). Returns true if plane intersects box.\n */\nthi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_plane_aabb_QMARK_(var_args){\nvar G__45633 = arguments.length;\nswitch (G__45633) {\ncase 4:\nreturn thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4 = (function (p,n,q,s){\nvar s2 = thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2(s,0.5);\nreturn thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3(thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p,thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2(q,s2)),n,s2);\n});\n\nthi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (p__45634,p__45635,p__45636){\nvar vec__45637 = p__45634;\nvar px = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45637,(0),null);\nvar py = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45637,(1),null);\nvar pz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45637,(2),null);\nvar vec__45640 = p__45635;\nvar nx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45640,(0),null);\nvar ny = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45640,(1),null);\nvar nz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45640,(2),null);\nvar n = vec__45640;\nvar vec__45643 = p__45636;\nvar sx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45643,(0),null);\nvar sy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45643,(1),null);\nvar sz = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45643,(2),null);\nvar vec__45646 = (((nx > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sx) - px),(sx - px)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sx - px),((- sx) - px)], null));\nvar vx1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45646,(0),null);\nvar vx2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45646,(1),null);\nvar vec__45649 = (((ny > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sy) - py),(sy - py)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sy - py),((- sy) - py)], null));\nvar vy1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45649,(0),null);\nvar vy2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45649,(1),null);\nvar vec__45652 = (((nz > (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((- sz) - pz),(sz - pz)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(sz - pz),((- sz) - pz)], null));\nvar vz1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45652,(0),null);\nvar vz2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45652,(1),null);\nif(((((nx * vx1) + (ny * vy1)) + (nz * vz1)) <= 0.0)){\nreturn ((((nx * vx2) + (ny * vy2)) + (nz * vz2)) >= 0.0);\n} else {\nreturn null;\n}\n});\n\nthi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$lang$maxFixedArity = 4;\n\nthi.ng.geom.utils.intersect.intersect_plane_sphere_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_plane_sphere_QMARK_(n,w,p,r){\nreturn ((function (){var G__45655 = (thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(n,p) + w);\nreturn (thi.ng.math.core.abs_STAR_.cljs$core$IFn$_invoke$arity$1 ? thi.ng.math.core.abs_STAR_.cljs$core$IFn$_invoke$arity$1(G__45655) : thi.ng.math.core.abs_STAR_.call(null,G__45655));\n})() <= r);\n});\n/**\n * Computes sum((a-b)*c), where a, b, c are 3D vectors.\n */\nthi.ng.geom.utils.intersect.subdot = (function thi$ng$geom$utils$intersect$subdot(a,b,c){\nvar d = thi.ng.math.core.subm(a,b,c);\nreturn (((d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((0)) : d.call(null,(0))) + (d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((1)) : d.call(null,(1)))) + (d.cljs$core$IFn$_invoke$arity$1 ? d.cljs$core$IFn$_invoke$arity$1((2)) : d.call(null,(2))));\n});\n/**\n * Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n *  Returns 2-elem vec of [bitmask affine-coords].\n */\nthi.ng.geom.utils.intersect.face_a = (function thi$ng$geom$utils$intersect$face_a(f,deltas){\nvar aff = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(f,deltas);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(((((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((0)) : aff.call(null,(0))) > (0)))?(1):(0)) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((1)) : aff.call(null,(1))) > (0)))?(2):(0))) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((2)) : aff.call(null,(2))) > (0)))?(4):(0))) | ((((aff.cljs$core$IFn$_invoke$arity$1 ? aff.cljs$core$IFn$_invoke$arity$1((3)) : aff.call(null,(3))) > (0)))?(8):(0))),aff], null);\n});\n/**\n * Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n *  Returns true if all dot products are positive.\n */\nthi.ng.geom.utils.intersect.face_b1_QMARK_ = (function thi$ng$geom$utils$intersect$face_b1_QMARK_(deltas,n){\nreturn cljs.core.every_QMARK_((function (p1__45656_SHARP_){\nreturn (thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(p1__45656_SHARP_,n) > (0));\n}),deltas);\n});\n/**\n * Like face-b1?, but optimized for last face of tetrahedron.\n */\nthi.ng.geom.utils.intersect.face_b2_QMARK_ = (function thi$ng$geom$utils$intersect$face_b2_QMARK_(verts,refv,n){\nreturn cljs.core.every_QMARK_((function (p1__45659_SHARP_){\nreturn (thi.ng.geom.utils.intersect.subdot(p1__45659_SHARP_,refv,n) > (0));\n}),verts);\n});\n/**\n * Takes 2 bitmasks and edge flags, returns true if there's a\n *  separating plane between the faces shared by that edge.\n */\nthi.ng.geom.utils.intersect.edge_a = (function thi$ng$geom$utils$intersect$edge_a(ma,mb,ea,eb){\nvar xa = (ma & (ma ^ mb));\nvar xb = (mb & (xa ^ mb));\nvar edge = ((function (xa,xb){\nreturn (function (a,b,i,j){\nvar cp = (((ea.cljs$core$IFn$_invoke$arity$1 ? ea.cljs$core$IFn$_invoke$arity$1(i) : ea.call(null,i)) * (eb.cljs$core$IFn$_invoke$arity$1 ? eb.cljs$core$IFn$_invoke$arity$1(j) : eb.call(null,j))) - ((ea.cljs$core$IFn$_invoke$arity$1 ? ea.cljs$core$IFn$_invoke$arity$1(j) : ea.call(null,j)) * (eb.cljs$core$IFn$_invoke$arity$1 ? eb.cljs$core$IFn$_invoke$arity$1(i) : eb.call(null,i))));\nreturn (((((cp > (0))) && (((xa | a) > (0))) && (((xb | b) > (0))))) || ((((cp < (0))) && (((xa | b) > (0))) && (((xb | a) > (0))))));\n});})(xa,xb))\n;\nreturn (!(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((15),(ma | mb))) || (edge((1),(2),(1),(0))) || (edge((1),(4),(2),(0))) || (edge((1),(8),(3),(0))) || (edge((2),(4),(2),(1))) || (edge((2),(8),(3),(1))) || (edge((4),(8),(3),(2))))));\n});\n/**\n * Lazy edge evaluation. Takes a vector of edges, vector of edge\n *  points and an edge id. Looks up edge for given id and if not yet\n *  present constructs it. Returns 2-elem vector of [edges edge].\n */\nthi.ng.geom.utils.intersect.get_edge = (function thi$ng$geom$utils$intersect$get_edge(edges,epoints,id){\nvar e = (edges.cljs$core$IFn$_invoke$arity$1 ? edges.cljs$core$IFn$_invoke$arity$1(id) : edges.call(null,id));\nif(cljs.core.truth_(e)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [edges,e], null);\n} else {\nvar ep = (epoints.cljs$core$IFn$_invoke$arity$1 ? epoints.cljs$core$IFn$_invoke$arity$1(id) : epoints.call(null,id));\nvar e__$1 = thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2((ep.cljs$core$IFn$_invoke$arity$1 ? ep.cljs$core$IFn$_invoke$arity$1((0)) : ep.call(null,(0))),(ep.cljs$core$IFn$_invoke$arity$1 ? ep.cljs$core$IFn$_invoke$arity$1((1)) : ep.call(null,(1))));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(edges,id,e__$1),e__$1], null);\n}\n});\n/**\n * Takes the 4 delta vectors between the two tetras, edge definitions\n *  of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n *  and a seq of specs, each encoding a specific check (either calls to\n *  face-a* or edge-a). Returns vector of bitmasks or nil if fail early.\n */\nthi.ng.geom.utils.intersect.check_faces_a = (function thi$ng$geom$utils$intersect$check_faces_a(deltas,epoints,verts,p,specs){\nvar masks = cljs.core.PersistentVector.EMPTY;\nvar affine = cljs.core.PersistentVector.EMPTY;\nvar edges = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null,null,null], null);\nvar s = specs;\nwhile(true){\nif(cljs.core.truth_(s)){\nvar vec__45675 = cljs.core.first(s);\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45675,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45675,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45675,(2),null);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),f)))){\nvar vec__45678 = thi.ng.geom.utils.intersect.get_edge(edges,epoints,a);\nvar edges__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45678,(0),null);\nvar ea = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45678,(1),null);\nvar vec__45681 = thi.ng.geom.utils.intersect.get_edge(edges__$1,epoints,b);\nvar edges__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45681,(0),null);\nvar eb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45681,(1),null);\nvar n = thi.ng.math.core.cross(ea,eb);\nvar vec__45684 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f))?thi.ng.geom.utils.intersect.face_a(((function (masks,affine,edges,s,vec__45678,edges__$1,ea,vec__45681,edges__$2,eb,n,vec__45675,f,a,b){\nreturn (function (p1__45661_SHARP_){\nreturn thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2(p1__45661_SHARP_,n);\n});})(masks,affine,edges,s,vec__45678,edges__$1,ea,vec__45681,edges__$2,eb,n,vec__45675,f,a,b))\n,deltas):thi.ng.geom.utils.intersect.face_a(((function (masks,affine,edges,s,vec__45678,edges__$1,ea,vec__45681,edges__$2,eb,n,vec__45675,f,a,b){\nreturn (function (p1__45662_SHARP_){\nreturn thi.ng.geom.utils.intersect.subdot(p1__45662_SHARP_,p,n);\n});})(masks,affine,edges,s,vec__45678,edges__$1,ea,vec__45681,edges__$2,eb,n,vec__45675,f,a,b))\n,verts));\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45684,(0),null);\nvar a__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45684,(1),null);\nif((m < (15))){\nvar G__45877 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(masks,m);\nvar G__45878 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(affine,a__$1);\nvar G__45879 = edges__$2;\nvar G__45880 = cljs.core.next(s);\nmasks = G__45877;\naffine = G__45878;\nedges = G__45879;\ns = G__45880;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nif((!(thi.ng.geom.utils.intersect.edge_a((masks.cljs$core$IFn$_invoke$arity$1 ? masks.cljs$core$IFn$_invoke$arity$1(a) : masks.call(null,a)),(masks.cljs$core$IFn$_invoke$arity$1 ? masks.cljs$core$IFn$_invoke$arity$1(b) : masks.call(null,b)),(affine.cljs$core$IFn$_invoke$arity$1 ? affine.cljs$core$IFn$_invoke$arity$1(a) : affine.call(null,a)),(affine.cljs$core$IFn$_invoke$arity$1 ? affine.cljs$core$IFn$_invoke$arity$1(b) : affine.call(null,b)))))){\nvar G__45881 = masks;\nvar G__45882 = affine;\nvar G__45883 = edges;\nvar G__45884 = cljs.core.next(s);\nmasks = G__45881;\naffine = G__45882;\nedges = G__45883;\ns = G__45884;\ncontinue;\n} else {\nreturn null;\n}\n}\n} else {\nreturn masks;\n}\nbreak;\n}\n});\n/**\n * Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n *  Returns true if tetras do intersect.\n */\nthi.ng.geom.utils.intersect.check_faces_b = (function thi$ng$geom$utils$intersect$check_faces_b(deltas,epoints,verts,p,specs){\nvar edges = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null,null,null], null);\nvar s = specs;\nwhile(true){\nif(cljs.core.truth_(s)){\nvar vec__45696 = cljs.core.first(s);\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45696,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45696,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45696,(2),null);\nvar vec__45699 = thi.ng.geom.utils.intersect.get_edge(edges,epoints,a);\nvar edges__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45699,(0),null);\nvar ea = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45699,(1),null);\nvar vec__45702 = thi.ng.geom.utils.intersect.get_edge(edges__$1,epoints,b);\nvar edges__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45702,(0),null);\nvar eb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45702,(1),null);\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),f))?thi.ng.geom.utils.intersect.face_b1_QMARK_(deltas,thi.ng.math.core.cross(ea,eb)):thi.ng.geom.utils.intersect.face_b2_QMARK_(verts,p,thi.ng.math.core.cross(ea,eb)))))){\nvar G__45885 = edges__$2;\nvar G__45886 = cljs.core.next(s);\nedges = G__45885;\ns = G__45886;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n});\n/**\n * Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n *  true if they intersect. Orientation of points is irrelevant (unlike\n *  in the original algorithm this implementation is based on).\n */\nthi.ng.geom.utils.intersect.intersect_tetrahedra_QMARK_ = (function thi$ng$geom$utils$intersect$intersect_tetrahedra_QMARK_(p__45708,p__45709){\nvar vec__45710 = p__45708;\nvar pa = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45710,(0),null);\nvar pb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45710,(1),null);\nvar pc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45710,(2),null);\nvar pd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45710,(3),null);\nvar p = vec__45710;\nvar vec__45713 = p__45709;\nvar qa = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45713,(0),null);\nvar qb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45713,(1),null);\nvar qc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45713,(2),null);\nvar qd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45713,(3),null);\nvar q = vec__45713;\nvar masks = thi.ng.geom.utils.intersect.check_faces_a(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (vec__45710,pa,pb,pc,pd,p,vec__45713,qa,qb,qc,qd,q){\nreturn (function (p1__45705_SHARP_){\nreturn thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p1__45705_SHARP_,pa);\n});})(vec__45710,pa,pb,pc,pd,p,vec__45713,qa,qb,qc,qd,q))\n,q),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pb,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pc,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pd,pa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pc,pb], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pd,pb], null)], null),q,pb,new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(2),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),(4),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(0),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(1),(3)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(2),(3)], null)], null));\nif(cljs.core.truth_(masks)){\nvar or__4131__auto__ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((15),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.bit_or,masks));\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nreturn thi.ng.geom.utils.intersect.check_faces_b(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (or__4131__auto__,masks,vec__45710,pa,pb,pc,pd,p,vec__45713,qa,qb,qc,qd,q){\nreturn (function (p1__45706_SHARP_){\nreturn thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2(p1__45706_SHARP_,qa);\n});})(or__4131__auto__,masks,vec__45710,pa,pb,pc,pd,p,vec__45713,qa,qb,qc,qd,q))\n,p),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qb,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qc,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qd,qa], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qc,qb], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qd,qb], null)], null),p,qb,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(0),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(2),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(1),(2)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"f*\",\"f*\",-689873734),(4),(3)], null)], null));\n}\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","thi/ng/geom/utils/intersect.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$thi.ng.geom.utils.intersect","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$thi.ng.geom.utils","^O","~$thi.ng.geom.core","^P","~$gu","^O","~$cljs.core","^R","~$v","~$thi.ng.geom.vector","~$goog","^T","~$thi.ng.math.core","^U","~$m","^U","^S","^S","~$g","^P"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$vec2","^S","~$vec3","^S","~$V2","^S","~$V3","^S","~$*eps*","^U"],"^X",["^ ","~$thi.ng.math.macros","^13","~$mm","^13","^R","^R"],"~:form",["~#list",["~$ns","^J",["^16",["^X",["^13","~:as","^14"]]],["^16",["^W",["^P","^18","~$g"],["^O","^18","^Q"],["^S","^18","~$v","~:refer",["^Z","^[","^10","^11"]],["^U","^18","~$m","^19",["^12"]]]]]],"~:flags",["^ ","^X",["^H",[]],"^W",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^R","^P","^O","^S","^U"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","thi/ng/geom/utils/intersect.cljc"],"~:compiled-at",1569963470919,"~:resource-name","thi/ng/geom/utils/intersect.cljc","~:warnings",[],"~:source","(ns thi.ng.geom.utils.intersect\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3 V2 V3]]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(declare intersect-plane-aabb?)\n\n(defn- sq [x] (* x x))\n\n(defn intersect-circle-circle?\n  ([{p :p r1 :r} {q :p r2 :r}]\n   (intersect-circle-circle? p r1 q r2))\n  ([p r1 q r2]\n   (let [delta (m/- q p)\n         d (m/mag delta)]\n     (when (and (<= d (+ r1 r2)) (>= d (m/abs* (- r1 r2))))\n       (let [a (/ (+ (- (* r1 r1) (* r2 r2)) (* d d)) (* 2.0 d))\n             invd (/ 1.0 d)\n             p (m/madd delta (* a invd) p)\n             h (Math/sqrt (- (* r1 r1) (* a a)))\n             perp (m/* (g/normal delta) (* h invd))]\n         [(m/+ p perp) (m/- p perp)])))))\n\n(defn intersect-rect-rect?\n  ([{[px py] :p [w h] :size} {[qx qy] :p [qw qh] :size}]\n   (not (or (> px (+ qx qw)) (> qx (+ px w)) (> py (+ qy qh)) (> qy (+ py h)))))\n  ([[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]\n   (not (or (> px1 qx2) (> px2 qx1) (> py1 qy2) (> py2 qy1)))))\n\n(defn intersect-rect-circle?\n  ([{p :p sz :size} {s :p r :r}]\n   (intersect-rect-circle? p (m/+ p sz) s r))\n  ([[px py] [qx qy] [cx cy] r]\n   (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n         ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))]\n     (<= ds (* r r)))))\n\n(defn intersect-aabb-aabb?\n  ([{pa :p sa :size} {pb :p sb :size}]\n   (intersect-aabb-aabb? pa pb (m/+ pa sa) (m/+ pb sb)))\n  ([pa pb qa qb]\n   (if (and (<= (pa 0) (qb 0)) (<= (pb 0) (qa 0)))\n     (if (and (<= (pa 1) (qb 1)) (<= (pb 1) (qa 1)))\n       (and (<= (pa 2) (qb 2)) (<= (pb 2) (qa 2)))))))\n\n;; Source: Graphics Gems 2 / SO:\n;; http://stackoverflow.com/questions/4578967\n\n(defn intersect-aabb-sphere?\n  ([{p :p sz :size} {s :p r :r}]\n   (intersect-aabb-sphere? p (m/+ p sz) s r))\n  ([[px py pz] [qx qy qz] [cx cy cz] r]\n   (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n         ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))\n         ds (+ ds (if (< cz pz) (sq (- cz pz)) (if (> cz qz) (sq (- cz qz)) 0.0)))]\n     (<= ds (* r r)))))\n\n(comment\n  ;; example usage\n\n  (isec/intersect-aabb-frustum?\n   box-p box-size\n   (mat/frustum-planes view-mat proj-mat)))\n\n;; https://groups.google.com/forum/#!topic/comp.graphics.algorithms/M6lvyWC6PqU\n\n(defn intersect-aabb-frustum?\n  \"Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside\"\n  [[px py pz :as p] size planes]\n  (let [[qx qy qz] (m/+ p size)]\n    (reduce\n     (fn [res [[nx ny nz] w]]\n       (let [vx (if (pos? nx) px qx)\n             vy (if (pos? ny) py qy)\n             vz (if (pos? nz) pz qz)]\n         (if (pos? (mm/madd nx vx ny vy nz vz w))\n           (reduced :outside)\n           (let [vx (if (pos? nx) qx px)\n                 vy (if (pos? ny) qy py)\n                 vz (if (pos? nz) qz pz)]\n             (if (pos? (mm/madd nx vx ny vy nz vz w))\n               :intersect\n               res)))))\n     :inside planes)))\n\n(defn intersect-sphere-sphere?\n  ([{p1 :p r1 :r} {p2 :p r2 :r}]\n   (intersect-sphere-sphere? p1 r1 p2 r2))\n  ([p1 r1 p2 r2]\n   (<= (g/dist-squared p1 p2) (mm/addm r1 r2 r1 r2))))\n\n(defn intersect-ray-sphere?\n  ([{rp :p dir :dir} {p :p r :r}]\n   (intersect-ray-sphere? rp dir p r))\n  ([rp dir p r]\n   (let [q (m/- p rp)\n         ds (m/mag-squared q)\n         v (- (m/dot q dir))\n         d (mm/msub r r (- ds (* v v)))]\n     (if (>= d 0.0)\n       (let [d (Math/sqrt d)\n             a (+ v d)\n             b (- v d)]\n         (if-not (and (< a 0) (< b 0))\n           (if (and (> a 0) (> b 0))\n             (if (> a b) [b a] [a b])\n             (if (> b 0) [b a] [a b]))\n           [a b]))))))\n\n;; Source: http://geomalgorithms.com/a06-_intersect-2.html\n\n(defn intersect-ray-triangle3?\n  [p d a b c]\n  (let [u (m/- b a)\n        v (m/- c a)\n        n (m/cross u v)]\n    (if (m/delta= V3 n)\n      {:type :degenerate}\n      (let [w0 (m/- p a)\n            a' (- (m/dot n w0))\n            b' (m/dot n d)]\n        (if (m/delta= 0.0 b')\n          (if (m/delta= 0.0 a')\n            {:type :same-plane}\n            {:type :no-intersect})\n          (let [r (/ a' b')]\n            (if (< r 0.0)\n              {:type :no-intersect}\n              (let [i (m/madd d r p)\n                    [u v w] (gu/triangle-barycentric-coords a b c i u v)]\n                (if (and (>= u 0.0) (>= w 0.0) (m/in-range? 0.0 1.0 v))\n                  {:type :intersect :p i}\n                  {:type :no-intersect :p i})))))))))\n\n;; Source:\n;; http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/code/tribox3.txt\n\n(defn- triaabb-axis-test\n  [pa1 pb1 pa2 pb2 a b fa fb sa sb]\n  (let [q (mm/madd a pa1 b pb1)\n        r (mm/madd a pa2 b pb2)\n        [min max] (if (< q r) [q r] [r q])\n        rad (mm/madd fa sa fb sb)]\n    (if (<= min rad) (>= max (- rad)))))\n\n(defn- triaabb-edge-test-e0\n  [[ax ay az :as a] [bx by bz :as b] [cx cy cz] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (m/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e1\n  [[ax ay az] [bx by bz :as b] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (m/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez ey fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test ax ay bx by ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e2\n  [[ax ay az :as a] [bx by bz] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (m/abs e)]\n    (if (triaabb-axis-test ay az by bz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az bx bz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-minmax\n  [a b c s]\n  (if (< (min (min a b) c) s)\n    (>= (max (max a b) c) (- s))))\n\n(defn intersect-triangle3-aabb?\n  [a b c p s]\n  (let [[sx sy sz :as s] (m/* s 0.5)\n        p (m/+ p s)\n        [ax ay az :as a] (m/- a p)\n        [bx by bz :as b] (m/- b p)\n        [cx cy cz :as c] (m/- c p)\n        e0 (m/- b a)\n        e1 (m/- c b)]\n    (if (triaabb-edge-test-e0 a b c e0 s)\n      (if (triaabb-edge-test-e1 a b c e1 s)\n        (if (triaabb-edge-test-e2 a b c (m/- a c) s)\n          (if (triaabb-edge-minmax ax bx cx sx)\n            (if (triaabb-edge-minmax ay by cy sy)\n              (if (triaabb-edge-minmax az bz cz sz)\n                (intersect-plane-aabb? a (m/cross e0 e1) s)))))))))\n\n(defn intersect-line2-line2?\n  [[px1 py1 :as p] [qx1 qy1 :as q]\n   [px2 py2 :as lp] [qx2 qy2 :as lq]]\n  (let [dx1 (- qx1 px1), dy1 (- qy1 py1)\n        dx2 (- qx2 px2), dy2 (- qy2 py2)\n        dx12 (- px1 px2), dy12 (- py1 py2)\n        denom (mm/msub dy2 dx1 dx2 dy1)\n        na (mm/msub dx2 dy12 dy2 dx12)\n        nb (mm/msub dx1 dy12 dy1 dx12)]\n    (if (zero? denom)\n      (if (and (zero? na) (zero? nb))\n        (let [ip (gu/closest-point-on-segment lp p q)\n              iq (gu/closest-point-on-segment lq p q)]\n          (if (or (m/delta= ip lp) (m/delta= iq lq))\n            {:type :coincident :p ip :q iq}\n            {:type :coincident-no-intersect :p ip :q iq}))\n        {:type :parallel})\n      (let [ua (/ na denom)\n            ub (/ nb denom)\n            i (m/mix p q ua)]\n        (if (and (>= ua 0.0) (<= ua 1.0) (>= ub 0.0) (<= ub 1.0))\n          {:type :intersect :p i :ua ua :ub ub}\n          {:type :intersect-outside :p i :ua ua :ub ub})))))\n\n(defn intersect-line2-edges?\n  [rp rq edges]\n  (->> edges\n       (transduce\n        (comp\n         (map (fn [[p q]] (intersect-line2-line2? rp rq p q)))\n         (filter #(if (get % :p) (get #{:intersect :coincident} (get % :type)))))\n        (completing\n         (fn [closest isec]\n           (let [p (get isec :p)\n                 d (g/dist-squared rp p)]\n             (if (< d (closest 1)) [p d] closest))))\n        [nil m/INF+])\n       (first)))\n\n(defn intersect-ray2-edges?\n  [rp rd edges]\n  (intersect-line2-edges? rp (m/madd rd 1e29 rp) edges))\n\n(defn intersect-plane-plane?\n  [an aw bn bw]\n  (when-not (or (m/delta= aw bw *eps*) (m/delta= an bn *eps*))\n    (let [od (m/dot an bn)\n          det (/ (mm/madd od od -1))\n          u (* (mm/madd bw od aw) det)\n          v (* (mm/madd aw od bw) det)]\n      {:p (m/madd an u (m/* bn v)) :dir (gu/ortho-normal an bn)})))\n\n(defn intersect-ray-plane?\n  [rp dir n w]\n  (let [dp (m/dot n dir)\n        dn (+ (m/dot n rp) w)]\n    (if (m/delta= 0.0 dp *eps*)\n      {:type (if (zero? dn) :on-plane :parallel)}\n      (let [du (- (/ dn dp))\n            i (m/madd dir du rp)]\n        (if (m/in-range? 0.0 1.0 du)\n          {:type :intersect :p i}\n          {:type :intersect-outside :p i})))))\n\n;; Source:\n;; http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/code/tribox3.txt\n\n(defn intersect-plane-aabb?\n  \"Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.\"\n  ([p n q s]\n   (let [s2 (m/* s 0.5)]\n     (intersect-plane-aabb? (m/- p (m/+ q s2)) n s2)))\n  ([[px py pz] [nx ny nz :as n] [sx sy sz]]\n   (let [[vx1 vx2] (if (pos? nx) [(- (- sx) px) (- sx px)] [(- sx px) (- (- sx) px)])\n         [vy1 vy2] (if (pos? ny) [(- (- sy) py) (- sy py)] [(- sy py) (- (- sy) py)])\n         [vz1 vz2] (if (pos? nz) [(- (- sz) pz) (- sz pz)] [(- sz pz) (- (- sz) pz)])]\n     (if (<= (mm/madd nx vx1 ny vy1 nz vz1) 0.0)\n       (>= (mm/madd nx vx2 ny vy2 nz vz2) 0.0)))))\n\n(defn intersect-plane-sphere?\n  [n w p r] (<= (m/abs* (+ (m/dot n p) w)) r))\n\n;; Tetrahedron intersection\n;; https://gist.github.com/postspectacular/9021724\n;; http://vcg.isti.cnr.it/Publications/2003/GPR03/fast_tetrahedron_tetrahedron_overlap_algorithm.pdf\n\n(defn- subdot\n  \"Computes sum((a-b)*c), where a, b, c are 3D vectors.\"\n  [a b c] (let [d (m/subm a b c)] (mm/add (d 0) (d 1) (d 2))))\n\n(defn- face-a\n  \"Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords].\"\n  [f deltas]\n  (let [aff (mapv f deltas)]\n    [(mm/bitmask pos? (aff 0) (aff 1) (aff 2) (aff 3)) aff]))\n\n(defn- face-b1?\n  \"Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive.\"\n  [deltas n] (every? #(pos? (m/dot % n)) deltas))\n\n(defn- face-b2?\n  \"Like face-b1?, but optimized for last face of tetrahedron.\"\n  [verts refv n] (every? #(pos? (subdot % refv n)) verts))\n\n(defn- edge-a\n  \"Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge.\"\n  [ma mb ea eb]\n  (let [xa (bit-and ma (bit-xor ma mb))\n        xb (bit-and mb (bit-xor xa mb))\n        edge (fn [a b i j]\n               (let [cp (mm/msub (ea i) (eb j) (ea j) (eb i))]\n                 (or (and (pos? cp) (pos? (bit-or xa a)) (pos? (bit-or xb b)))\n                     (and (neg? cp) (pos? (bit-or xa b)) (pos? (bit-or xb a))))))]\n    (not\n     (or\n      (not= 15 (bit-or ma mb))\n      (edge 1 2 1 0)\n      (edge 1 4 2 0)\n      (edge 1 8 3 0)\n      (edge 2 4 2 1)\n      (edge 2 8 3 1)\n      (edge 4 8 3 2)))))\n\n(defn- get-edge\n  \"Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge].\"\n  [edges epoints id]\n  (let [e (edges id)]\n    (if e\n      [edges e]\n      (let [ep (epoints id), e (m/- (ep 0) (ep 1))]\n        [(assoc edges id e) e]))))\n\n(defn- check-faces-a\n  \"Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early.\"\n  [deltas epoints verts p specs]\n  (loop [masks [], affine [], edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)]\n        (if (or (= :f f) (= :f* f))\n          (let [[edges ea] (get-edge edges epoints a)\n                [edges eb] (get-edge edges epoints b)\n                n (m/cross ea eb)\n                [m a] (if (= :f f)\n                        (face-a #(m/dot % n) deltas)\n                        (face-a #(subdot % p n) verts))]\n            (if (< m 15)\n              (recur (conj masks m) (conj affine a) edges (next s))))\n          (if-not (edge-a (masks a) (masks b) (affine a) (affine b))\n            (recur masks affine edges (next s)))))\n      masks)))\n\n(defn- check-faces-b\n  \"Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect.\"\n  [deltas epoints verts p specs]\n  (loop [edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)\n            [edges ea] (get-edge edges epoints a)\n            [edges eb] (get-edge edges epoints b)]\n        (if-not (if (= :f f)\n                  (face-b1? deltas (m/cross ea eb))\n                  (face-b2? verts p (m/cross ea eb)))\n          (recur edges (next s))))\n      true)))\n\n(defn intersect-tetrahedra?\n  \"Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on).\"\n  [[pa pb pc pd :as p] [qa qb qc qd :as q]]\n  (let [masks (check-faces-a\n               (map #(m/- % pa) q)\n               [[pb pa] [pc pa] [pd pa] [pc pb] [pd pb]]\n               q pb [[:f 0 1] [:f 2 0] [:e 0 1] [:f 1 2]\n                     [:e 0 2] [:e 1 2] [:f* 4 3] [:e 0 3]\n                     [:e 1 3] [:e 2 3]])]\n    (if masks\n      (or (not= 15 (reduce bit-or masks))\n          (check-faces-b\n           (map #(m/- % qa) p)\n           [[qb qa] [qc qa] [qd qa] [qc qb] [qd qb]]\n           p qb [[:f 0 1] [:f 2 0] [:f 1 2] [:f* 4 3]])))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["thi.ng.geom.utils.intersect/sq","x","var_args","G__45327","thi.ng.geom.utils.intersect/intersect-circle-circle?","js/Error","p__45328","p__45329","map__45330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__45332","p","r1","q","r2","thi.ng.geom.utils.intersect.intersect_circle_circle_QMARK_.cljs$core$IFn$_invoke$arity$4","delta","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","d","thi.ng.math.core/mag","G__45342","thi.ng.math.core/abs*","a","invd","thi.ng.math.core/madd","h","G__45347","Math/sqrt","perp","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.normal.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","G__45349","thi.ng.geom.utils.intersect/intersect-rect-rect?","p__45351","p__45352","map__45353","vec__45354","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__45357","map__45360","vec__45361","vec__45364","p__45378","p__45379","p__45380","p__45381","vec__45382","vec__45385","vec__45388","vec__45391","px","py","w","qx","qy","qw","qh","px1","py1","qx1","qy1","px2","py2","qx2","qy2","G__45397","thi.ng.geom.utils.intersect/intersect-rect-circle?","p__45398","p__45399","map__45400","map__45401","p__45404","p__45405","p__45406","vec__45407","vec__45410","vec__45413","sz","s","r","thi.ng.geom.utils.intersect.intersect_rect_circle_QMARK_.cljs$core$IFn$_invoke$arity$4","cx","cy","ds","G__45417","thi.ng.geom.utils.intersect/intersect-aabb-aabb?","p__45422","p__45423","map__45424","map__45425","pa","sa","pb","sb","thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$4","qa","qb","G__45434","thi.ng.geom.utils.intersect/intersect-aabb-sphere?","p__45436","p__45437","map__45438","map__45439","p__45443","p__45444","p__45445","vec__45447","vec__45450","vec__45453","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","pz","qz","cz","p__45457","vec__45458","thi.ng.geom.utils.intersect/intersect-aabb-frustum?","size","planes","vec__45462","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__45465","vec__45467","vec__45470","res","nx","ny","nz","vx","vy","vz","cljs.core/reduced","G__45475","thi.ng.geom.utils.intersect/intersect-sphere-sphere?","p__45476","p__45477","map__45478","map__45479","p1","p2","thi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","thi.ng.geom.core/dist-squared","G__45487","thi.ng.geom.utils.intersect/intersect-ray-sphere?","p__45491","p__45492","map__45493","map__45494","rp","dir","thi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_.cljs$core$IFn$_invoke$arity$4","thi.ng.math.core/mag-squared","v","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","b","thi.ng.geom.utils.intersect/intersect-ray-triangle3?","c","u","n","thi.ng.math.core/cross","thi.ng.geom.vector/V3","w0","a'","b'","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","vec__45502","i","thi.ng.geom.utils.triangle_barycentric_coords.cljs$core$IFn$_invoke$arity$6","and__4120__auto__","thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils.intersect/triaabb-axis-test","pa1","pb1","pa2","pb2","fa","fb","vec__45505","min","max","rad","p__45509","p__45510","p__45511","p__45512","p__45513","vec__45515","vec__45518","vec__45521","vec__45524","vec__45527","thi.ng.geom.utils.intersect/triaabb-edge-test-e0","ax","ay","az","bx","by","bz","ex","ey","ez","e","sx","sy","vec__45530","fx","fy","fz","thi.ng.math.core/abs","p__45533","p__45534","p__45535","p__45536","p__45537","vec__45538","vec__45541","vec__45544","vec__45547","vec__45550","thi.ng.geom.utils.intersect/triaabb-edge-test-e1","vec__45554","p__45557","p__45558","p__45559","p__45560","p__45561","vec__45571","vec__45575","vec__45578","vec__45581","vec__45584","thi.ng.geom.utils.intersect/triaabb-edge-test-e2","vec__45591","thi.ng.geom.utils.intersect/triaabb-edge-minmax","x__4222__auto__","y__4223__auto__","x__4219__auto__","y__4220__auto__","thi.ng.geom.utils.intersect/intersect-triangle3-aabb?","vec__45594","vec__45597","vec__45600","vec__45603","e0","e1","G__45606","G__45607","G__45608","thi.ng.geom.utils.intersect/intersect-plane-aabb?","p__45610","p__45611","p__45612","p__45613","vec__45614","vec__45617","vec__45620","vec__45623","thi.ng.geom.utils.intersect/intersect-line2-line2?","lp","lq","dx1","dy1","dx2","dy2","dx12","dy12","denom","na","nb","ip","thi.ng.geom.utils/closest-point-on-segment","iq","or__4131__auto__","ua","ub","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils.intersect/intersect-line2-edges?","rq","edges","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__45627","vec__45628","p1__45626#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.completing.cljs$core$IFn$_invoke$arity$1","closest","isec","thi.ng.math.core/INF+","cljs.core/first","thi.ng.geom.utils.intersect/intersect-ray2-edges?","rd","thi.ng.geom.utils.intersect/intersect-plane-plane?","an","aw","bn","bw","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*eps*","od","det","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.intersect/intersect-ray-plane?","dp","dn","du","G__45633","p__45634","p__45635","p__45636","vec__45637","vec__45640","vec__45643","s2","thi.ng.geom.utils.intersect.intersect_plane_aabb_QMARK_.cljs$core$IFn$_invoke$arity$3","vec__45646","vec__45649","vec__45652","vx1","vx2","vy1","vy2","vz1","vz2","thi.ng.geom.utils.intersect/intersect-plane-sphere?","G__45655","thi.ng.geom.utils.intersect/subdot","thi.ng.math.core/subm","thi.ng.geom.utils.intersect/face-a","f","deltas","aff","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.intersect/face-b1?","p1__45656#","cljs.core/every?","thi.ng.geom.utils.intersect/face-b2?","verts","refv","p1__45659#","thi.ng.geom.utils.intersect/edge-a","ma","mb","ea","eb","xa","xb","edge","j","cp","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.intersect/get-edge","epoints","id","ep","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils.intersect/check-faces-a","specs","masks","affine","vec__45675","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","vec__45678","vec__45681","vec__45684","m","p1__45661#","p1__45662#","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/next","thi.ng.geom.utils.intersect/check-faces-b","vec__45696","vec__45699","vec__45702","p__45708","p__45709","vec__45710","vec__45713","thi.ng.geom.utils.intersect/intersect-tetrahedra?","pc","pd","qc","qd","p1__45705#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/bit-or","p1__45706#"]]],"~:cache-keys",["~#cmap",[["^1>","thi/ng/xerror/core.cljc"],[1569959626590,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","^R"]]],["^1>","goog/math/math.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.array","~$goog.asserts"]]],["^1>","goog/array/array.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1P"]]],["^1>","goog/debug/error.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/dom/nodetype.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","thi/ng/math/core.cljc"],[1569959625673,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","goog/object/object.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],"~:SHADOW-TIMESTAMP",[1569627608000,1556316222000],["^1>","goog/math/long.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1P","~$goog.reflect"]]],["^1>","goog/string/internal.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","thi/ng/geom/utils/intersect.cljc"],[1569959626067,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^O","^S","^U"]]],["^1>","goog/functions/functions.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/structs/map.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/asserts/asserts.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","thi/ng/geom/vector.cljc"],[1569959626067,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^U","~$thi.ng.dstruct.streams","~$thi.ng.xerror.core"]]],["^1>","thi/ng/dstruct/core.cljc"],[1569959625696,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","thi/ng/geom/utils.cljc"],[1569959626067,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^P","^S","~$thi.ng.geom.types","~$thi.ng.dstruct.core","^U"]]],["^1>","thi/ng/geom/core.cljc"],[1569959626067,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R"]]],["^1>","goog/base.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",[]]],["^1>","goog/structs/structs.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","~$goog.object"]]],["^1>","thi/ng/dstruct/streams.cljc"],[1569959625696,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^22"]]],["^1>","goog/string/string.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","~$goog.string.internal"]]],["^1>","goog/reflect/reflect.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/string/stringbuffer.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/iter/iter.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","~$goog.functions","~$goog.math"]]],["^1>","thi/ng/geom/types.cljc"],[1569959626067,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^R","^S"]]],["^1>","cljs/core.cljs"],[1556316222100,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["~$goog.math.Long","~$goog.math.Integer","^1W","^25","^1O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1>","goog/math/integer.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T"]]],["^1>","goog/uri/utils.js"],[1559507890775,"^1K",["^ ","^1L",null,"^1M",["^H",[]],"^1N",["^T","^1O","^1P","^1W"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/dstruct/0.2.1/dstruct-0.2.1.jar!/thi/ng/dstruct/core.cljc",1569959625000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/geom/1.0.0-RC3/geom-1.0.0-RC3.jar!/thi/ng/geom/macros/vector.clj",1569959626000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/math/0.2.1/math-0.2.1.jar!/thi/ng/math/macros.clj",1569959625000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/thi/ng/xerror/0.1.0/xerror-0.1.0.jar!/thi/ng/xerror/core.cljc",1569959626000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^O","^R","^R","~$v","^S","^T","^T","^U","^U","~$m","^U","^S","^S","~$g","^P"],"^V",["^H",["^W","^X"]],"~:shadow/js-access-global",["^H",["Error"]],"^Y",["^ ","^Z","^S","^[","^S","^10","^S","^11","^S","^12","^U"],"~:defs",["^ ","~$triaabb-edge-test-e2",["^ ","~:protocol-inline",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",168,"^8",8,"^9",168,"^:",28,"~:private",true,"~:arglists",["^16",["~$quote",["^16",[[["~$ax","~$ay","~$az","^18","~$a"],["~$bx","~$by","~$bz"],["~$cx","~$cy","~$cz","^18","~$c"],["~$ex","~$ey","~$ez","^18","~$e"],["~$sx","~$sy","~$sz"]]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/triaabb-edge-test-e2","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"~:method-params",["^16",[["~$p__45557","~$p__45558","~$p__45559","~$p__45560","~$p__45561"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",168,"~:ret-tag",["^H",["~$boolean","~$clj-nil"]],"^9",168,"~:max-fixed-arity",5,"~:fn-var",true,"^34",["^16",["^35",["^16",[[["^36","^37","^38","^18","~$a"],["^39","^3:","^3;"],["^3<","^3=","^3>","^18","~$c"],["^3?","^3@","^3A","^18","~$e"],["^3B","^3C","^3D"]]]]]]],"~$face-b2?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",300,"^8",8,"^9",300,"^:",16,"^33",true,"^34",["^16",["^35",["^16",[["~$verts","~$refv","~$n"]]]]],"~:doc","Like face-b1?, but optimized for last face of tetrahedron."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/face-b2?","^6","thi/ng/geom/utils/intersect.cljc","^:",16,"^3F",["^16",[["^3U","^3V","~$n"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",300,"^3O","^3P","^9",300,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[["^3U","^3V","~$n"]]]]],"^3W","Like face-b1?, but optimized for last face of tetrahedron."],"~$intersect-plane-aabb?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",264,"^8",7,"^9",264,"^:",28,"^34",["^16",["^35",["^16",[["~$p","~$n","~$q","~$s"],[["~$px","~$py","~$pz"],["~$nx","~$ny","~$nz","^18","~$n"],["^3B","^3C","^3D"]]]]]],"^3W","Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.","~:top-fn",["^ ","^3N",false,"~:fixed-arity",4,"^3R",4,"^3F",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^34",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-plane-aabb?","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^34",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^3M",["^16",[null,null]]],"^3F",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"~:methods",[["^ ","^45",4,"^3N",false,"~:tag","~$any"],["^ ","^45",3,"^3N",false,"^48",["^H",["^3P","^3Q"]]]],"^7",264,"^9",264,"^3R",4,"^3S",true,"^34",["^16",[["~$p","~$n","~$q","~$s"],[["^3Z","^3[","^40"],["^41","^42","^43","^18","~$n"],["^3B","^3C","^3D"]]]],"^3W","Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box."],"~$intersect-aabb-aabb?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",44,"^8",7,"^9",44,"^:",27,"^34",["^16",["^35",["^16",[[["^ ","~$pa","~:p","~$sa","~:size"],["^ ","~$pb","~:p","~$sb","^4="]],["^4;","^4>","~$qa","~$qb"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]],"^34",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-aabb-aabb?","^6","thi/ng/geom/utils/intersect.cljc","^:",27,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]],"^34",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48",["^H",["^3P","^3Q"]]]],"^7",44,"^9",44,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","^4;","~:p","^4<","^4="],["^ ","^4>","~:p","^4?","^4="]],["^4;","^4>","^4@","^4A"]]]],"~$check-faces-b",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",357,"^8",8,"^9",357,"^:",21,"^33",true,"^34",["^16",["^35",["^16",[["~$deltas","~$epoints","^3U","~$p","~$specs"]]]]],"^3W","Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/check-faces-b","^6","thi/ng/geom/utils/intersect.cljc","^:",21,"^3F",["^16",[["^4D","^4E","^3U","~$p","^4F"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",357,"^3O",["^H",["^3P","^3Q"]],"^9",357,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[["^4D","^4E","^3U","~$p","^4F"]]]]],"^3W","Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."],"~$intersect-plane-plane?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",240,"^8",7,"^9",240,"^:",29,"^34",["^16",["^35",["^16",[["~$an","~$aw","~$bn","~$bw"]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-plane-plane?","^6","thi/ng/geom/utils/intersect.cljc","^:",29,"^3F",["^16",[["^4I","^4J","^4K","^4L"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",240,"^3O",["^H",["~$cljs.core/IMap","^3Q"]],"^9",240,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[["^4I","^4J","^4K","^4L"]]]]]],"~$sq",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",14,"^8",8,"^9",14,"^:",10,"^33",true,"^34",["^16",["^35",["^16",[["~$x"]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/sq","^6","thi/ng/geom/utils/intersect.cljc","^:",10,"^3F",["^16",[["~$x"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",14,"^3O","~$number","^9",14,"^3R",1,"^3S",true,"^34",["^16",["^35",["^16",[["~$x"]]]]]],"~$intersect-aabb-sphere?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",55,"^8",7,"^9",55,"^:",29,"^34",["^16",["^35",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["~$qx","~$qy","~$qz"],["^3<","^3=","^3>"],"~$r"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]],"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-aabb-sphere?","^6","thi/ng/geom/utils/intersect.cljc","^:",29,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]],"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48","^3P"]],"^7",55,"^9",55,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3[","^40"],["^4S","^4T","^4U"],["^3<","^3=","^3>"],"~$r"]]]],"~$intersect-circle-circle?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",16,"^8",7,"^9",16,"^:",31,"^34",["^16",["^35",["^16",[[["^ ","~$p","~:p","~$r1","~:r"],["^ ","~$q","~:p","~$r2","~:r"]],["~$p","^4X","~$q","^4Y"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]],"^34",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-circle-circle?","^6","thi/ng/geom/utils/intersect.cljc","^:",31,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]],"^34",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48",["^H",["~$cljs.core/IVector","^3Q"]]]],"^7",16,"^9",16,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","~$p","~:p","^4X","~:r"],["^ ","~$q","~:p","^4Y","~:r"]],["~$p","^4X","~$q","^4Y"]]]],"~$intersect-rect-rect?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",30,"^8",7,"^9",30,"^:",27,"^34",["^16",["^35",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["~$qw","~$qh"],"^4="]]],[["~$px1","~$py1"],["~$qx1","~$qy1"],["~$px2","~$py2"],["~$qx2","~$qy2"]]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]],"^34",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-rect-rect?","^6","thi/ng/geom/utils/intersect.cljc","^:",27,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]],"^34",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^3P"],["^ ","^45",4,"^3N",false,"^48","^3P"]],"^7",30,"^9",30,"^3R",4,"^3S",true,"^34",["^16",[[["^1J",[["^3Z","^3["],"~:p",["~$w","~$h"],"^4="]],["^1J",[["^4S","^4T"],"~:p",["^51","^52"],"^4="]]],[["^53","^54"],["^55","^56"],["^57","^58"],["^59","^5:"]]]]],"~$get-edge",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",324,"^8",8,"^9",324,"^:",16,"^33",true,"^34",["^16",["^35",["^16",[["~$edges","^4E","~$id"]]]]],"^3W","Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/get-edge","^6","thi/ng/geom/utils/intersect.cljc","^:",16,"^3F",["^16",[["^5=","^4E","^5>"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",324,"^3O","^4[","^9",324,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[["^5=","^4E","^5>"]]]]],"^3W","Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."],"~$check-faces-a",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",335,"^8",8,"^9",335,"^:",21,"^33",true,"^34",["^16",["^35",["^16",[["^4D","^4E","^3U","~$p","^4F"]]]]],"^3W","Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/check-faces-a","^6","thi/ng/geom/utils/intersect.cljc","^:",21,"^3F",["^16",[["^4D","^4E","^3U","~$p","^4F"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",335,"^3O",["^H",["~$clj","^4[","^3Q"]],"^9",335,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[["^4D","^4E","^3U","~$p","^4F"]]]]],"^3W","Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."],"~$edge-a",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",304,"^8",8,"^9",304,"^:",14,"^33",true,"^34",["^16",["^35",["^16",[["~$ma","~$mb","~$ea","~$eb"]]]]],"^3W","Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/edge-a","^6","thi/ng/geom/utils/intersect.cljc","^:",14,"^3F",["^16",[["^5D","^5E","^5F","^5G"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",304,"^3O","^3P","^9",304,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[["^5D","^5E","^5F","^5G"]]]]],"^3W","Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."],"~$intersect-ray-sphere?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",100,"^8",7,"^9",100,"^:",28,"^34",["^16",["^35",["^16",[[["^ ","~$rp","~:p","~$dir","~:dir"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]],"^34",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-ray-sphere?","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]],"^34",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48",["^H",["^4[","^3Q"]]]],"^7",100,"^9",100,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","^5J","~:p","^5K","^5L"],["^ ","~$p","~:p","~$r","~:r"]],["^5J","^5K","~$p","~$r"]]]],"~$intersect-ray-triangle3?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",120,"^8",7,"^9",120,"^:",31,"^34",["^16",["^35",["^16",[["~$p","~$d","~$a","~$b","~$c"]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-ray-triangle3?","^6","thi/ng/geom/utils/intersect.cljc","^:",31,"^3F",["^16",[["~$p","~$d","~$a","~$b","~$c"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",120,"^3O","^4N","^9",120,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[["~$p","~$d","~$a","~$b","~$c"]]]]]],"~$triaabb-edge-minmax",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",175,"^8",8,"^9",175,"^:",27,"^33",true,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c","~$s"]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/triaabb-edge-minmax","^6","thi/ng/geom/utils/intersect.cljc","^:",27,"^3F",["^16",[["~$a","~$b","~$c","~$s"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",175,"^3O",["^H",["^3P","^3Q"]],"^9",175,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c","~$s"]]]]]],"~$intersect-triangle3-aabb?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",180,"^8",7,"^9",180,"^:",32,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c","~$p","~$s"]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-triangle3-aabb?","^6","thi/ng/geom/utils/intersect.cljc","^:",32,"^3F",["^16",[["~$a","~$b","~$c","~$p","~$s"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",180,"^3O",["^H",["^49","^3Q"]],"^9",180,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c","~$p","~$s"]]]]]],"~$intersect-ray-plane?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",249,"^8",7,"^9",249,"^:",27,"^34",["^16",["^35",["^16",[["^5J","^5K","~$n","~$w"]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-ray-plane?","^6","thi/ng/geom/utils/intersect.cljc","^:",27,"^3F",["^16",[["^5J","^5K","~$n","~$w"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",249,"^3O","^4N","^9",249,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[["^5J","^5K","~$n","~$w"]]]]]],"~$intersect-ray2-edges?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",236,"^8",7,"^9",236,"^:",28,"^34",["^16",["^35",["^16",[["^5J","~$rd","^5="]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-ray2-edges?","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^3F",["^16",[["^5J","^5W","^5="]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",236,"^3O",["^H",["^49","^3Q"]],"^9",236,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[["^5J","^5W","^5="]]]]]],"~$subdot",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",284,"^8",8,"^9",284,"^:",14,"^33",true,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c"]]]]],"^3W","Computes sum((a-b)*c), where a, b, c are 3D vectors."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/subdot","^6","thi/ng/geom/utils/intersect.cljc","^:",14,"^3F",["^16",[["~$a","~$b","~$c"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",284,"^3O","^4Q","^9",284,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[["~$a","~$b","~$c"]]]]],"^3W","Computes sum((a-b)*c), where a, b, c are 3D vectors."],"~$intersect-tetrahedra?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",372,"^8",7,"^9",372,"^:",28,"^34",["^16",["^35",["^16",[[["^4;","^4>","~$pc","~$pd","^18","~$p"],["^4@","^4A","~$qc","~$qd","^18","~$q"]]]]]],"^3W","Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."],"^I","~$thi.ng.geom.utils.intersect/intersect-tetrahedra?","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^3F",["^16",[["~$p__45708","~$p__45709"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",372,"^3O",["^H",["^3P","^3Q"]],"^9",372,"^3R",2,"^3S",true,"^34",["^16",["^35",["^16",[[["^4;","^4>","^60","^61","^18","~$p"],["^4@","^4A","^62","^63","^18","~$q"]]]]]],"^3W","Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."],"~$intersect-sphere-sphere?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",94,"^8",7,"^9",94,"^:",31,"^34",["^16",["^35",["^16",[[["^ ","~$p1","~:p","^4X","~:r"],["^ ","~$p2","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]],"^34",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-sphere-sphere?","^6","thi/ng/geom/utils/intersect.cljc","^:",31,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]],"^34",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48","^3P"]],"^7",94,"^9",94,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","^68","~:p","^4X","~:r"],["^ ","^69","~:p","^4Y","~:r"]],["^68","^4X","^69","^4Y"]]]],"~$intersect-line2-line2?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",197,"^8",7,"^9",197,"^:",29,"^34",["^16",["^35",["^16",[[["^53","^54","^18","~$p"],["^55","^56","^18","~$q"],["^57","^58","^18","~$lp"],["^59","^5:","^18","~$lq"]]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-line2-line2?","^6","thi/ng/geom/utils/intersect.cljc","^:",29,"^3F",["^16",[["~$p__45610","~$p__45611","~$p__45612","~$p__45613"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",197,"^3O","^4N","^9",197,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[[["^53","^54","^18","~$p"],["^55","^56","^18","~$q"],["^57","^58","^18","^6<"],["^59","^5:","^18","^6="]]]]]]],"~$intersect-plane-sphere?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",277,"^8",7,"^9",277,"^:",30,"^34",["^16",["^35",["^16",[["~$n","~$w","~$p","~$r"]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-plane-sphere?","^6","thi/ng/geom/utils/intersect.cljc","^:",30,"^3F",["^16",[["~$n","~$w","~$p","~$r"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",277,"^3O","^3P","^9",277,"^3R",4,"^3S",true,"^34",["^16",["^35",["^16",[["~$n","~$w","~$p","~$r"]]]]]],"~$intersect-rect-circle?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",36,"^8",7,"^9",36,"^:",29,"^34",["^16",["^35",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]]]],"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]],"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]],"^3M",["^16",[null,null]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-rect-circle?","^6","thi/ng/geom/utils/intersect.cljc","^:",29,"^44",["^ ","^3N",false,"^45",4,"^3R",4,"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]],"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]],"^3M",["^16",[null,null]]],"^3F",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]],"^3L",null,"^45",4,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^47",[["^ ","^45",2,"^3N",false,"^48","^49"],["^ ","^45",4,"^3N",false,"^48","^3P"]],"^7",36,"^9",36,"^3R",4,"^3S",true,"^34",["^16",[[["^ ","~$p","~:p","^3D","^4="],["^ ","~$s","~:p","~$r","~:r"]],[["^3Z","^3["],["^4S","^4T"],["^3<","^3="],"~$r"]]]],"~$triaabb-edge-test-e1",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",161,"^8",8,"^9",161,"^:",28,"^33",true,"^34",["^16",["^35",["^16",[[["^36","^37","^38"],["^39","^3:","^3;","^18","~$b"],["^3<","^3=","^3>","^18","~$c"],["^3?","^3@","^3A","^18","~$e"],["^3B","^3C","^3D"]]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/triaabb-edge-test-e1","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^3F",["^16",[["~$p__45533","~$p__45534","~$p__45535","~$p__45536","~$p__45537"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",161,"^3O",["^H",["^3P","^3Q"]],"^9",161,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[[["^36","^37","^38"],["^39","^3:","^3;","^18","~$b"],["^3<","^3=","^3>","^18","~$c"],["^3?","^3@","^3A","^18","~$e"],["^3B","^3C","^3D"]]]]]]],"~$intersect-line2-edges?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",221,"^8",7,"^9",221,"^:",29,"^34",["^16",["^35",["^16",[["^5J","~$rq","^5="]]]]]],"^I","~$thi.ng.geom.utils.intersect/intersect-line2-edges?","^6","thi/ng/geom/utils/intersect.cljc","^:",29,"^3F",["^16",[["^5J","^6O","^5="]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",221,"^3O",["^H",["^49","^3Q"]],"^9",221,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[["^5J","^6O","^5="]]]]]],"~$triaabb-axis-test",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",146,"^8",8,"^9",146,"^:",25,"^33",true,"^34",["^16",["^35",["^16",[["~$pa1","~$pb1","~$pa2","~$pb2","~$a","~$b","~$fa","~$fb","^4<","^4?"]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/triaabb-axis-test","^6","thi/ng/geom/utils/intersect.cljc","^:",25,"^3F",["^16",[["^6R","^6S","^6T","^6U","~$a","~$b","^6V","^6W","^4<","^4?"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",146,"^3O",["^H",["^3P","^3Q"]],"^9",146,"^3R",10,"^3S",true,"^34",["^16",["^35",["^16",[["^6R","^6S","^6T","^6U","~$a","~$b","^6V","^6W","^4<","^4?"]]]]]],"~$face-b1?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",295,"^8",8,"^9",295,"^:",16,"^33",true,"^34",["^16",["^35",["^16",[["^4D","~$n"]]]]],"^3W","Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/face-b1?","^6","thi/ng/geom/utils/intersect.cljc","^:",16,"^3F",["^16",[["^4D","~$n"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",295,"^3O","^3P","^9",295,"^3R",2,"^3S",true,"^34",["^16",["^35",["^16",[["^4D","~$n"]]]]],"^3W","Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."],"~$triaabb-edge-test-e0",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",154,"^8",8,"^9",154,"^:",28,"^33",true,"^34",["^16",["^35",["^16",[[["^36","^37","^38","^18","~$a"],["^39","^3:","^3;","^18","~$b"],["^3<","^3=","^3>"],["^3?","^3@","^3A","^18","~$e"],["^3B","^3C","^3D"]]]]]]],"^33",true,"^I","~$thi.ng.geom.utils.intersect/triaabb-edge-test-e0","^6","thi/ng/geom/utils/intersect.cljc","^:",28,"^3F",["^16",[["~$p__45509","~$p__45510","~$p__45511","~$p__45512","~$p__45513"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",154,"^3O",["^H",["^3P","^3Q"]],"^9",154,"^3R",5,"^3S",true,"^34",["^16",["^35",["^16",[[["^36","^37","^38","^18","~$a"],["^39","^3:","^3;","^18","~$b"],["^3<","^3=","^3>"],["^3?","^3@","^3A","^18","~$e"],["^3B","^3C","^3D"]]]]]]],"~$face-a",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",288,"^8",8,"^9",288,"^:",14,"^33",true,"^34",["^16",["^35",["^16",[["~$f","^4D"]]]]],"^3W","Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."],"^33",true,"^I","~$thi.ng.geom.utils.intersect/face-a","^6","thi/ng/geom/utils/intersect.cljc","^:",14,"^3F",["^16",[["~$f","^4D"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",288,"^3O","^4[","^9",288,"^3R",2,"^3S",true,"^34",["^16",["^35",["^16",[["~$f","^4D"]]]]],"^3W","Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."],"~$intersect-aabb-frustum?",["^ ","^32",null,"^5",["^ ","^6","thi/ng/geom/utils/intersect.cljc","^7",73,"^8",7,"^9",73,"^:",30,"^34",["^16",["^35",["^16",[[["^3Z","^3[","^40","^18","~$p"],"~$size","~$planes"]]]]],"^3W","Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"],"^I","~$thi.ng.geom.utils.intersect/intersect-aabb-frustum?","^6","thi/ng/geom/utils/intersect.cljc","^:",30,"^3F",["^16",[["~$p__45457","^79","^7:"]]],"^3L",null,"^3M",["^16",[null,null]],"^8",1,"^3N",false,"^7",73,"^3O",["^H",[null,"^49"]],"^9",73,"^3R",3,"^3S",true,"^34",["^16",["^35",["^16",[[["^3Z","^3[","^40","^18","~$p"],"^79","^7:"]]]]],"^3W","Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"]],"^X",["^ ","^13","^13","^14","^13","^R","^R"],"~:cljs.analyzer/constants",["^ ","^V",["^H",["~:q","~:intersect-outside","~:r","~:inside","^5L","~:parallel","~:ua","~:ub","~:type","~:e","^4=","~:on-plane","~:coincident-no-intersect","~:no-intersect","~:same-plane","~:intersect","~:f","~:f*","~:coincident","~:p","~:degenerate","~:outside"]],"~:order",["~:p","~:r","^4=","^7L","^7H","^7?","^5L","^7C","^7K","^7G","^7F","~:q","^7J","^7E","^7@","^7A","^7B","^7>","^7D","~:f","^7I","~:e"]],"^1:",["^ ","^X",["^H",[]],"^W",["^H",[]]],"^1;",["^ "],"^1<",["^T","^R","^P","^O","^S","^U"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1J",[["^7P","~:static-fns"],true,["^7P","~:elide-asserts"],false,["^7P","~:optimize-constants"],null,["^7P","^1A"],null,["^7P","~:external-config"],null,["^7P","~:tooling-config"],null,["^7P","~:emit-constants"],null,["^7P","~:load-tests"],null,["^7P","~:form-size-threshold"],null,["^7P","~:infer-externs"],true,["^7P","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7P","~:fn-invoke-direct"],null,["^7P","~:source-map"],"/dev/null"]]]